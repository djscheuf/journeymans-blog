<?xml version="1.0" encoding="UTF-8"?>
<!--
 This is a WordPress eXtended RSS file generated by WordPress as an export of your site.
 It contains information about your site's posts, pages, comments, categories, and other content.
 You may use this file to transfer that content from one site to another.
 This file is not intended to serve as a complete backup of your site.

 To import this information into a WordPress site follow these steps:
 1. Log in to that site as an administrator.
 2. Go to Tools: Import in the WordPress admin panel.
 3. Install the "WordPress" importer from the list.
 4. Activate & Run Importer.
 5. Upload this file using the form provided on that page.
 6. You will first be asked to map the authors in this export file to users
    on the site. For each author, you may choose to map to an
    existing user on the site or to create a new user.
 7. WordPress will then import each of the posts, pages, comments, categories, etc.
    contained in this file into your site.
-->
<!-- generator="WordPress.com" created="2018-08-14 01:05"-->
<rss version="2.0" xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:wp="http://wordpress.org/export/1.2/">
  <channel>
<title>Daniel J Scheufler</title>
<link>https://danieljscheufler.wordpress.com</link>
<description>Software Engineer, Husband, Father</description>
<pubDate>Tue, 14 Aug 2018 01:05:44 +0000</pubDate>
<language>en</language>
<wp:wxr_version>1.2</wp:wxr_version>
<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
<wp:base_blog_url>https://danieljscheufler.wordpress.com</wp:base_blog_url>
<wp:author>
  <wp:author_login>tytrin</wp:author_login>
  <wp:author_email>daniel.j.scheufler@gmail.com</wp:author_email>
  <wp:author_display_name><![CDATA[Daniel]]></wp:author_display_name>
  <wp:author_first_name><![CDATA[]]></wp:author_first_name>
  <wp:author_last_name><![CDATA[]]></wp:author_last_name>
</wp:author>
<wp:category>
  <wp:term_id>44070</wp:term_id>
  <wp:category_nicename>automation</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Automation]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>120216756</wp:term_id>
  <wp:category_nicename>innovation-fridays</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Innovation Fridays]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>5621</wp:term_id>
  <wp:category_nicename>introductions</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Introductions]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>527236856</wp:term_id>
  <wp:category_nicename>journeymans-digest</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Journeyman's Digest]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>18697</wp:term_id>
  <wp:category_nicename>knowledge-base</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Knowledge Base]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>12412</wp:term_id>
  <wp:category_nicename>perspective</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Perspective]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>2301</wp:term_id>
  <wp:category_nicename>software-development</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Software Development]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>42375</wp:term_id>
  <wp:category_nicename>talks</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Talks]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>24750899</wp:term_id>
  <wp:category_nicename>todayilearned</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[TodayILearned]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1981</wp:term_id>
  <wp:category_nicename>tools</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[tools]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>1</wp:term_id>
  <wp:category_nicename>uncategorized</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name>
</wp:category>
<wp:category>
  <wp:term_id>191035</wp:term_id>
  <wp:category_nicename>work-projects</wp:category_nicename>
  <wp:category_parent/>
  <wp:cat_name><![CDATA[Work Projects]]></wp:cat_name>
</wp:category>
<wp:tag>
  <wp:term_id>11287</wp:term_id>
  <wp:tag_slug>agile</wp:tag_slug>
  <wp:tag_name><![CDATA[AGILE]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>547745</wp:term_id>
  <wp:tag_slug>agile-methodology</wp:tag_slug>
  <wp:tag_name><![CDATA[Agile Methodology]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3562</wp:term_id>
  <wp:tag_slug>agility</wp:tag_slug>
  <wp:tag_name><![CDATA[agility]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3378</wp:term_id>
  <wp:tag_slug>algorithms</wp:tag_slug>
  <wp:tag_name><![CDATA[algorithms]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4276</wp:term_id>
  <wp:tag_slug>api</wp:tag_slug>
  <wp:tag_name><![CDATA[API]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1796876</wp:term_id>
  <wp:tag_slug>api-design</wp:tag_slug>
  <wp:tag_name><![CDATA[API Design]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>94234</wp:term_id>
  <wp:tag_slug>asp-net</wp:tag_slug>
  <wp:tag_name><![CDATA[ASP.NET]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1517</wp:term_id>
  <wp:tag_slug>atom</wp:tag_slug>
  <wp:tag_name><![CDATA[atom]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>230227322</wp:term_id>
  <wp:tag_slug>atom-io</wp:tag_slug>
  <wp:tag_name><![CDATA[atom.io]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1073593</wp:term_id>
  <wp:tag_slug>autonomous</wp:tag_slug>
  <wp:tag_name><![CDATA[autonomous]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8577009</wp:term_id>
  <wp:tag_slug>autonomous-vehicle</wp:tag_slug>
  <wp:tag_name><![CDATA[autonomous vehicle]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>75400</wp:term_id>
  <wp:tag_slug>bdd</wp:tag_slug>
  <wp:tag_name><![CDATA[BDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1365498</wp:term_id>
  <wp:tag_slug>behavior-driven-development</wp:tag_slug>
  <wp:tag_name><![CDATA[behavior-driven development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>193197</wp:term_id>
  <wp:tag_slug>board-game</wp:tag_slug>
  <wp:tag_name><![CDATA[board game]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15622</wp:term_id>
  <wp:tag_slug>board-games</wp:tag_slug>
  <wp:tag_name><![CDATA[board games]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>191602254</wp:term_id>
  <wp:tag_slug>bullet-journal</wp:tag_slug>
  <wp:tag_name><![CDATA[bullet journal]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8517</wp:term_id>
  <wp:tag_slug>bundle</wp:tag_slug>
  <wp:tag_name><![CDATA[bundle]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>179</wp:term_id>
  <wp:tag_slug>business</wp:tag_slug>
  <wp:tag_name><![CDATA[business]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>107011</wp:term_id>
  <wp:tag_slug>business-meetings</wp:tag_slug>
  <wp:tag_name><![CDATA[business meetings]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1634593</wp:term_id>
  <wp:tag_slug>c-2</wp:tag_slug>
  <wp:tag_name><![CDATA[c#]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2426</wp:term_id>
  <wp:tag_slug>c</wp:tag_slug>
  <wp:tag_name><![CDATA[c++]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19867</wp:term_id>
  <wp:tag_slug>challenge</wp:tag_slug>
  <wp:tag_name><![CDATA[challenge]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5614</wp:term_id>
  <wp:tag_slug>child</wp:tag_slug>
  <wp:tag_name><![CDATA[child]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1343</wp:term_id>
  <wp:tag_slug>children</wp:tag_slug>
  <wp:tag_name><![CDATA[children]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>49904</wp:term_id>
  <wp:tag_slug>choice</wp:tag_slug>
  <wp:tag_name><![CDATA[choice]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5876158</wp:term_id>
  <wp:tag_slug>clean-code</wp:tag_slug>
  <wp:tag_name><![CDATA[clean-code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99185</wp:term_id>
  <wp:tag_slug>cli</wp:tag_slug>
  <wp:tag_name><![CDATA[cli]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>29959</wp:term_id>
  <wp:tag_slug>cmd</wp:tag_slug>
  <wp:tag_name><![CDATA[cmd]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22772263</wp:term_id>
  <wp:tag_slug>cmd-line</wp:tag_slug>
  <wp:tag_name><![CDATA[cmd-line]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>656</wp:term_id>
  <wp:tag_slug>code</wp:tag_slug>
  <wp:tag_name><![CDATA[code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>348835720</wp:term_id>
  <wp:tag_slug>code-battle</wp:tag_slug>
  <wp:tag_name><![CDATA[code battle]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1214</wp:term_id>
  <wp:tag_slug>communication</wp:tag_slug>
  <wp:tag_name><![CDATA[communication]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>773500</wp:term_id>
  <wp:tag_slug>compete</wp:tag_slug>
  <wp:tag_name><![CDATA[compete]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>472</wp:term_id>
  <wp:tag_slug>competition</wp:tag_slug>
  <wp:tag_name><![CDATA[competition]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>89438</wp:term_id>
  <wp:tag_slug>competitive</wp:tag_slug>
  <wp:tag_name><![CDATA[competitive]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>132147</wp:term_id>
  <wp:tag_slug>cpp</wp:tag_slug>
  <wp:tag_name><![CDATA[cpp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6263</wp:term_id>
  <wp:tag_slug>creative</wp:tag_slug>
  <wp:tag_name><![CDATA[creative]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>172806</wp:term_id>
  <wp:tag_slug>crud</wp:tag_slug>
  <wp:tag_name><![CDATA[crud]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20740</wp:term_id>
  <wp:tag_slug>csharp</wp:tag_slug>
  <wp:tag_name><![CDATA[csharp]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>475</wp:term_id>
  <wp:tag_slug>database</wp:tag_slug>
  <wp:tag_name><![CDATA[database]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>28136</wp:term_id>
  <wp:tag_slug>debug</wp:tag_slug>
  <wp:tag_name><![CDATA[debug]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>780</wp:term_id>
  <wp:tag_slug>development</wp:tag_slug>
  <wp:tag_name><![CDATA[development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>17887</wp:term_id>
  <wp:tag_slug>development-environment</wp:tag_slug>
  <wp:tag_name><![CDATA[development environment]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6713</wp:term_id>
  <wp:tag_slug>domain</wp:tag_slug>
  <wp:tag_name><![CDATA[domain]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>258601</wp:term_id>
  <wp:tag_slug>effective</wp:tag_slug>
  <wp:tag_name><![CDATA[effective]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>25209</wp:term_id>
  <wp:tag_slug>effective-communication</wp:tag_slug>
  <wp:tag_name><![CDATA[effective communication]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1386632</wp:term_id>
  <wp:tag_slug>effective-meetings</wp:tag_slug>
  <wp:tag_name><![CDATA[effective meetings]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6474</wp:term_id>
  <wp:tag_slug>encryption</wp:tag_slug>
  <wp:tag_name><![CDATA[encryption]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1047186</wp:term_id>
  <wp:tag_slug>entity-framework</wp:tag_slug>
  <wp:tag_name><![CDATA[entity-framework]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>222469697</wp:term_id>
  <wp:tag_slug>eslint</wp:tag_slug>
  <wp:tag_name><![CDATA[eslint]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>59649</wp:term_id>
  <wp:tag_slug>esoteric</wp:tag_slug>
  <wp:tag_name><![CDATA[esoteric]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7422804</wp:term_id>
  <wp:tag_slug>exposure-control</wp:tag_slug>
  <wp:tag_name><![CDATA[exposure control]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>406</wp:term_id>
  <wp:tag_slug>family</wp:tag_slug>
  <wp:tag_name><![CDATA[family]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>488436</wp:term_id>
  <wp:tag_slug>family-games</wp:tag_slug>
  <wp:tag_name><![CDATA[family games]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>481083361</wp:term_id>
  <wp:tag_slug>feature-control</wp:tag_slug>
  <wp:tag_name><![CDATA[feature control]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9548</wp:term_id>
  <wp:tag_slug>features</wp:tag_slug>
  <wp:tag_name><![CDATA[features]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>635705900</wp:term_id>
  <wp:tag_slug>file-casing</wp:tag_slug>
  <wp:tag_name><![CDATA[file-casing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1206499</wp:term_id>
  <wp:tag_slug>form-validation</wp:tag_slug>
  <wp:tag_name><![CDATA[form validation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>188921</wp:term_id>
  <wp:tag_slug>functional</wp:tag_slug>
  <wp:tag_name><![CDATA[functional]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1221</wp:term_id>
  <wp:tag_slug>game</wp:tag_slug>
  <wp:tag_name><![CDATA[game]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>21</wp:term_id>
  <wp:tag_slug>games</wp:tag_slug>
  <wp:tag_name><![CDATA[games]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>99</wp:term_id>
  <wp:tag_slug>generic</wp:tag_slug>
  <wp:tag_name><![CDATA[generic]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209196</wp:term_id>
  <wp:tag_slug>git</wp:tag_slug>
  <wp:tag_name><![CDATA[git]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>124740479</wp:term_id>
  <wp:tag_slug>git-support</wp:tag_slug>
  <wp:tag_name><![CDATA[git support]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5603054</wp:term_id>
  <wp:tag_slug>github</wp:tag_slug>
  <wp:tag_name><![CDATA[github]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>495228799</wp:term_id>
  <wp:tag_slug>gitkracken</wp:tag_slug>
  <wp:tag_name><![CDATA[gitkracken]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8959</wp:term_id>
  <wp:tag_slug>goal</wp:tag_slug>
  <wp:tag_name><![CDATA[goal]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11870</wp:term_id>
  <wp:tag_slug>goals</wp:tag_slug>
  <wp:tag_name><![CDATA[goals]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7168</wp:term_id>
  <wp:tag_slug>gui</wp:tag_slug>
  <wp:tag_name><![CDATA[GUI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>15298</wp:term_id>
  <wp:tag_slug>hands</wp:tag_slug>
  <wp:tag_name><![CDATA[hands]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>678</wp:term_id>
  <wp:tag_slug>history</wp:tag_slug>
  <wp:tag_name><![CDATA[history]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7746</wp:term_id>
  <wp:tag_slug>ide</wp:tag_slug>
  <wp:tag_name><![CDATA[IDE]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6715</wp:term_id>
  <wp:tag_slug>ie</wp:tag_slug>
  <wp:tag_name><![CDATA[ie]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32</wp:term_id>
  <wp:tag_slug>infrastructure</wp:tag_slug>
  <wp:tag_name><![CDATA[infrastructure]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>186</wp:term_id>
  <wp:tag_slug>innovation</wp:tag_slug>
  <wp:tag_name><![CDATA[innovation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>120216756</wp:term_id>
  <wp:tag_slug>innovation-fridays</wp:tag_slug>
  <wp:tag_name><![CDATA[Innovation Fridays]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9558952</wp:term_id>
  <wp:tag_slug>integration-tests</wp:tag_slug>
  <wp:tag_name><![CDATA[integration-tests]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>112687</wp:term_id>
  <wp:tag_slug>internetexplorer</wp:tag_slug>
  <wp:tag_name><![CDATA[internetexplorer]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>530471293</wp:term_id>
  <wp:tag_slug>interprocess-comminitation</wp:tag_slug>
  <wp:tag_name><![CDATA[interprocess comminitation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>11788</wp:term_id>
  <wp:tag_slug>interview</wp:tag_slug>
  <wp:tag_name><![CDATA[interview]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>457</wp:term_id>
  <wp:tag_slug>javascript</wp:tag_slug>
  <wp:tag_name><![CDATA[javascript]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>277645</wp:term_id>
  <wp:tag_slug>jest</wp:tag_slug>
  <wp:tag_name><![CDATA[jest]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>96</wp:term_id>
  <wp:tag_slug>journal</wp:tag_slug>
  <wp:tag_name><![CDATA[journal]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>259233</wp:term_id>
  <wp:tag_slug>jupyter</wp:tag_slug>
  <wp:tag_name><![CDATA[jupyter]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1934</wp:term_id>
  <wp:tag_slug>language</wp:tag_slug>
  <wp:tag_name><![CDATA[language]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>84567</wp:term_id>
  <wp:tag_slug>leader</wp:tag_slug>
  <wp:tag_name><![CDATA[leader]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7885</wp:term_id>
  <wp:tag_slug>leadership</wp:tag_slug>
  <wp:tag_name><![CDATA[leadership]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4933</wp:term_id>
  <wp:tag_slug>learn</wp:tag_slug>
  <wp:tag_name><![CDATA[learn]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>264</wp:term_id>
  <wp:tag_slug>learning</wp:tag_slug>
  <wp:tag_name><![CDATA[learning]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>91209</wp:term_id>
  <wp:tag_slug>legacy</wp:tag_slug>
  <wp:tag_name><![CDATA[legacy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10217</wp:term_id>
  <wp:tag_slug>legacy-code</wp:tag_slug>
  <wp:tag_name><![CDATA[legacy code]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>137213</wp:term_id>
  <wp:tag_slug>licensing</wp:tag_slug>
  <wp:tag_name><![CDATA[licensing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>114227</wp:term_id>
  <wp:tag_slug>linq</wp:tag_slug>
  <wp:tag_name><![CDATA[linq]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>14608</wp:term_id>
  <wp:tag_slug>list</wp:tag_slug>
  <wp:tag_name><![CDATA[list]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1832</wp:term_id>
  <wp:tag_slug>lists</wp:tag_slug>
  <wp:tag_name><![CDATA[lists]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6418</wp:term_id>
  <wp:tag_slug>location</wp:tag_slug>
  <wp:tag_name><![CDATA[location]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>150816270</wp:term_id>
  <wp:tag_slug>lodash</wp:tag_slug>
  <wp:tag_name><![CDATA[lodash]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4236</wp:term_id>
  <wp:tag_slug>management</wp:tag_slug>
  <wp:tag_name><![CDATA[management]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2536815</wp:term_id>
  <wp:tag_slug>map-reduce</wp:tag_slug>
  <wp:tag_name><![CDATA[map-reduce]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1209</wp:term_id>
  <wp:tag_slug>meetings</wp:tag_slug>
  <wp:tag_name><![CDATA[meetings]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7092</wp:term_id>
  <wp:tag_slug>metrics</wp:tag_slug>
  <wp:tag_name><![CDATA[metrics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>18337848</wp:term_id>
  <wp:tag_slug>minimum-viable-product</wp:tag_slug>
  <wp:tag_name><![CDATA[Minimum viable product]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>13924</wp:term_id>
  <wp:tag_slug>mission</wp:tag_slug>
  <wp:tag_name><![CDATA[mission]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>43886</wp:term_id>
  <wp:tag_slug>mit</wp:tag_slug>
  <wp:tag_name><![CDATA[mit]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>438515</wp:term_id>
  <wp:tag_slug>mocking</wp:tag_slug>
  <wp:tag_name><![CDATA[mocking]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>105696</wp:term_id>
  <wp:tag_slug>mocks</wp:tag_slug>
  <wp:tag_name><![CDATA[mocks]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>38205</wp:term_id>
  <wp:tag_slug>morality</wp:tag_slug>
  <wp:tag_name><![CDATA[morality]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72342</wp:term_id>
  <wp:tag_slug>morals</wp:tag_slug>
  <wp:tag_name><![CDATA[morals]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>224713</wp:term_id>
  <wp:tag_slug>mvp</wp:tag_slug>
  <wp:tag_name><![CDATA[MVP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>103</wp:term_id>
  <wp:tag_slug>news</wp:tag_slug>
  <wp:tag_name><![CDATA[news]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>103676</wp:term_id>
  <wp:tag_slug>nhibernate</wp:tag_slug>
  <wp:tag_name><![CDATA[nhibernate]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>635705899</wp:term_id>
  <wp:tag_slug>no-unresolved</wp:tag_slug>
  <wp:tag_name><![CDATA[no-unresolved]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7951</wp:term_id>
  <wp:tag_slug>notebook</wp:tag_slug>
  <wp:tag_name><![CDATA[notebook]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>962177</wp:term_id>
  <wp:tag_slug>npm</wp:tag_slug>
  <wp:tag_name><![CDATA[npm]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>20106</wp:term_id>
  <wp:tag_slug>object-oriented-programming</wp:tag_slug>
  <wp:tag_name><![CDATA[object oriented programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1358307</wp:term_id>
  <wp:tag_slug>omit</wp:tag_slug>
  <wp:tag_name><![CDATA[omit]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4826</wp:term_id>
  <wp:tag_slug>oop</wp:tag_slug>
  <wp:tag_name><![CDATA[OOP]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6335</wp:term_id>
  <wp:tag_slug>organization</wp:tag_slug>
  <wp:tag_name><![CDATA[organization]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>72028</wp:term_id>
  <wp:tag_slug>organize</wp:tag_slug>
  <wp:tag_name><![CDATA[organize]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1930</wp:term_id>
  <wp:tag_slug>performance</wp:tag_slug>
  <wp:tag_name><![CDATA[performance]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4320</wp:term_id>
  <wp:tag_slug>personal-projects</wp:tag_slug>
  <wp:tag_name><![CDATA[personal projects]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1868</wp:term_id>
  <wp:tag_slug>philosophy</wp:tag_slug>
  <wp:tag_name><![CDATA[philosophy]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24361</wp:term_id>
  <wp:tag_slug>practice</wp:tag_slug>
  <wp:tag_name><![CDATA[practice]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1207</wp:term_id>
  <wp:tag_slug>principles</wp:tag_slug>
  <wp:tag_name><![CDATA[principles]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196</wp:term_id>
  <wp:tag_slug>programming</wp:tag_slug>
  <wp:tag_name><![CDATA[programming]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>24733</wp:term_id>
  <wp:tag_slug>protection</wp:tag_slug>
  <wp:tag_name><![CDATA[protection]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7991</wp:term_id>
  <wp:tag_slug>prototype</wp:tag_slug>
  <wp:tag_name><![CDATA[prototype]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>832</wp:term_id>
  <wp:tag_slug>python</wp:tag_slug>
  <wp:tag_name><![CDATA[python]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>16525</wp:term_id>
  <wp:tag_slug>quality</wp:tag_slug>
  <wp:tag_name><![CDATA[quality]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>195721</wp:term_id>
  <wp:tag_slug>query</wp:tag_slug>
  <wp:tag_name><![CDATA[query]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>940440</wp:term_id>
  <wp:tag_slug>raygun</wp:tag_slug>
  <wp:tag_name><![CDATA[raygun]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>96530</wp:term_id>
  <wp:tag_slug>react</wp:tag_slug>
  <wp:tag_name><![CDATA[react]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>332586557</wp:term_id>
  <wp:tag_slug>react-router</wp:tag_slug>
  <wp:tag_name><![CDATA[react-router]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>128973</wp:term_id>
  <wp:tag_slug>recent-work</wp:tag_slug>
  <wp:tag_name><![CDATA[recent work]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>239117</wp:term_id>
  <wp:tag_slug>redirect</wp:tag_slug>
  <wp:tag_name><![CDATA[redirect]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>299360</wp:term_id>
  <wp:tag_slug>redux</wp:tag_slug>
  <wp:tag_name><![CDATA[redux]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8408</wp:term_id>
  <wp:tag_slug>reflection</wp:tag_slug>
  <wp:tag_name><![CDATA[reflection]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>4232663</wp:term_id>
  <wp:tag_slug>repl</wp:tag_slug>
  <wp:tag_name><![CDATA[repl]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>668</wp:term_id>
  <wp:tag_slug>research</wp:tag_slug>
  <wp:tag_name><![CDATA[research]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1784</wp:term_id>
  <wp:tag_slug>resources</wp:tag_slug>
  <wp:tag_name><![CDATA[resources]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1745</wp:term_id>
  <wp:tag_slug>review</wp:tag_slug>
  <wp:tag_name><![CDATA[review]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>90436</wp:term_id>
  <wp:tag_slug>robot</wp:tag_slug>
  <wp:tag_name><![CDATA[robot]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>801</wp:term_id>
  <wp:tag_slug>security</wp:tag_slug>
  <wp:tag_name><![CDATA[security]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5824059</wp:term_id>
  <wp:tag_slug>self-driving-car</wp:tag_slug>
  <wp:tag_name><![CDATA[self-driving car]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2790558</wp:term_id>
  <wp:tag_slug>simulate</wp:tag_slug>
  <wp:tag_name><![CDATA[simulate]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>827</wp:term_id>
  <wp:tag_slug>simulation</wp:tag_slug>
  <wp:tag_name><![CDATA[simulation]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>581</wp:term_id>
  <wp:tag_slug>software</wp:tag_slug>
  <wp:tag_name><![CDATA[software]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5245</wp:term_id>
  <wp:tag_slug>software-dev</wp:tag_slug>
  <wp:tag_name><![CDATA[software dev]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2301</wp:term_id>
  <wp:tag_slug>software-development</wp:tag_slug>
  <wp:tag_name><![CDATA[Software Development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>107226</wp:term_id>
  <wp:tag_slug>solid</wp:tag_slug>
  <wp:tag_name><![CDATA[SOLID]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>40686</wp:term_id>
  <wp:tag_slug>spa</wp:tag_slug>
  <wp:tag_name><![CDATA[spa]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>59250</wp:term_id>
  <wp:tag_slug>spoof</wp:tag_slug>
  <wp:tag_name><![CDATA[spoof]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>10346</wp:term_id>
  <wp:tag_slug>sql</wp:tag_slug>
  <wp:tag_name><![CDATA[sql]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5849</wp:term_id>
  <wp:tag_slug>statistics</wp:tag_slug>
  <wp:tag_name><![CDATA[statistics]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>203432</wp:term_id>
  <wp:tag_slug>sun-tzu</wp:tag_slug>
  <wp:tag_name><![CDATA[sun tzu]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>32774</wp:term_id>
  <wp:tag_slug>survey</wp:tag_slug>
  <wp:tag_name><![CDATA[survey]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>739</wp:term_id>
  <wp:tag_slug>talk</wp:tag_slug>
  <wp:tag_name><![CDATA[talk]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>76604</wp:term_id>
  <wp:tag_slug>tdd</wp:tag_slug>
  <wp:tag_name><![CDATA[TDD]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>8071</wp:term_id>
  <wp:tag_slug>team</wp:tag_slug>
  <wp:tag_name><![CDATA[team]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>861038</wp:term_id>
  <wp:tag_slug>techfest</wp:tag_slug>
  <wp:tag_name><![CDATA[techfest]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1539620</wp:term_id>
  <wp:tag_slug>telemetry</wp:tag_slug>
  <wp:tag_name><![CDATA[telemetry]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>78073</wp:term_id>
  <wp:tag_slug>test-driven-development</wp:tag_slug>
  <wp:tag_name><![CDATA[test-driven development]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>2768746</wp:term_id>
  <wp:tag_slug>test-suite</wp:tag_slug>
  <wp:tag_name><![CDATA[test-suite]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>12</wp:term_id>
  <wp:tag_slug>testing</wp:tag_slug>
  <wp:tag_name><![CDATA[testing]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>196102</wp:term_id>
  <wp:tag_slug>third-party</wp:tag_slug>
  <wp:tag_name><![CDATA[third-party]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1392656</wp:term_id>
  <wp:tag_slug>til</wp:tag_slug>
  <wp:tag_name><![CDATA[til]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5218551</wp:term_id>
  <wp:tag_slug>tim-peters</wp:tag_slug>
  <wp:tag_name><![CDATA[tim peters]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>7384</wp:term_id>
  <wp:tag_slug>to-do</wp:tag_slug>
  <wp:tag_name><![CDATA[to-do]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5763014</wp:term_id>
  <wp:tag_slug>todictionary</wp:tag_slug>
  <wp:tag_name><![CDATA[todictionary]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>22353</wp:term_id>
  <wp:tag_slug>tool</wp:tag_slug>
  <wp:tag_name><![CDATA[tool]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1981</wp:term_id>
  <wp:tag_slug>tools</wp:tag_slug>
  <wp:tag_name><![CDATA[tools]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>943</wp:term_id>
  <wp:tag_slug>training</wp:tag_slug>
  <wp:tag_name><![CDATA[training]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>57610</wp:term_id>
  <wp:tag_slug>trust</wp:tag_slug>
  <wp:tag_name><![CDATA[trust]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>88264</wp:term_id>
  <wp:tag_slug>tuning</wp:tag_slug>
  <wp:tag_name><![CDATA[tuning]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>356151</wp:term_id>
  <wp:tag_slug>turtle</wp:tag_slug>
  <wp:tag_name><![CDATA[turtle]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>27940</wp:term_id>
  <wp:tag_slug>ui</wp:tag_slug>
  <wp:tag_name><![CDATA[UI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>1100831</wp:term_id>
  <wp:tag_slug>unit-test</wp:tag_slug>
  <wp:tag_name><![CDATA[unit-test]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>9280</wp:term_id>
  <wp:tag_slug>user-experience</wp:tag_slug>
  <wp:tag_name><![CDATA[User Experience]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>6171</wp:term_id>
  <wp:tag_slug>user-interface</wp:tag_slug>
  <wp:tag_name><![CDATA[User Interface]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>81969</wp:term_id>
  <wp:tag_slug>ux</wp:tag_slug>
  <wp:tag_name><![CDATA[UX]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>246566</wp:term_id>
  <wp:tag_slug>ux-design</wp:tag_slug>
  <wp:tag_name><![CDATA[UX Design]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>514865</wp:term_id>
  <wp:tag_slug>visual-communication</wp:tag_slug>
  <wp:tag_name><![CDATA[visual communication]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5564398</wp:term_id>
  <wp:tag_slug>visual-studios</wp:tag_slug>
  <wp:tag_name><![CDATA[Visual Studios]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>151</wp:term_id>
  <wp:tag_slug>web</wp:tag_slug>
  <wp:tag_name><![CDATA[web]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>26656049</wp:term_id>
  <wp:tag_slug>webpack</wp:tag_slug>
  <wp:tag_name><![CDATA[webpack]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>136633</wp:term_id>
  <wp:tag_slug>whiteboard</wp:tag_slug>
  <wp:tag_name><![CDATA[whiteboard]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>5337688</wp:term_id>
  <wp:tag_slug>whiteboarding</wp:tag_slug>
  <wp:tag_name><![CDATA[whiteboarding]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>43058</wp:term_id>
  <wp:tag_slug>window</wp:tag_slug>
  <wp:tag_name><![CDATA[window]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>19557</wp:term_id>
  <wp:tag_slug>workshop</wp:tag_slug>
  <wp:tag_name><![CDATA[workshop]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>209557</wp:term_id>
  <wp:tag_slug>yagni</wp:tag_slug>
  <wp:tag_name><![CDATA[YAGNI]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>60237036</wp:term_id>
  <wp:tag_slug>you-aint-gonna-need-it</wp:tag_slug>
  <wp:tag_name><![CDATA[you ain't gonna need it]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>487166229</wp:term_id>
  <wp:tag_slug>you-arent-gonna-need-it</wp:tag_slug>
  <wp:tag_name><![CDATA[you aren't gonna need it]]></wp:tag_name>
</wp:tag>
<wp:tag>
  <wp:term_id>3379</wp:term_id>
  <wp:tag_slug>zen</wp:tag_slug>
  <wp:tag_name><![CDATA[zen]]></wp:tag_name>
</wp:tag>
<wp:term>
  <wp:term_id>530471329</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>collections</wp:term_slug>
  <wp:term_name><![CDATA[Collections]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>530471331</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>resume</wp:term_slug>
  <wp:term_name><![CDATA[Resume]]></wp:term_name>
</wp:term>
<wp:term>
  <wp:term_id>6771</wp:term_id>
  <wp:term_taxonomy>nav_menu</wp:term_taxonomy>
  <wp:term_slug>site-main</wp:term_slug>
  <wp:term_name><![CDATA[Site Main]]></wp:term_name>
</wp:term>
<generator>http://wordpress.com/</generator>
<image>
		<url>https://s0.wp.com/i/buttonw-com.png</url>
		<title>Daniel J Scheufler</title>
		<link>https://danieljscheufler.wordpress.com</link>
	</image>
	<item>
  <title>About</title>
  <link>https://danieljscheufler.wordpress.com/about/</link>
  <pubDate>Thu, 31 Mar 2016 21:23:50 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.wordpress.com/?page_id=1</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-451 alignright" src="https://danieljscheufler.files.wordpress.com/2016/03/photo.jpg" alt="photo" width="137" height="137" />

<hr />

<strong><a href="https://danieljscheufler.wordpress.com/about/work-experience/">Work Experience</a></strong> -<strong> <a href="https://danieljscheufler.wordpress.com/about/education/">Education</a></strong>

<hr />

I've been interested in computers since a young age, even building them from parts with my father. Since then I have done a little of everything from replacing the CPU in my laptop to programming a semi-autonomous quad-copter. I pursued my interest for robotics and computers as an Electrical Engineer in college. But I discovered my passion when I landed my first internship. Oddly, the act that took my over the hump was a mod I wrote for <a href="https://minecraft.net/" target="_blank" rel="noopener">Minecraft</a>.

I graduated Magna Cum Laude, and then married the love of my life the very next day. I have been pursuing Software Development ever since.I started in Oil and Gas, but have worked in Tele-medecine, and most recently in E-Commerce.

Being a Senior Consultant with Improving, I am eager to contribute to our community. I am happily available for UserGroups, workshops, Lunch-and-learns, and hackathons! Please feel free to contact me for further details.

Email me at <a href="mailto:daniel.j.scheufler@gmail.com">daniel.j.scheufler@gmail.com</a>

Or you can find me on <a href="https://www.linkedin.com/in/danielscheufler" target="_blank" rel="noopener">LinkedIn</a> and <a href="https://github.com/djscheuf" target="_blank" rel="noopener">Github</a>!]]></content:encoded>
  <excerpt:encoded><![CDATA[A quick introduction to Daniel J Scheufler, and links to relevant resume information.]]></excerpt:encoded>
  <wp:post_id>1</wp:post_id>
  <wp:post_date>2016-03-31 21:23:50</wp:post_date>
  <wp:post_date_gmt>2016-03-31 21:23:50</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>about</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[default]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Resume</title>
  <link>https://danieljscheufler.wordpress.com/?page_id=2</link>
  <pubDate>Thu, 31 Mar 2016 21:39:46 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=2</guid>
  <description/>
  <content:encoded><![CDATA[<h2></h2>
<h2 align="center">WORK EXPERIENCE</h2>
<h3>Software Engineer</h3>
IHS, Houston, TX March 2016- Present
<ul>
	<li>Improved Companies Licensing architecture, allowing easier analysis and tighter control of  feature exposure</li>
	<li>Aided in the implementation of integrated analytics within companies newest Product</li>
</ul>
<h3>Associate Software Engineer</h3>
IHS, Houston, TX December 2014- February 2016
<ul>
	<li>Designed Automated Database Testing Suite, and instructed others in its use and maintenance</li>
	<li>Integrated companies newest program with existing applications to produce smooth user experience</li>
	<li>Implemented 2D and 3D data visualization to user requested product areas.</li>
	<li>Continued development of soft skills through self-directed training</li>
</ul>
<h3>Software Development Intern</h3>
CAPSHER Technology, College Station, TX May 2013 – August 2013
<ul>
	<li>Following general software engineering principles, designed and implemented improvements to existing code base in C++.</li>
	<li>Communicated with Colleagues and superiors about the project’s technical details and possible solutions to the assigned problem.</li>
	<li>Improved existing image analysis algorithms increasing detection rate and performance of the system</li>
	<li>Communicated with and aided QA in integrating these changed into the shippable product.</li>
</ul>
<h2>EDUCATION</h2>
University of Houston, Houston, TX

<strong>Bachelor of Science in Electrical Engineering</strong>- Computer Option December 2014

Cumulative GPA: 3.53, <em>Magna Cum Laude</em>
<h3>PROJECTS</h3>
<ul>
	<li><span style="text-decoration:underline;">Quadcopter for the Assisted Navigation and Geometric Mapping of GPS-Denied Environments</span>: Designed, and developed a quadcopter drone which could autonomously follow room walls, collecting 3D geometric information of GPS-Denied(indoor) environments, and avoid collisions.</li>
	<li><span style="text-decoration:underline;">Process Arrival and Management Simulation</span>: Implemented a C++ based, discrete-time simulation of process arriving to a quad-core CPU, with finite usage delays, which computed usage statistics for the set of processes, which allowed for testing of various Scheduling Algorithms.</li>
	<li><span style="text-decoration:underline;">Robot Obstacle Course</span>: Designed, coded and tested a State Machine and drivers, in Assembly and in Robot-C, to guide a small robot through an obstacle course using interrupt threads.</li>
</ul>
<h2 align="center">SKILLS</h2>
<span style="text-decoration:underline;">Programming</span>: C, C++, C#, Assembly, Fortran, Java, Matlab, Python, Verilog

<span style="text-decoration:underline;">Software</span>: Eclipse, Matlab, Microsoft Office, MS SQL Server, MS Visual Studio, Photoshop, Linux OS

<span style="text-decoration:underline;">Technical</span>: MS Unit Testing Framework, Text Transformation(T4) Templates, WPF and WCF Frameworks
<h2 align="center">MEMBERSHIPS and AWARDS</h2>
Tau Beta Pi Engineering Honor Society 2014 – Present

Louis-Stokes Advancement of Minority Participation Scholarship 2012 – 20014

Dean’s List Cullen College of Engineering Fall 2012- Spring 2013]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>2</wp:post_id>
  <wp:post_date>2016-03-31 21:39:46</wp:post_date>
  <wp:post_date_gmt>2016-03-31 21:39:46</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>resume</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Home</title>
  <link>https://danieljscheufler.wordpress.com/</link>
  <pubDate>Thu, 31 Mar 2016 21:41:58 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=21</guid>
  <description/>
  <content:encoded><![CDATA[I am a Senior Consultant with Improving Houston. I have developed software for Oil and Gas, Tele-medicine and recently ECommerce clients. I work mostly in C#, but have recently added React and NodeJS to my toolbelt.

Of late, I have begun to focus on the communication aspects of my work. It is a common gag in Industry that Developers don't speak the same language as 'normals'. I intend to bridge that gap.

In an effort to capture my experience, and to help others I write a <a href="https://danieljscheufler.wordpress.com/blog/">blog</a> with interesting discussions on development as a practice, as well as some nutz-and-bolts topics. Additionally I am developing talks on White-boarding, a feared Interview practice, which I happen to enjoy.

If you are interested I can be reach on <a href="https://www.linkedin.com/in/danielscheufler/" target="_blank" rel="noopener">LinkedIn</a>, <a href="http://github.com/djscheuf" target="_blank" rel="noopener">Github</a>, or via <a href="mailto:daniel.j.scheufler@gmail.com">email</a> for speaking engagements, hackathons, pro bono work for nonprofits, or Lunch-and-Learns.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>21</wp:post_id>
  <wp:post_date>2016-03-31 16:41:58</wp:post_date>
  <wp:post_date_gmt>2016-03-31 21:41:58</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>home</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Journeyman's Travels</title>
  <link>https://danieljscheufler.wordpress.com/blog/</link>
  <pubDate>Sat, 02 Apr 2016 00:38:57 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=28</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>28</wp:post_id>
  <wp:post_date>2016-04-01 19:38:57</wp:post_date>
  <wp:post_date_gmt>2016-04-02 00:38:57</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>blog</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/?p=32</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=32</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>32</wp:post_id>
  <wp:post_date>2016-04-01 20:44:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1459561459]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/?p=33</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=33</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>33</wp:post_id>
  <wp:post_date>2016-04-01 20:44:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1459561459]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/?p=34</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=34</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>34</wp:post_id>
  <wp:post_date>2016-04-01 20:44:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[28]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1459561459]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/?p=35</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=35</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>35</wp:post_id>
  <wp:post_date>2016-04-01 20:44:19</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_orphaned</wp:meta_key>
    <wp:meta_value><![CDATA[1459561459]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>0 Index</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/02/0-index/</link>
  <pubDate>Sat, 02 Apr 2016 17:03:08 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=42</guid>
  <description/>
  <content:encoded><![CDATA[Welcome to my blog! Here I hope to post discussions on many topics of interest to software developers and hopefully a wider audience.

I am but a humble beginner, but I do hope you will join in on '<em>A</em> <em>Journeyman's Travels'</em>!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>42</wp:post_id>
  <wp:post_date>2016-04-02 12:03:08</wp:post_date>
  <wp:post_date_gmt>2016-04-02 17:03:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>0-index</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="introductions"><![CDATA[Introductions]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21384451909]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/04/02/52/</link>
  <pubDate>Sat, 02 Apr 2016 17:03:44 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=52</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>52</wp:post_id>
  <wp:post_date>2016-04-02 12:03:44</wp:post_date>
  <wp:post_date_gmt>2016-04-02 17:03:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>52</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="site-main"><![CDATA[Site Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[21]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/04/02/53/</link>
  <pubDate>Sat, 02 Apr 2016 17:03:44 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=53</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>53</wp:post_id>
  <wp:post_date>2016-04-02 12:03:44</wp:post_date>
  <wp:post_date_gmt>2016-04-02 17:03:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>53</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="site-main"><![CDATA[Site Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Journeyman’s Travels</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/02/a-journeymans-travels/</link>
  <pubDate>Sat, 02 Apr 2016 17:03:44 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=54</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>54</wp:post_id>
  <wp:post_date>2016-04-02 12:03:44</wp:post_date>
  <wp:post_date_gmt>2016-04-02 17:03:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>a-journeymans-travels</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="site-main"><![CDATA[Site Main]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[28]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Development Tool: Jupyter</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/07/development-tool-jupyter/</link>
  <pubDate>Thu, 07 Apr 2016 20:40:15 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=57</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-weight:400;">Recently, one of my colleagues</span><span style="font-weight:400;"> presented a prototype of a new feature that my team was going to implement. To be certain the new feature was fascinating both for its algorithmic complexity, and its significance to our users. However, I was admittedly more caught by the tool he had used to develop and present the prototype. With this tool he was able to set-up a development environment, test data, and was able to demonstrate live, working code for us with ease! This tool was </span><a href="http://jupyter.org/" target="_blank">Jupyter</a><span style="font-weight:400;">.</span>

[caption id="" align="alignright" width="240"]<img class=" alignright" src="http://blog.jupyter.org/content/images/2015/02/jupyter-sq-text.png" alt="" width="240" height="240" /> *Jupyter Logo[/caption]

<span style="font-weight:400;">I can best describe Jupyer as a web-hosted development and testing environment. The Jupyter application is installed on a server which can then expose multiple notebooks wherein the development can be done. More specifically, these notebooks are where the demonstration data is housed, and the presentation are run. Moreover, each notebook can be hooked up to a different compiler/interpreter to allow development to proceed in multiple languages!</span>

<span style="font-weight:400;">This is profoundly useful, because it allows a prototype to be developed in the easiest language to program in, without having to pay for the overhead of a presentation layer! Thus demonstrating a feature to the PM/PO becomes much easier! Furthermore, when you are presenting to the developers, they can make adjustments to the code which you are presenting and they can witness the change's effects in real-time!</span>

<span style="font-weight:400;">A Jupyter notebook's structure is very similar, if not identical, to that of a </span><a href="https://www.wolfram.com/mathematica/" target="_blank">Mathematica</a><span style="font-weight:400;"> Notebook. In Mathematica, the user creates a notebook, and enters an equation , or series of equations into an entry. Then the computation is carried out for that entry, and the user can proceed to use the results in the next entry. This includes plotting as well as some algorithmic analysis, which is especially useful for complex physics simulations.</span>

<span style="font-weight:400;">In Jupyter, the user enters a series of functions, function calls, or classes into an entry, which can then be employed for later use by future entries. One can execute an algorithm in one step, and plot it in the next, or go on to use the results of the algorithm in another step.</span>

<span style="font-weight:400;">Each entry's results are calculated based only on the present conditions, so changes to entry 1 might affect entry 5's results, if entry 5 used entry 1's results to calculate. But as a benefit, if a mistake was made in entry N, one need only correct that entry, and then re-run the calculations for the entries which follow. Both Mathematica and Jupyter share this behavior.</span>

<span style="font-weight:400;">In a corporate setting Jupyter would excel in several use cases, including the PM/PO and the developer Demonstration. In a non-co-located, or even in a co-located environment, a Jupyter notebook could be set-up to allow many users to interact with prototypes in real-time, allowing developers to review the functioning of the prototype while they might be developing the code in a different location or language.</span>

<span style="font-weight:400;">Alternatively, It could be used to allow the PM to visualize what a new feature's output will look like given some sample data, without having to ask the developers to run the simulation! This would allow the PM to quickly sort through the accuracy of the algorithm. In this case, a QA could also use the notebook to actively investigate a customer reported error in the algorithm, so long as they have the important data and access to an updated algorithm. This way the QA would not need the entire user project, and all the sensitive information that might contain, which could make reproducing bugs much easier!</span>

<span style="font-weight:400;">Finally, as was the case with my colleagues work, Jupyter can be used as a rapid-prototyping environment. Since the language compiler/interpreter are set with the notebook, and the presentation layer is already handled, the developer is much more free to pursue the real interest, the product algorithm. Since the language is not locked by previous work, the developer would be free to choose whatever language they felt would best suit the project. They could feasibly borrow data from other projects, or even simply generate it within the notebook!</span>

<span style="font-weight:400;">Overall, Jupyter looks to be a very effective tool for sharing the development of algorithms, or other possible calculation intensive features in an accessible way with multiple parties within the organization. It provides a usable interface to both developers and non-developers alike, in an approachable fashion. It provides the ability to modify the experimental data to give the users a more detailed understanding of the prototype. And finally, if it were used to hold the existing algorithms, then it might also allow the PM's to simulate the program sufficiently to trace bugs related to the customer data, or to the company's algorithm rather than wasting significant time in the back-and-forth as developers seek to understand the meaning behind the data, and why a particular output is wrong.</span>

<span style="font-weight:400;">For those interested in knowing more, you can find Jupyter at </span><a href="http://jupyter.org/"><span style="font-weight:400;">jupyter.org</span></a><span style="font-weight:400;">! Thank you for your time, and I hope that you find this tool to be useful in your endeavors!</span>

<span style="font-weight:400;">* The image shown is the Jupyter logo found on the </span><a href="http://jupyter.org/"><span style="font-weight:400;">jupyter.org</span></a><span style="font-weight:400;"> home page.</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>57</wp:post_id>
  <wp:post_date>2016-04-07 15:40:15</wp:post_date>
  <wp:post_date_gmt>2016-04-07 20:40:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>development-tool-jupyter</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="development-environment"><![CDATA[development environment]]></category>
  <category domain="post_tag" nicename="ide"><![CDATA[IDE]]></category>
  <category domain="post_tag" nicename="jupyter"><![CDATA[jupyter]]></category>
  <category domain="post_tag" nicename="prototype"><![CDATA[prototype]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tool"><![CDATA[tool]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21565771873]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Games for the children of Software Developers</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/14/software-dev-games-for-your-children/</link>
  <pubDate>Thu, 14 Apr 2016 20:30:38 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=65</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-weight:400;">For those who did not know, my wife and I are expecting a son this summer! This will be my first child and I am rather excited, if I am honest. Naturally I started thinking of all the things I wanted to share with my son, and I realize that programming, at least at its face is something that is difficult to share or even explain to a child. So naturally I started doing some research and I found a article on a site that I frequent that I wanted to share with the other software developers.</span>

<span style="font-weight:400;">The site is </span><a href="http://geekandsundry.com/" target="_blank">Geek and Sundry</a><span style="font-weight:400;">, and they tend to focus on the more 'geeky' side of our culture, with things such as tabletop RPGs and even a running Podcast of some of their members playing Dungeons and Dragons. (By the way, I find their shenanigans very entertaining, and their Dungeon Master is quite good, if you are interested in that sort of thing.) Anyway, while I was searching for games to share with my children I happened across an article on their site, which featured 5 games for a geek's children. </span>

[caption id="" align="alignleft" width="230"]<img class=" alignleft" src="http://www.robotturtles.com/wp-content/uploads/2014/02/BoxShot.png" alt="" width="230" height="235" /> Robot Turtles Board Game*[/caption]

<span style="font-weight:400;">Naturally I investigated, and I was pleasantly surprised by the variety of games they showed. However one in particular caught my attention! That game was called <a href="http://www.robotturtles.com/">Robot Turtles</a>. For those who are interested you may find the article </span><a href="http://http//geekandsundry.com/5-tabletop-games-to-sneakily-teach-kids-math-and-problem-solving/" target="_blank">here</a><span style="font-weight:400;">!</span>

<span style="font-weight:400;">The game Robot Turtles claims to teach your child the basics of algorithmic problem solving, and computer programming. It does this by having the child navigate their 'robot' through a </span><span style="font-weight:400;">maze to capture a gem, by providing their 'robot' with instructions in the form of6 cards. </span>

[caption id="" align="alignright" width="295"]<img class=" alignright" src="https://cdn.sparkfun.com/r/600-600/assets/learn_tutorials/2/6/1/ardublock_01.png" alt="ArduBlock example" width="295" height="225" /> Example of Block programming IDE^[/caption]

<span style="font-weight:400;">Personally I find this ingenious! I have seen several versions of computer-based </span><a href="https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces" target="_blank">block programming</a><span style="font-weight:400;">,
but I had always wondered whether it could be implemented as a board game. Thankfully I no longer have to invent my own, thanks to the inventor of Robot Turtles!
</span>

<span style="font-weight:400;">The basics of the game are fairly simple. For the purpose of this example, let us assume that it will be one parent and one child playing together. In this case, the adult would act as both the course designer and as the 'Turtle Mover'. The child is engaged in the activity by handing the Turtle Mover the cards which indicate what they want their turtle to do. The cards might include such things as turning 90 degrees left or right, or perhaps moving forward. As the child gets better at the game, there are expansions available, like crates that might block a walkway, but the turtle can push; or a laser to melt ice blocks to the turtle can walk past. In fact, if the child becomes very skilled they can begin to employ the 'Function Frog', which allows them to string together more instructions at once and to repeat them as often as they like.</span>

<span style="font-weight:400;">Having read over the </span><a href="https://docs.google.com/document/d/1sUvO56g-quVt-PXdazk9qT_oqun16hTquMZX1tuWlz8/edit" target="_blank">online rules</a><span style="font-weight:400;">, I rather like the basic version of the game and I am really looking forward to playing it with my son once he is in preschool. However I must admit that some of the later editions of the game are not as much to my liking. I believe the Galapagos version includes the ability for players to insert bugs into other players programs. And as a result of these bugs the program executes backwards from the bug to the beginning. To further complicate the matter, the players aren't allowed to look at their program stack unless they are running it, which I find somewhat frustrating, even though it adds an interesting level of complexity.</span>

[caption id="" align="alignnone" width="615"]<img src="http://www.robotturtles.com/wp-content/uploads/2014/02/Game-Layed-Out.png" alt="" width="615" height="450" /> Robot Turtles Board Game - Example Maze*[/caption]

<span style="font-weight:400;">Even though there are many editions of the rules, from my findings, I think this game is definitely a solid investment, even though it may not be suitable for all age groups! I personally love the idea, and I think that with some modifications of my own I could certainly extend the life of this game. I can't wait to play this with my son! For anyone who is interested, here is a direct link to the game's website: </span><a href="http://www.robotturtles.com/"><span style="font-weight:400;">http://www.robotturtles.com/</span></a><span style="font-weight:400;"> . I am certain this is not the only game of its kind out there, and so I'd love to hear more, if you know of any or, if you'd like to simply share your favorite, please share a link in the comments below!</span>

:* Taken from the Robot Turtles Website.

:^ Taken from Alternative Arduino IDE post on: <a href="https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces" target="_blank">https://learn.sparkfun.com/tutorials/alternative-arduino-interfaces</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>65</wp:post_id>
  <wp:post_date>2016-04-14 15:30:38</wp:post_date>
  <wp:post_date_gmt>2016-04-14 20:30:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>software-dev-games-for-your-children</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="board-game"><![CDATA[board game]]></category>
  <category domain="post_tag" nicename="board-games"><![CDATA[board games]]></category>
  <category domain="post_tag" nicename="child"><![CDATA[child]]></category>
  <category domain="post_tag" nicename="children"><![CDATA[children]]></category>
  <category domain="post_tag" nicename="family"><![CDATA[family]]></category>
  <category domain="post_tag" nicename="family-games"><![CDATA[family games]]></category>
  <category domain="post_tag" nicename="games"><![CDATA[games]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="robot"><![CDATA[robot]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="turtle"><![CDATA[turtle]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[21796564526]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>1</wp:comment_id>
    <wp:comment_author><![CDATA[AllAboardGame]]></wp:comment_author>
    <wp:comment_author_email>thomasmayowetzel@yahoo.de</wp:comment_author_email>
    <wp:comment_author_url>http://allaboardgame.com</wp:comment_author_url>
    <wp:comment_author_IP>166.171.184.61</wp:comment_author_IP>
    <wp:comment_date>2016-04-15 08:58:30</wp:comment_date>
    <wp:comment_date_gmt>2016-04-15 13:58:30</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[This is a great game! -And congratulations on the expected son.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>98999483</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460728710.6751921176910400390625;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"allaboardgame";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1460732407</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460732407</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460732407.22624301910400390625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>2</wp:comment_id>
    <wp:comment_author><![CDATA[Daniel]]></wp:comment_author>
    <wp:comment_author_email>ty.dsjunk@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://tytrin.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>73.232.215.75</wp:comment_author_IP>
    <wp:comment_date>2016-04-16 12:24:22</wp:comment_date>
    <wp:comment_date_gmt>2016-04-16 17:24:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Thank you, I am glad it has met with your approval!]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>1</wp:comment_parent>
    <wp:comment_user_id>30509991</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1460827462</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1460827462.759027004241943359375;s:5:"event";s:9:"check-ham";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1460827462</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Licensing Overhaul - A New Challenge</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/</link>
  <pubDate>Thu, 21 Apr 2016 20:00:06 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=103</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

<img class="alignnone size-full wp-image-159 aligncenter" src="https://danieljscheufler.files.wordpress.com/2016/04/contract-sign-538x218.jpg" alt="contract-sign-538x218" width="538" height="218" />

&nbsp;

Anyone who knows commercial software knows the dreaded self-mutilation that is software licensing. From the developer point of view, having the application turn off parts of itself always seemed a little silly to me. But from the business standpoint, it is not only necessary but it is of the utmost importance to generate revenue and to protect your product.

Additionally, Licensing is one of those things that touches everything in the application at least at some level. As a result it can be terrible if you get it wrong, and worse when you have to make changes to it.

For my second stint on a legacy code team, this was the exact task they assigned to me. Honestly, when we started I didn't think there was any way I could get it done in the 10 weeks I had to do it in. To help get you some idea of what I was dealing with, I will start by sharing what I found out about our previous system.

Now to start off, you should know, this code base is in C++. Furthermore, it bears the scares of a transition from C into C++ and from functional programming to Object Oriented Programming. In laymen's terms that means that this code base is older than I am. A lot older.

To be certain this code has seen some years, but the fact that it has stuck around this long is a testament to its impressive library of functionality. After all, no one keeps code that doesn't do something useful.

Getting back on point though, the previous manner of managing Licenses reflects the code's age as well, though perhaps less favorably. In previous generations of this product License were sold per feature area, rather than as a bundle. The result was that many areas of the applications, and especially the central UI area, are thoroughly riddled with checks for multiple of these Feature Licenses.

Admittedly, the LicenseManager object does a good job of executing its apparent job description. The trouble is that since the a particular function might be available in multiple Feature Licenses, it can be difficult to tell, from the back-side of the UI, what the program is trying to protect from the user.

For the work I did on this system, the proliferation of multiple License checks was especially troubling. You see, recently my company had reorganized the Licenses which they sell, resulting in some confusion between the old and new Licenses in the code. For simplicity I will call them License A, License B, License C ( which is really a combination of A and B) and License D.

My product manager wanted to allow the users under License B to see data which had been created in the same project by users under License A. Further he wanted them not to be able to modify this data, or to be able to import or export it. Given the current system and confusion, this was a very tall order!

As I have mentioned above, the previous system required the UI area to make a number of checks for several different Feature Licenses before determining whether a particular function was allowed to the user or not. Naturally, this resulted in several complex logical expressions in an attempt to determine whether or not the user was allowed to take a particular action.

<img class="  wp-image-162 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/04/archaeology-clipart-confusion.png" alt="archaeology-clipart-confusion" width="151" height="324" />For example, in order to determine if a user is allowed to load a given data type from the database, the data manager would first query the License Manager for Feature Licenses X, Y, and Z. Then if the user had X or Y, but not Z they would be allowed to proceed to loading. If they have Feature X they loaded a particular subset of the data, and if they have Feature Y they loaded a different one.

Admittedly this is a simple case, but imagine if this kind of check was made in several different areas of the code. The same check written by different developers at different times for slightly different reasons. The natural differences between coding styles would prevent one from simply searching through the code base for all similar checks.

Furthermore, there is no clear place in the code to determine what a particular Feature License would allow or disallow. This is even further compounded when the new Licenses do not directly match up with a set of Features, and under the hood  they are really just re-skinning  some of the bigger Feature Licenses.

But that is enough of my belly-aching! After sifting through the old implementation, and some whiteboard work, I was able to develop a better design. Please check back next week, when I'll explain how I made it easier to make the license checks, easier to tell what a license allows and doesn't, and how I was able to avoid replacing the entire licensing system!

<a href="https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/">Part 2</a> - The Whiteboard Strikes Back!

<a href="https://danieljscheufler.wordpress.com/2016/05/05/licensing-overhaul-return-of-the-designer/">Part 3</a> - Return of the Designer]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>103</wp:post_id>
  <wp:post_date>2016-04-21 15:00:06</wp:post_date>
  <wp:post_date_gmt>2016-04-21 20:00:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>licensing-overhaul-introduction</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="cpp"><![CDATA[cpp]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="exposure-control"><![CDATA[exposure control]]></category>
  <category domain="post_tag" nicename="feature-control"><![CDATA[feature control]]></category>
  <category domain="post_tag" nicename="features"><![CDATA[features]]></category>
  <category domain="post_tag" nicename="legacy"><![CDATA[legacy]]></category>
  <category domain="post_tag" nicename="legacy-code"><![CDATA[legacy code]]></category>
  <category domain="post_tag" nicename="licensing"><![CDATA[licensing]]></category>
  <category domain="post_tag" nicename="object-oriented-programming"><![CDATA[object oriented programming]]></category>
  <category domain="post_tag" nicename="oop"><![CDATA[OOP]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="recent-work"><![CDATA[recent work]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22031446475]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>7</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; The Whiteboard Strikes Back &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.195</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:22:19</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:22:19</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In case you missed it, you can see Part 1 of the series here: Part 1 &#8211; A New Challenge [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474590139.58889102935791015625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482671</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482671.218904018402099609375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.6556909084320068359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>9</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; Return of the Designer &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/05/05/licensing-overhaul-return-of-the-designer/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.151</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:24:47</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:24:47</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] case you missed parts one or two of the series you can find there here: Part 1- A New Challenge, Part 2 &#8211; The Whiteboard Strikes [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474590287.4345829486846923828125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482666</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482666.82514190673828125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.7884209156036376953125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>contract-sign-538x218</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/contract-sign-538x218/#main</link>
  <pubDate>Tue, 12 Apr 2016 23:56:35 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/04/contract-sign-538x218.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>159</wp:post_id>
  <wp:post_date>2016-04-12 18:56:35</wp:post_date>
  <wp:post_date_gmt>2016-04-12 23:56:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>contract-sign-538x218</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>103</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/04/contract-sign-538x218.jpg</wp:attachment_url>
</item>
<item>
  <title>archaeology-clipart-confusion</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/archaeology-clipart-confusion/#main</link>
  <pubDate>Tue, 12 Apr 2016 23:58:04 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/04/archaeology-clipart-confusion.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>162</wp:post_id>
  <wp:post_date>2016-04-12 18:58:04</wp:post_date>
  <wp:post_date_gmt>2016-04-12 23:58:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>archaeology-clipart-confusion</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>103</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/04/archaeology-clipart-confusion.png</wp:attachment_url>
</item>
<item>
  <title>Licensing Overhaul - The Whiteboard Strikes Back</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/</link>
  <pubDate>Thu, 28 Apr 2016 20:00:50 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=165</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

<img class="alignnone size-full wp-image-159 aligncenter" src="https://danieljscheufler.files.wordpress.com/2016/04/contract-sign-538x218.jpg" alt="contract-sign-538x218" width="538" height="218" />

In case you missed it, you can see Part 1 of the series here: <a href="https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/">Part 1 - A New Challenge</a>

Last week, I introduced my second biggest work project to date. Shortly after re-vamping the License structure, my PM decided he also wanted to change what some of the licenses allowed the user to do. Upon digging into the code, I discovered a tangled web of multiple checks and confusion. I thought there was no way I could finish in 10 weeks. Thankfully my estimates were in correct, and some solid design work saved the day! Today, I will discuss the design aspects of my new implementation.

Starting out, I knew this project would be not only big and rather difficult but that it would also be a catastrophe later if I did not do it well. Even so I was surprised by just how ornery the project got before the end.

To be certain, I knew at the outset that I wanted my design to be better and if possible to be more Object-Oriented that the previous implementations had been. However I had very little idea what that meant at the time.

As I progressed through the project some goals did eventually become apparent. I am listing them here, in the hopes that I might learn to generate these design goals earlier in the project going forward.
<ul>
	<li>I wanted my design to provide an explanatory interface to the user. I wanted it to be clear from looking at a simple call what permission was desired.</li>
	<li> I wanted permissions presented to be general enough that only a few would be needed, and that these would be clear in their intent.</li>
	<li>I wanted to ensure that any code written in this phase was stable enough that it wouldn't change should any new scope be added. To be more specific, if the covered permissions or the data types that were covered ever increased I wanted the present code to remain unchanged, both in syntax and in outcome.</li>
	<li>I wanted my code to be segregated enough that if ever the original License Manager need be replaced, it would be done with a minimal effort to update the new code base, and without disturbing the Permission request calls listed above.</li>
	<li>Lastly, I wanted my new code to be easy for anyone who came after to learn and to use, so as to reduce the multiple versions of the same License check that were seen in previous implementations.</li>
</ul>
Again, I admit that these goals were not all so verbose when I started the project, but I did set out with something very like this in mind as I began to design my solution.

During the first few weeks of the project, I spend a great deal of time sifting through the code, concentrating on the Main UI area, and on the areas which my PM had mentioned he wanted to change. I made note of the patterns, and anti-patterns that I found throughout, and used these to inform my design choices.

While sorting through all of that information, I also spend a lot of time at a whiteboard drafting, and redrafting the objects and responsibilities that I wanted to manage, in order to solve the problem.Overall a great deal of attention as spend on their interfaces. The picture below shows the resulting system that I developed, as drawn on a whiteboard.

<img class="  wp-image-209 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/04/20160307_090229.jpg?w=680" alt="20160307_090229.jpg" width="455" height="258" />

The workhorse of my solution was the Mediator, which was responsible for routing the Permission Request from any end point through the licenses that the system currently had checked out, and provide a Boolean response to either allow the request or to deny it.

To facilitate its work, it is injected with the License Manager, which is used to determine what Licenses, if any, are presently checked out for the system, and then it called on the Factory. The Factory, per its namesake, would create License Objects prepared to answer the Request queries being routed to them by the Mediator.

All of this architecture was created to support the abstraction of the idea of a Permission, that is an allowed action on a particular data type. A License in this sense, is composed by the series of Data types and their allowed actions under that License.  The Connection between Data Type and Action Type are represented by the Object Type object.

Now, some of the more seasoned developers reading this will probably be shaking their head at this name, but I assure you there was a good reason for it. In the first place, the code base I had to work with had another meaning for the term 'data type' and as a result the only other suitable term that myself, and an English major could conjure up that meant something similar to our intention was 'object'.

Getting back on topic, there are several classes where a 1 to N relationship is specified. In laymen's terms, this means that it is possible for multiple of the 'N' type objects to housed under the '1' type object. This is a oversimplification, it will suffice for the moment.

The reason there are several 1 to N relationships is because I wanted to abstract the responsibility for know whether or not a particular action was allowed, while simultaneously providing a simple and easy to use interface for such a query. What I ended up creating is best show by the "call-stack-like" write up shown in the picture below:

<img class="alignnone size-full wp-image-219" src="https://danieljscheufler.files.wordpress.com/2016/04/20160307_090423.jpg" alt="20160307_090423.jpg" width="3441" height="2705" />

As I mentioned earlier, the Mediator would route the query to the Licenses which were checked out at the time. So each license is asked whether or not it supports the requested action. To determine this, each License will in turn find the matching Object type of the query, if it has one, and will further route the request. The ObjectType then response based on whether or not it has permission for that action.

Since the number of licenses is unknown, some additional check are needed. For example, it makes sense to just skip the checks if no licenses are checked out, since there would be no response. However if multiple licenses are present, then some rationalizing needs to be done on their multiple responses. Thankfully, the PM decided that it was sufficient to allow the action if at least one of the Licenses that was checked out allowed it.

That is really all the more complex it got. After the appropriate associations were made to the various license. This basically concludes the design portions, and data types, it was a simple matter of tracking down what code I needed to change and how.

Admittedly, that process took nearly a month, and would have been a disaster had it not been for some stellar QA help. But overall, I was able to finish the vast majority of the code in about 6 weeks, and the QAs were able to catch up and feel secure in their approval around 8 weeks. Naturally being nearly a month ahead of schedule made the PM very happy!

So this week we covered the goals of my new design, the general responsibility of the software objects that I used to create the new system, as well as the Request routing hierarchy. Come back next week, when I'll be discussing the concrete benefits of the new design, as well as some of the draw backs. Thanks as always for your time!

<a href="https://danieljscheufler.wordpress.com/2016/05/05/licensing-overhaul-return-of-the-designer/">Part 3</a> - Return of the Designer

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>165</wp:post_id>
  <wp:post_date>2016-04-28 15:00:50</wp:post_date>
  <wp:post_date_gmt>2016-04-28 20:00:50</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>licensing-overhaul-the-whiteboard-strikes-back</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="cpp"><![CDATA[cpp]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="exposure-control"><![CDATA[exposure control]]></category>
  <category domain="post_tag" nicename="feature-control"><![CDATA[feature control]]></category>
  <category domain="post_tag" nicename="features"><![CDATA[features]]></category>
  <category domain="post_tag" nicename="legacy"><![CDATA[legacy]]></category>
  <category domain="post_tag" nicename="legacy-code"><![CDATA[legacy code]]></category>
  <category domain="post_tag" nicename="licensing"><![CDATA[licensing]]></category>
  <category domain="post_tag" nicename="object-oriented-programming"><![CDATA[object oriented programming]]></category>
  <category domain="post_tag" nicename="oop"><![CDATA[OOP]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="recent-work"><![CDATA[recent work]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22276037778]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>5</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; A New Challenge &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.53</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:19:22</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:19:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Part 2 &#8211; The Whiteboard Strikes Back! [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474589962.5950930118560791015625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482677</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482677.5258541107177734375;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.5071480274200439453125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>10</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; Return of the Designer &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/05/05/licensing-overhaul-return-of-the-designer/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.151</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:24:49</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:24:49</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] In case you missed parts one or two of the series you can find there here: Part 1- A New Challenge, Part 2 &#8211; The Whiteboard Strikes Back [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474590289.756999969482421875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482664</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482664.8168780803680419921875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.8431708812713623046875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>20160307_090229</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/20160307_090229/#main</link>
  <pubDate>Thu, 14 Apr 2016 01:43:17 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/04/20160307_090229.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>209</wp:post_id>
  <wp:post_date>2016-04-13 20:43:17</wp:post_date>
  <wp:post_date_gmt>2016-04-14 01:43:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>20160307_090229</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>165</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/04/20160307_090229.jpg</wp:attachment_url>
</item>
<item>
  <title>20160307_090423</title>
  <link>https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/20160307_090423/#main</link>
  <pubDate>Thu, 14 Apr 2016 01:52:34 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/04/20160307_090423.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>219</wp:post_id>
  <wp:post_date>2016-04-13 20:52:34</wp:post_date>
  <wp:post_date_gmt>2016-04-14 01:52:34</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>20160307_090423</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>165</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/04/20160307_090423.jpg</wp:attachment_url>
</item>
<item>
  <title>Licensing Overhaul - Return of the Designer</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/05/licensing-overhaul-return-of-the-designer/</link>
  <pubDate>Thu, 05 May 2016 20:00:30 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=261</guid>
  <description/>
  <content:encoded><![CDATA[<img class="alignnone size-full wp-image-159 aligncenter" src="https://danieljscheufler.files.wordpress.com/2016/04/contract-sign-538x218.jpg" alt="contract-sign-538x218" width="538" height="218" />

In case you missed parts one or two of the series you can find there here: <a href="https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/">Part 1- A New Challenge</a>, <a href="https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/">Part 2 - The Whiteboard Strikes Back</a>

Welcome back to the series on Licensing Overhaul! Last time we witness the rise of a new system, and discussed the gritty details of some of the more important components. This time we will review our journey, and focus more on some realizations brought on by hindsight.

To summarize, my PM wanted to change what some of the existing Licenses allowed our users to do. So I spend some 6 weeks digging through the old jungle of code, and developed a simpler, and in my opinion cleaner solution.  Last week, I went into detail about this design. This week I plan to cover the benefits that were realized in the design as well as some of the foreseen drawbacks. I will address the drawbacks first.

Every decision made in a design naturally chooses a set of advantages and disadvantages to take for the software. My new licensing system is no different in this respect. While the design supports a great number of data types to query, it is somewhat weak in this area.

Specifically the performance of the query may be adversely affected should the number of datatypes be greatly increased. Thankfully, the number necessary would be very great indeed. Each License would need to support something on the order of 10,000 different data types before any notable performance hit would be noticed.

<img class=" alignleft" src="https://pixabay.com/static/uploads/photo/2015/08/27/10/39/bottleneck-910050_960_720.png" width="164" height="144" />This weakness results from the License Checking each ObjectType for its data type. This could be easily fixed if the License were to use a data type to Permissions dictionary rather than a simple list. However time has not yet been allocated to for this change, and the solution was not discovered until after the project was determined to be complete.

In a similar way, the number of Licenses may also present certain challenges. Since each License is queried for each permission request, if the number of different licenses checked out by the system should increase greatly, it would also negatively impact the performance of the query.

Again, the number would need to be very great, on the order of 10,000. However, the number of License checks has a multiplicative effect on the ObjectType check. As a result, it would probably be best to spend the time to fix the ObjectType rather than the License check bottleneck, as this would offer greater improvement between the two.

So much for the weaknesses of the design. Now on a happier note, the design has several strong benefits, some were realized very early on in the implementation, while others became apparent towards the end. I will start with the one which became obvious while I was implementing this change.

Perhaps the most long lasting of the benefits for the new system is that it was built to support incremental changes! The new system did not completely replace the existing License checks, rather it came in along side them and took over a select few. By doing so, the scope of responsibility remained manageable during implementation, and it only touched what it had to. This benefit was by far the biggest in terms of controlling scope creep.<img class=" alignright" src="https://upload.wikimedia.org/wikipedia/commons/a/ab/Concord_free_public_library.jpg" width="318" height="210" />

The next benefit became obvious as I drew to the end of the project. By that time, the accumulation of permissions knowledge grew to such a size that it was easy to see the patterns of allowance by the licenses, at least for the affected area of data. Since we now had an aggregation of the License permissions knowledge, future changes to said permissions are much simpler. Rather than having to dig through many thousands of lines of code to replace the various license checks, one would need only change how the License Object was created in order to implement the desired change.

To cap things off, I realized that there was one further benefit that could be realized. However this will likely not be until the remote future. At present the Mediator relies on the Manager to determine what Licenses are checked out. Presuming that any replacement manager implements the same interface, it can easily be swapped out when the time comes. And with the code base gradually moving towards C#, it seems that it may be inevitable, albeit sometime in the next 20 or more years.

&nbsp;

All in all, this was a very enlightening project to be allowed to work on, and very rewarding for the chance to implement a system which may one day widely affect the application in the future. Naturally there are some optimizations that I could chosen had I been thinking about performance, but it has been said that <a href="http://c2.com/cgi/wiki?PrematureOptimization" target="_blank">premature optimization is the root of all evil</a>.

As always, I thank you for listening and I welcome your thoughts and comments! Let me know if you think of any ways to improve the design, I would really enjoy such a discussion! And until next time, good luck and God bless!
<ul>
	<li>Bottleneck road sign - https://pixabay.com/en/photos/bottleneck/</li>
	<li>Library Interior - https://upload.wikimedia.org/wikipedia/commons/a/ab/Concord_free_public_library.jpg</li>
</ul>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>261</wp:post_id>
  <wp:post_date>2016-05-05 15:00:30</wp:post_date>
  <wp:post_date_gmt>2016-05-05 20:00:30</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>licensing-overhaul-return-of-the-designer</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="cpp"><![CDATA[cpp]]></category>
  <category domain="post_tag" nicename="exposure-control"><![CDATA[exposure control]]></category>
  <category domain="post_tag" nicename="feature-control"><![CDATA[feature control]]></category>
  <category domain="post_tag" nicename="features"><![CDATA[features]]></category>
  <category domain="post_tag" nicename="legacy"><![CDATA[legacy]]></category>
  <category domain="post_tag" nicename="legacy-code"><![CDATA[legacy code]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="recent-work"><![CDATA[recent work]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22535449388]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>6</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; A New Challenge &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.53</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:19:24</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:19:24</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Part 3 &#8211; Return of the Designer [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474589964.4655959606170654296875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482673</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482673.631865978240966796875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.580493927001953125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>8</wp:comment_id>
    <wp:comment_author><![CDATA[Licensing Overhaul &#8211; The Whiteboard Strikes Back &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/04/28/licensing-overhaul-the-whiteboard-strikes-back/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.83.195</wp:comment_author_IP>
    <wp:comment_date>2016-09-22 19:22:22</wp:comment_date>
    <wp:comment_date_gmt>2016-09-23 00:22:22</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Part 3 &#8211; Return of the Designer [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474590142.710073947906494140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482668</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482669.00860595703125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1474595027.7240440845489501953125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Pragmatism in Programming</title>
  <link>https://danieljscheufler.wordpress.com/?p=312</link>
  <pubDate>Thu, 05 May 2016 20:00:09 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=312</guid>
  <description/>
  <content:encoded><![CDATA[--Synopsis only not ready to post!

[A] Intro

[B] Framing: Discuss Yagni

As I have been working at a Software Engineer, one term come up time and again during code reviews. YAGNI. It is usually said when I have tried to solve a problem that isn't in the system yet, but could be in the future.

YAGNI stands for "You aren't gonna need it". And generally serves as a reminder to be pragmatic about what you do and do not code. After all, you might not need that extra bit of code later. This is in essence seeking to be Pragmatic about the code that one develops.

Now, just like any phrase which represents a principle, it can be misapplied and abused. However, I find YAGNI to be, on the whole, effective and helpful. But recently while I was ruminating on the principle behind it, I realized that one of the pillars of the AGILE methodology is also an extension!

[C] Discuss Minimum viable Product

In AGILE, there is a concept called the 'Minimum Viable Product'. It has many different explanations, and understandings, but the one which I ascribe to, is this. The Minimum viable product is the version of the product which completed the bare essentials of a workflow, without bells, whistles, or trimming, that can be given to the customer to acquire feedback on the experience and on the efficacy, with the least effort possible. In shorter terms, it is the version that does the job, but not much else, and may not even be very pretty.

The Minimum Viable Product, hereafter MVP, is intended to prevent the Developers from entering the "It's not ready yet" cycle, where new features and trimming are continually added, without meaningful feedback from the customers. It is supposed to ensure that new software products, or even new features get the vital User input they need while still in their infancy, rather than waiting until vast labyrinths of architecture have grown up around the core product. Which if you think about it is a very pragmatic approach.

Think of it this way, group A constructs a grand town-car. It has nice soft seats, and good gas mileage. What more could a customer ask for? while group B, who got their base product out faster, found out that the customer didn't care much about gas efficiency, but rather needed a load bearing vehicle for mud and snow. Of course, Group B probably only delivered a chassis, steering wheel, and driver seat. But which of the groups do you think is in a better position?

Group A might have changed the material their chassis was made from to improve their gas mileage, resulting in a chassis that isn't strong enough to support the loads that the customer wants to carry. Neither group was able to meet all the customer's needs in their first draft, but Group A may have to undo many months of work in order to reach the same point as group B starts at. All group B might have to do is pick up the driver seat and steering wheel and move it to a stronger chassis. Overall a much better position.

Of course, you'll notice that Group A had a much higher potential of lost work, due to their choice of when to deliver. This is why I think YAGNI and MVP are really cut from the same cloth.

[D] Pivot : Wither Technology ( example of Nintendo Gameboy and the Atari Lnyx)

[E] Ask the questions: What is the purpose of software? Is it more important to be "Whiz-bang" or to be exceptionally functional on an older technology? Discuss mildly about VR]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>312</wp:post_id>
  <wp:post_date>2016-05-05 15:00:09</wp:post_date>
  <wp:post_date_gmt>2016-05-05 20:00:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[AGILE]]></category>
  <category domain="post_tag" nicename="agile-methodology"><![CDATA[Agile Methodology]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="minimum-viable-product"><![CDATA[Minimum viable product]]></category>
  <category domain="post_tag" nicename="mvp"><![CDATA[MVP]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="yagni"><![CDATA[YAGNI]]></category>
  <category domain="post_tag" nicename="you-aint-gonna-need-it"><![CDATA[you ain't gonna need it]]></category>
  <category domain="post_tag" nicename="you-arent-gonna-need-it"><![CDATA[you aren't gonna need it]]></category>
</item>
<item>
  <title>How to learn any skill in 20 hours</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/12/how-to-learn-any-skill-in-20-hours/</link>
  <pubDate>Thu, 12 May 2016 20:00:33 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=349</guid>
  <description/>
  <content:encoded><![CDATA[A few weeks ago, our Developer book club was discussing a chapter from <a href="http://www.amazon.com/12-Essential-Skills-Software-Architects/dp/0321717295">12 Essential Skills for Software Architects</a>, and during our discussion one of my colleagues mentioned a rather well known statistic called the '10,000 hour rule', hereafter the <i>10KHR</i>, which basically stipulates that to become an expert in any given field it takes about 10,000 hours of practice. Now I've heard this quoted several time, and always found it very discouraging. Many simply don't have the time to do this with anything but out jobs! After all , if you assume one works 50 weeks a year at 40 hours a week, that 10,000 hours would mean something like 5 years at your job! And for a hobby you might pursue in your free time, 15 years might just barely cut it...

However, I recalled a Ted Talk which I found to be very encouraging in this regard, and shared it with the group. The speaker explains his research into the subject of the <i>10KHR</i>, and his finding on how to learn a skill as fast as possible! My explanation of this man's talk would fail in comparison so I have embedded the video here for your enlightenment. Please watch it and then I can continue my discussion.
[youtube https://www.youtube.com/watch?v=5MgBikgcWnY]
To re-iterate some of his most important points, The <i>10KHR</i> generally applies to experts in a very competitive and high-intensity field. In my estimation, most fields are not this, but moreover, he mentions that the <i>10KHR</i> has suffered the telephone game effect, in that many consider that to be the goal for any level of skill. According to the speakers research the reality is that with just 20 hours of intelligent dedicated practice you can build up sufficient skill to be good enough to accomplish your goals.

To accomplish this intelligent and dedicated practice, the speaker sets out 4 steps, listed here. The Steps are:
<ul>
	<li>Deconstruct the Skill - Decide what you want to be able to do when you are done, and break it down based on this</li>
</ul>
<ul>
	<li>Learn enough to self-correct - Learn what it looks like when its right and when it is wrong. But not so much that never get to practicing.</li>
</ul>
<ul>
	<li>Remove barriers to practice - Distractions  like TV and internet etc. Or missing materials, like paint or getting a Drum kit.</li>
</ul>
<ul>
	<li>Practice for at least 20 hours - Beware the frustration barrier! Push through it and succeed! (see item 3)</li>
</ul>
Now personally, I have only been working on this for a limited time, so my example of this may be somewhat limited. I have decided that I want to be able to pick up painting. But not just any painting, I want to be able to paint like this:

<img src="https://ekostoriesdotcom.files.wordpress.com/2013/02/shan-shui-industrial-pollution1.jpg" />

It is a Japanese style of landscape painting called Shan Shui, which is mono-chromatic. For those who know better, please feel to correct any of my unintentional errors! However I have always admired these works and longed to be able to paint one myself. So following the speaks advise, here is what I have seen for each of the steps.
<ol>
	<li>Deconstruct the skill</li>
</ol>
Since the paintings are mono-chromatic, I will need to learn how to achieve the grays seen here. Since the style is water color, I will need to learn to mix enough pigment to get the darker colors, and whether I need to concern myself with the drying time. I will also need to learn how to handle the brush appropriately to create the rigid structures seen in the example, as well as some of the more free-flowing designs seen in other samples. Finally, since the picture would not be complete with out the Kanji letter, I will probably need to spend some time learning to write the Kanji, though this may not be necessary, and I will treat as optional for the time.
<ol start="2">
	<li>Learn enough to self-correct</li>
</ol>
This is the research stage, and obviously Youtube would be an ideal candidate for some hand-off learning. However to get the most out of watching painters in the style, or perhaps even Bob Ross for some transferable skill; the best way to use this instruction is to try to follow along, and to repeat the strokes seen by the demonstrator until the correct application of strength is found.

It might also be worth while to look into painting classes from the local Community college, or community center. Additionally, it could be useful to look for exhibitions in the local Museums as well.
<ol start="3">
	<li>Remove Barriers to Practice</li>
</ol>
Naturally the biggest barriers at the beginning are material. I will need paint, and brushes and canvases to practice on. The next biggest would be my personal mental barrier to wasted materials. This arises from my personal dislike of waste, which at present I realize I have the potential to consider the practice materials. I will have to work on this incrementally, and perhaps set aside some funds specifically to be spend on materials which will not end up being a successful painting.

Perhaps lastly, are the barriers to getting up and actually practicing. Since these are mental mostly, they can be mitigated by having my wife help me remember that I wanted to learn this skill. Perhaps by hanging one of the inspiring painting where I can see it frequently to help me remember what I am hoping to achieve, and perhaps lastly, by placing a small enjoyable reward that I could receive after completing some portion or all of the skills practice.
<ol start="4">
	<li>Practice at least 20 hours</li>
</ol>
With the knowledge I would get in step 2, and the materials from step 3, the only this needed is to spend the time to actually do it, with intent. You cannot simply walk to the batting cage and idly put in 100 swings and call it a day. I would need to set out during each practice session to practice a particular part of the skill, whether it be on my flowing lines or on blending my grays into blacks. Each session be it 1 hour or 3, would need a defined purpose ahead of time, and hopefully some measurable increment of success as well.

Overall, I am hopeful that perhaps someday I might learn the Shan Shui style. But I hope you have found some hope in the speakers message, and perhaps some tangible help in the form of my example. If you find yourself interested, please post your plan for practicing your new skill in the comments!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>349</wp:post_id>
  <wp:post_date>2016-05-12 15:00:33</wp:post_date>
  <wp:post_date_gmt>2016-05-12 20:00:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-learn-any-skill-in-20-hours</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22756175323]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Development Tool: Atom</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/19/development-tool-atom/</link>
  <pubDate>Thu, 19 May 2016 20:00:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=390</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-393 alignright" src="https://danieljscheufler.files.wordpress.com/2016/05/atom-icon.png" alt="atom-icon" width="255" height="255" />A few years ago, just before I left college, a friend introduced me to a funny little program called <a href="https://atom.io/">Atom</a>. It was billed as a 'Hackable' text editor. At the time I thought it was an interesting little toy, and tinkered with it for a while. But since I didn't find any real use for it at the time, I was satisfied with just tinkering. Over time, as classes became more demanding I kind of left it behind. That is until I found a convincing use-case for just such a program!

Recently, I have picked up Atom again for a personal project with some church buddies of mine. We are working with an Arduino and several external components. Since there are three developers and two or three operating systems between us, I wanted to get a product that we could all use with ease on any system. I settled on Atom after becoming frustrated with the existing <a href="https://www.arduino.cc/en/Main/Software">Arduino IDE</a>.

Since our project had three developers, we split the responsibilities into three primary areas, and had organized our project files accordingly. However, the Arduino IDE does not support a nested architecture, and instead needs all the files to be present at the highest level. Not wanting to lose the project organization, I started dabbling with Atom and found its support to be far superior to the Arduino IDE for this project.

Of course, nothing is perfect, and Atom does not ship with built in support for the Arduino. Thankfully there are a couple of packages which provide the necessary components for it. They are <a href="https://atom.io/packages/platomformio">Platformio</a>, and the <a href="https://atom.io/packages/language-arduino">language-arduino</a> packages. Now, Platformio did require that we adjust our project architecture so that the compiler could locate all our file, this is a very small change, and allowed us to continue more-or-less un-phased. Furthermore, the Platformio package also supports other boards than the Uno which our project was using.

So, after playing with Atom for a week or so, purely for my Arduino project, I became more familiar with the various features, and I was able to get more comfortable with the shortcuts among other things. After a while, I switched back to one of my python projects, and had a little shell shock. At present, I am using <a href="https://www.jetbrains.com/pycharm/">PyCharm</a>, which has severed me well, and has the added benefit that one of its default settings allows the Microsoft Visual Studio shortcuts to be used. It is quite polished, and provides solid support for most anything a developer could want to do in Python. But it's not very easy to customize, at least not compared to Atom.

O
n the flip side, Atom doesn't ship with support for running python scripts from the IDE. But it does include some language highlights. Here again, the Package system comes to save the day. With the <a href="https://atom.io/packages/script">Script</a> Package, Atom gains the ability to execute both Python and other interpretive languages, like <a href="http://julialang.org/">Julia</a> , and can display the feedback via an in-IDE terminal window! Furthermore, with Atom, the error highlighting is fairly descriptive, and will show the developer the breaks for the current document! So by switching between various files in your project you can see the pertinent errors in each file, without having to browse through an exhaustive list contained every file all together! Which, coming from a C++ project, is pretty great!

For a little icing on the cake, Atom also has a fair bit of Git integration. (I should hope so, considering it is Git's IDE). The projects nicely highlight new, and changed files from the current Git changeset, and the default settings are programmed to reduce the clutter in the project view, by leaving out the various .git files, like the .git-ignore. This is a pleasant feature, which I have enjoyed for my Arduino project.

Overall, Atom is a very impressive program. It can be as simple or as advanced as you need it, and can change with ease to suit your needs, through their robust Package manager! With their wide community support base, I look forward to enjoying Atom for many years to come. For anyone interested in learning more, please check out Atom <a href="https://atom.io/">here</a>!

*- Image borrowed from <a href="http://https//www.pubnub.com/wp-content/uploads/2015/01/B62xj9FCUAA3YoC.png">this
source</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>390</wp:post_id>
  <wp:post_date>2016-05-19 15:00:24</wp:post_date>
  <wp:post_date_gmt>2016-05-19 20:00:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>development-tool-atom</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="atom"><![CDATA[atom]]></category>
  <category domain="post_tag" nicename="atom-io"><![CDATA[atom.io]]></category>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
  <category domain="post_tag" nicename="git-support"><![CDATA[git support]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[github]]></category>
  <category domain="post_tag" nicename="ide"><![CDATA[IDE]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tool"><![CDATA[tool]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[22987533832]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>12</wp:comment_id>
    <wp:comment_author><![CDATA[Dev Tool: Atom &#8211; Revisited &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/10/25/dev-tool-atom-revisited/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.80.102</wp:comment_author_IP>
    <wp:comment_date>2016-10-25 21:34:39</wp:comment_date>
    <wp:comment_date_gmt>2016-10-26 02:34:39</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Atom doesn&#8217;t ship with support for everything, which is alright. But what makes Atom great, is that it is extensible! It has a rich marketplace of published extensions offering support from Python to C, and Json to Yaml. I discussed some of the packages that I used to support both python and Arduino in my previous post. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1477482657.4925310611724853515625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1477482657</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1477454136.06054592132568359375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1477449279.49755191802978515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>atom-icon</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/19/development-tool-atom/atom-icon/#main</link>
  <pubDate>Mon, 16 May 2016 21:47:17 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/05/atom-icon.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>393</wp:post_id>
  <wp:post_date>2016-05-16 16:47:17</wp:post_date>
  <wp:post_date_gmt>2016-05-16 21:47:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>atom-icon</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>390</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/05/atom-icon.png</wp:attachment_url>
</item>
<item>
  <title>Innovation Fridays - Learn C#</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/26/innovation-fridays-learn-c/</link>
  <pubDate>Thu, 26 May 2016 20:00:12 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=399</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-404 alignright" src="https://danieljscheufler.files.wordpress.com/2016/05/2p4i.png" alt="2p4i" width="256" height="256" />Internally, my company has experienced a push to get <em>'Innovation Fridays'</em> started up again. Every month developers are given a 4 hour period to pursue various projects or learning. For this block of time, the Automated Test Scripting team, ATS for short had been interested in learning how to write and use C#. Given my familiarity with the Team, and my knowledge of the language, they asked if I would be willing to lead a workshop on it. Naturally I couldn't refuse such a request from friends, and moreover, I knew this would be a chance to strengthen my core on C#. As everyone knows, to teach something is to learn it far better than when you first were taught.

I figured that my workshop plan, while good, had some chinks in its armor and that it might also make interesting reading. So for the purpose of getting some additional insight and for the freedom of information I decided to post a series on my plans and activities relating to the workshop. So if you think of anything, please feel free to make suggestions in the comments.

Now before I start, I want to express that I have a good deal of experience in running workshops on a variety of topics, including some rather technical ones. I somehow got into doing this when I was in high school, wherein I would help teach Tae Kwon Do to kindergartens, while working on my black-belt and after. Further, while in College I was blessed with an A in Calculus-based Physics, and so was asked by an enrichment program to lead a Physics workshop, which I did every semester for perhaps 3 years or so, until I graduated.

I very much enjoyed the work, and was blessed with some help paying for school by it. Among the most enjoyable was creating questions and problems for the students to work on, especially in Mechanical Physics. However I found that for the majority, the workshop was not totally ideal, since it must keep pace with the class. And sadly, many students could not keep up with the class in the first place. This is perhaps the single biggest obstacle that I am working to overcome with my present workshop plan.

Overall, I am planning to follow the recommendations made by Josh Kaufman in his 20 Hours TED talk, which I have mentioned <a href="https://mysource.ihs.com/blogs/JourneymanBlog/2016/04/14/how-to-learn-any-skill-in-20-hours">before</a>. Naturally I think the four steps are very well suited for learning C#, so my workshops will generally be focused on one or perhaps at most two of these steps at a time.With any luck, I will run these for the next 6 months or so, and have our learning concluded by that time. However for the first workshop which occurred last Friday, most of our time was spent on step 2, or Learning Enough to Self-Correct, and on deciding on project infrastructure. For this discussion I will talk more about the project infrastructure, and perhaps will elaborate more on the learning portion at a later time.

Now, getting back to the obstacle I mentioned earlier. Everyone on the ATS team is at different levels of skill, which means each will need a different levels of instruction and will be able to accomplish different amounts in the same time. So to support the needs of the high-performing team members, while maintaining the approach-ability for those who need more guidance, I elected to pursue Project based learning as the workshop model. On this topic, I put the team size and project type to a vote. It was decided that, for the most part, everyone would pursue their own project.

As a result we have 6 teams, for 7 people. As to the projects they are covering, those are somewhat less varied as there are 4 different projects at the moment. They are as follows:
<ol>
	<li>A Sudoku Game application</li>
	<li>A Music Player</li>
	<li>A Rich-Text-Format Text Editor</li>
	<li>An internal Installation tool for our Company's Software</li>
</ol>
Of course, you can see that each of these will have different technical challenges, but also each has some elements of similarity. For instance many of these will need File Access, and each will need some component of UI. As a result these projects cover a breadth of topics making them good candidates for learning C#, while still maintaining some common ground for group discussions. To make things easier on myself, I have had all the teams setup the following organization for their projects, so that we can work with others more easily.

Every Team project will have at least 4 separate Code Projects( the place where code is dropped in Visual Studios Solutions). These are the Infrastructure, the UI layer, and the test associated with both. By separating the Infrastructure from the UI, I am hoping to provide the necessary grounds for following better design principles. Of course with how small these projects will be, It may feel somewhat silly to have all this extra separation. But since the purpose of this workshop is not simply to write the Project and get it done, but is instead to learn how to write C# well, I think it is a fair trade-off.

If we are going to be working so that our project structures are similar, it would make sense to ensure we are all using the same tools. And sadly, since most of our participants are using personal laptops, they don't have easy access to the Company WiFi, or the source-control servers, which means we needed another place to store our code. This way the projects could be shared between teams when the time came. For this I have selected Github, as I am familiar with it due to personal side projects, and because it would be free to access for all involved. All I would have to do would be to add the ATS team as contributors to the selected Repo.

<img class="  wp-image-405 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/05/gitkraken-social-icon.jpg" alt="gitkraken-social-icon" width="256" height="256" />For those of you who are also familiar with Github, you should recognize that git is very Command Line heavy without a GUI. So to make the transition easier for the team, I had them all download <a href="https://www.gitkraken.com/">GitKraken</a>, which is my preferred GUI for Github. So far, this has seemed to make the process much easier. But I will know more when we next met about a month from now.

Lastly, no code project would be complete without an IDE. And for this we turned to Microsoft Visual Studios community edition. We have a mix of 2013 and 2015, since that is what the team members were able to find. I am hoping that this will not cause problems later on when the projects are viewed by other teams, but we shall cross that bridge when we come to it.

So during our first meeting, we covered all of the project set-up minutia, and some of the basic principles that I am hoping to pass on. I will share this in my next Innovation Friday post. These will likely include the various links that I used and other references that I find to be very useful! In the meantime, I would love to hear any suggestions or ideas you have! After all, I only had my experience and my gut to go on, and I am certain I might have overlooked some great opportunities!

* - The C# logo was created by <a href="http://devstickers.com/csharp">DevStickers</a>

* - The GitKraken Logo was borrowed from the GitKraken website.
<h6>//Edits//</h6>
<h6>11JUN2016 - Spell-checking and Minor Grammar/Readability refactor</h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>399</wp:post_id>
  <wp:post_date>2016-05-26 15:00:12</wp:post_date>
  <wp:post_date_gmt>2016-05-26 20:00:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>innovation-fridays-learn-c</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
  <category domain="post_tag" nicename="git"><![CDATA[git]]></category>
  <category domain="post_tag" nicename="github"><![CDATA[github]]></category>
  <category domain="post_tag" nicename="gitkracken"><![CDATA[gitkracken]]></category>
  <category domain="post_tag" nicename="innovation"><![CDATA[innovation]]></category>
  <category domain="category" nicename="innovation-fridays"><![CDATA[Innovation Fridays]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tool"><![CDATA[tool]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
  <category domain="post_tag" nicename="visual-studios"><![CDATA[Visual Studios]]></category>
  <category domain="post_tag" nicename="workshop"><![CDATA[workshop]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23218326918]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2p4i</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/26/innovation-fridays-learn-c/2p4i/#main</link>
  <pubDate>Mon, 16 May 2016 21:55:13 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/05/2p4i.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>404</wp:post_id>
  <wp:post_date>2016-05-16 16:55:13</wp:post_date>
  <wp:post_date_gmt>2016-05-16 21:55:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2p4i</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>399</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/05/2p4i.png</wp:attachment_url>
</item>
<item>
  <title>gitkraken-social-icon</title>
  <link>https://danieljscheufler.wordpress.com/2016/05/26/innovation-fridays-learn-c/gitkraken-social-icon/#main</link>
  <pubDate>Mon, 16 May 2016 21:56:20 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/05/gitkraken-social-icon.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>405</wp:post_id>
  <wp:post_date>2016-05-16 16:56:20</wp:post_date>
  <wp:post_date_gmt>2016-05-16 21:56:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>gitkraken-social-icon</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>399</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/05/gitkraken-social-icon.jpg</wp:attachment_url>
</item>
<item>
  <title>Learn C# - Principles I</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/02/learn-c-principles-i/</link>
  <pubDate>Thu, 02 Jun 2016 20:00:28 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=414</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-404 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/05/2p4i.png" alt="2p4i" width="256" height="256" />Last week, I began introducing the Learn C# Workshop that I was asked to lead by the ATS* Team for our Innovation Fridays. In this post, I had planned to share all of the principles which I espoused to the group during our first meeting. However upon drafting this post out, I realized that I have a tendency to be long-winded. So to avoid putting too much information into a single post, I am splitting the Principles into two parts. In this part, I will discuss why I am starting the workshop with principles rather than basic Object Oriented Programming examples.

Then I will move on to specific principles, most of which my employer also expresses appreciation of. My next post, will cover my intention to use some of the Gang of Four Design Patterns, and will also cover some expressions of good software development principles which I believe are more personal, and not necessarily held by my employer in general. I thank you for your patience, and will now get on with explaining myself. Let us start with why I am so focused on principles!

It is my strong belief that, when learning, it is wise to start with guiding principles. Naturally, the student will not understand the full application of these principles at the beginning, but by laying them out at the beginning, and then re-visiting them during the course of learning, the students will begin to understand the connections. As a result of this belief, I chose to start my C# workshop on good software development principles. I chiefly did this to help the group not "develop itself into a hole", but also to make it easier for them to understand the proper use of the language as they develop. My goal has always been that the participants would leave not with a "duct-tape solution" but with a more polished understanding and grasp, so that if and when they begin working on real C# projects they would be able to understand and manipulate the code with ease, rather than grinding their teeth in frustration while they try to "just get the system to work".

In this approach, my principles for development and for the course are the same. I choose to <span style="text-decoration:underline;">Start with the End in Mind</span>,hereafter SEM. To simply begin a journey quickly, is not so good. It is far better to move in the direction of your journey's end from the beginning rather than discovering later you have set out in the wrong way, and must retrace your steps. Even if your beginning is a little delayed, it is still wiser to move only once, rather than twice when an error was made.

I find that tied to this idea is the process of <a href="https://en.wikipedia.org/wiki/Test-driven_development">Test Driven Development</a>, hereafter TDD. Admittedly, everyone that I know, who has tried this method, attests to its difficulty. Even I have had trouble with it. However I know that it is also one of the best applications of SEM in software development.

TDD is the process whereby one first writes a failing Unit Test, and then the code to make it pass. And then cycles back to write another failing Unit Test. This is intended to be a rapid cycling. The preceived difficulty is usually due to most people's tendency to think of solving a problem from the top down. We often feel that instead of a fast loop that the loop is slow.

But what we lose in mental comfort, we gain in design. In TDD, one is forced to think about how one will test that their function worked from the beginning. This has many benefits, from avoiding unnecessary methods, and simplified designs, to encouraging the developer to separate responsibilities more finely and into more testable chunks. So even though TDD is difficult, I believe it is worth the trade-off. Further for beginners, TDD will force them to think about what effects they want a function to have, and how to verify that before they become lost in a tangled mess of code.

The next principle that I am choosing to espouse is <a href="https://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29">SOLID</a>. It also so happens that my company generally supports SOLID, though it has not been evenly applied to all our software. I have found that within SOLID that there are really three principles that most improve one's design if followed. These are the S,I and D components.

S stands for the Single Responsibility Principle, which succinctly put, means that one and only one potential change in the software's specifications should change a given class* [taken from Wikipedia]. This would means that a class' responsibility should be fairly specific. For example, a Controller ought not be changed when the UI color changes, or even the UI color scheme. Now as silly as this might sound, I have written software that did not adhere to this principle and it was very difficult to maintain, much less to work with. I have found that in general that where the Single Responsibility Principle is not followed, spaghetti code abounds.

The I stands for the Interface Segregation Principle, and again borrowing from Wikipedia's synopsis, it implies that "Many client-specific interfaces are better than one general purpose interface". This principle is heavily tied, in practice, to D, which stands for the Dependency Injection Principle, or DIP for short.

DIP suggests that one ought to inject the dependencies of a component into it, rather that providing the component the ability to create concrete instances of it. For an example, following DIP, a FileFormater, would be injected not only with the data to format for writing, but also with the Access to the File System, rather than just creating that access itself.

Practically speaking, applying these two principles allows for software to be resilient to changes outside its scope, and it improves its test-ability. If a class depends on Interfaces rather than concrete instances, it is easier to test, and if the was some responsibility is handled changes, but not the interface, then the class in question does not need to change!

In the instance of our FileFormatter example, if the File System Access is provided by an IFileSystem interface, the FileFormatter needn't care if the FileSystem writes a directly to a binary dump file, or a .txt with ASCII formatting, or if it translated every input character, in format, into Mandarin Chinese. Just as long as the Interface is implemented, providing the necessary functionality, the FileFormatter could be left alone, while the FileSystem Layer can change without concern for the FileFormatter, and vice versa.

Now to tie these principles to back to TDD, there are several ways to provide Mock implementations of Interfaces. As a result, depending on Interfaces allows use to test at a much deeper level. And for objects that might be more difficult to wield, either for being very large, or difficult to instantiate, or because it touches the system environment, like our FileSystem example. By separating our functionality, we can test components independent of their implementation.

Naturally this reduction of real components, means that our tests are less susceptible to the oddities of a particular class. Further, only the tests on a given class change with that class. If we do not rely on Interfaces, then when a given class changes, the tests for itself, and any class that depend on it might also need to be updated. I believe that developers generally refer to this as tight coupling, which highly undesirable.

So, I hope that this post has helped to explain my rational on Principles as a starting point, as well as some of the more common Principles which I hold to be true. Overall I feel this covers a bit more that half of truly good software development. Next week, it is my plan to cover the remainder, including some principles which more uniquely my own. So what do you think of this post length? Do you feel I went into enough depth, or perhaps that I should have posted the whole set? Please let me know in the comments! Thank you for your time, and until next we meet, be blessed!

*ATS = Automated Test Scripting

* Paraphrased from Wikipedia, which phrased it very well.

* - The C# logo was created by <a href="http://devstickers.com/csharp">DevStickers</a>
<h6>//Edits//</h6>
<h6>11JUN2016 - Spell-checking and Minor Grammar, Readability Refactor</h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>414</wp:post_id>
  <wp:post_date>2016-06-02 15:00:28</wp:post_date>
  <wp:post_date_gmt>2016-06-02 20:00:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learn-c-principles-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
  <category domain="category" nicename="innovation-fridays"><![CDATA[Innovation Fridays]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="solid"><![CDATA[SOLID]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="test-driven-development"><![CDATA[test-driven development]]></category>
  <category domain="post_tag" nicename="workshop"><![CDATA[workshop]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23458990385]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Learn C# - Principles II</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/09/learn-c-principles-ii/</link>
  <pubDate>Thu, 09 Jun 2016 20:00:25 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=420</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-404 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/05/2p4i.png" alt="2p4i" width="256" height="256" />Last week, I posted the first part of my Learn C# principles discussion. There I covered those principles which I believe would be less subjective and more widely held. This week, I am delving into some more personal principles which I find have improved my code greatly. However, to begin our discussion this week, I will speak on a concept that I believe many will again agree on.

One thing that almost every new programmer should know is that many problems that they will encounter have already been solved. Of course , as with any system with multiple solutions, some are better than others. The best of these have been codified into a series of <a href="http://http//c2.com/cgi/wiki?DesignPatternsBook">Design Patterns</a> produced by the "<a href="http://http//c2.com/cgi/wiki?GangOfFour">Gang of Four</a>". To be completely honest, I wished that I had found out about these far earlier than I did as they would have saved me a lot of frustration in creating some of these patterns for myself. But patterns like the Adapter, or the Facade I find myself using quite frequently. But more importantly they changed how I look at the problems that I am trying to solve. I spend more time thinking of the responsibilities, than of the methods. As a result I have gotten better about following the Single Responsibility Principle, mentioned last week.

In general, I believe that most developers would agree that these patterns are helpful, though some are more esoteric than others. Now seeing as I am instructing the C# course, I thought it would be best to reveal any potential hidden biases I have so that the students at least have a hope of separating what I personally believe to be good, from what is generally held to be good. This is most likely an over-abundance of caution but I truly wish to do right by those who have sought my instruction on the subject.

The first place where I recognized that I might be slightly biases was in my experience with Python. Python is a wonderful language to pick-up and a very powerful, albeit not particularly performant. But while I was learning to speak Python, I came across a peculiar text which espoused some principles for software development that I hold to this day. The text is called the <a href="https://www.python.org/doc/humor/#the-zen-of-python">Zen of Python</a>, and goes like this:
<pre style="text-align:center;">Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than right now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
-Tim Peters</pre>
Admittedly this may require some additional explanation. I have found that it is easiest to look at in terms of paired ideas. For example, take lines 2 through 7, which cover such pairs as Explicit/Implicit, Simple/Complex, and Sparse/Dense. All of these are talking about how our code ought to read. Referring back to the text, it is better to Explicitly state what a function does, than to execute implicitly. This is idea of explicit effects is not merely held for python but can also be heard as have no "side-effects". That is one possible interpretation of this line. But what makes the line so powerful is that it embodies the principle rather than the specific case. Another instance where the principle applied is repeated within the text itself: <i>"Errors should never pass silently. Unless explicitly silenced."</i>

So, as I have attempted to express there are a couple of larger principles explained nicely here with more specific guidelines towards their implementation. The easiest to see is that a developer ought to be expressive in their code, this theme runs throughout the poem. The second theme is that a developer ought to be pragmatic, which is somewhat shown in Practicality beats Purity, and in "Never is often better than right now." It is another way of showing YAGNI, or <i>"you aren't gonna need it". </i>These two are often held in a delicate tension, on one hand there is the pragmatic solution: Sparse is better than dense; but this is contrasted immediately with the Expressive side, Readability Counts.

Python has been gifted with some humorous supporters throughout the years, including Time Peters, who wrote the Zen. I have found the kernels of truth laid underneath the clever words in several instances of quips about Python. I would heartily encourage every developer to read through them and make their own judgement. But if I can I would draw attention one other Python quip, which I find very humorous and also truthful.

This quip is called "<a href="https://www.python.org/doc/humor/#python-vs-perl-according-to-yoda">Python vs. Perl according to Yoda</a>" and it goes something like this:
<pre>Subject: Python versus Perl: A humorous look

From: larry (funkster@midwinter.com)

Date: 10 Jul 1999 01:45:07 -0700

This has been percolating in the back of my mind for a while.

It's a scene from _The Empire Strikes Back_ reinterpreted to serve

a valuable moral lesson for aspiring programmers.

--

EXTERIOR: DAGOBAH -- DAY

  With Yoda strapped to his back, Luke climbs up one of

  the many thick vines that grow in the swamp until he

  reaches the Dagobah statistics lab. Panting heavily, he

  continues his exercises -- grepping, installing new

  packages, logging in as root, and writing replacements for

  two-year-old shell scripts in Python.

YODA: Code! Yes. A programmer's strength flows from code

  maintainability. But beware of Perl. Terse syntax... more

  than one way to do it... default variables. The dark side

  of code maintainability are they. Easily they flow, quick

  to join you when code you write. If once you start down the

  dark path, forever will it dominate your destiny, consume

  you it will.

LUKE: Is Perl better than Python?

YODA: No... no... no. Quicker, easier, more seductive.

LUKE: But how will I know why Python is better than Perl?

YODA: You will know. When your code you try to read six months

  from now.</pre>
To get to the meat of it, Perl, which came before Python, encouraged some bad programming habits, like default variables and others which made it difficult to understand the code. Referring back to the Zen, it was not very expressive, since the syntax is terse.Additionally the "true path" of execution is difficult to determine since one cannot know how code will execute without some significant additional context, like the default variable values. And sadly, as Yoda describes, if a programmer falls into these traps in the early stage of a project, it becomes much more difficult to come back, if not completely impossible.

To cap all this, the script offers a humorous test to determine whether or not you are following good patterns. <span style="text-decoration:underline;">If you can read your code in six months and know what you were trying to do, then perhaps you have done well</span>. This sits along a similar vein with the Zen's "If the implementation is easy to explain...". And I find it gratifying to find the self-consistency of the Python supporters in this. I am happy for both examples in order to see the many facets of the delicate balance between expressive and pragmatic code.

This concludes the principles which I attempt to adhere to in my coding, and the ones which I will be utilizing in the workshop.As I had said before, I am trying to teach the principles first to help the future coding and learning to become easier. Looking back, I realize that some of this desire to teach principles first comes from some bad experiences that I had during my early college development days. As Yoda says, "If once you start down the dark path, forever will it dominate your destiny..." . I am hoping to same the participants this agony, and frustration.

This basically covers the ideals that I hold for my software development and my general understanding of them. As always I thank you for your time, and hope that you learned something! Let me know in the comments!

* - The C# logo was created by <a href="http://devstickers.com/csharp">DevStickers</a>
<h6>//Edits//</h6>
<h6>11JUN2016 - SpellChecking and Minor Grammar/Readability Refactor</h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>420</wp:post_id>
  <wp:post_date>2016-06-09 15:00:25</wp:post_date>
  <wp:post_date_gmt>2016-06-09 20:00:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>learn-c-principles-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
  <category domain="category" nicename="innovation-fridays"><![CDATA[Innovation Fridays]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tim-peters"><![CDATA[tim peters]]></category>
  <category domain="post_tag" nicename="workshop"><![CDATA[workshop]]></category>
  <category domain="post_tag" nicename="zen"><![CDATA[zen]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23679684318]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Defensive Programming</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/16/defensive-programming/</link>
  <pubDate>Thu, 16 Jun 2016 20:00:59 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=434</guid>
  <description/>
  <content:encoded><![CDATA[<em>- Before I begin, I would like to request your help in improving my post quality. I ran this post through a readability tool, and would appreciate your feedback! Thanks!Before I begin, I would like to request your help in improving my post quality. I ran this post through a readability tool, and would appreciate your feedback! Thanks! -</em>

<img class="alignnone size-full wp-image-441" src="https://danieljscheufler.files.wordpress.com/2016/06/arstechnica-20140307-rough01.jpg" alt="arstechnica-20140307-rough01" width="640" height="360" />

On a recent work project, I experienced an unpleasant revelation. My colleagues and I had not made the same assumptions. I assumed certain conditions for the data that I was to receive which my colleagues did not make. As a result, my code threw many exceptions. After this frustration, I resolved to practice a more defensive stance in my programming.

As you can guess from the title, I will discuss Defensive Programming in this post. For this context, Defensive Programming is the practice of ensuring your data meets your expectations. It also involves structuring your code so that it is not misused.

I could have avoided much of my frustration if I have practiced Defensive Programming from the start.  Yet, I did not discover the need for Defensive programming until about half-way through the project. This lead me to think about the need for Defensive programming. Here it arose from a difference in assumptions. In other cases, I can contemplate the need arising from improper usage. Both of these in the end are the result of a communication problem.

If our assumptions are not communicated effectively, we cannot rely on them. This is, at its heart, communication within a team. While I assumed  that communication within a team would be effective and clear, it is not so. Despite having many meetings on this topic, each of us had misconceptions about our work.

If this is the case for coworkers, it is foolishness to think another developer might do better. Here the communication is even weaker. The only way to communicate  would be through documentation or the API design. Then it would come down to just hoping the user understood enough to use your code properly.

Seeing all this, I want to list some of the specific examples of fixes that I needed. For example, I assumed that certain data would be in a specific order when I received it. Instead, I needed to instead force the desired ordering.

The data ordering problem is more generic that just a list of points. It can also apply to other parameters, or the order of usage. One ought to encapsulate such ordering to ensure the user can only use your code in the prescribed order.

As another example, my software required of a certain number of data points to function. Without defensive programming, my code would attempt to run without being able to complete. I fixed this by checking the number of points before I ever attempted my operations.

Ensuring completion is an excellent time-saver. I realize now, that it is also a form of Pragmatic coding. While it may take more lines of code, the code itself is pragmatic with system resources. And if you present the errors well, the user can gain useful insight into your code.

As a final note, I find that keeping my code expressive is also helpful in this case. With expressive code it is clearer what it needs, and what is will do. This way, if circumstances are beyond my control, I can still hope the user will understand.

Now, after all that frustration, I plan to continue my defensive stance whenever possible. I aim to keep my future projects from becoming stuck due to communication breakdowns. I hope my examples and reflections are helpful. If you have any comments, or perhaps a story of your own, please share it in the comments!

* Image from ArsTechnica Article, also on <a href="http://arstechnica.com/information-technology/2014/03/why-follow-defensive-programming-best-practice-when-code-will-never-be-public/">defensive programming</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>434</wp:post_id>
  <wp:post_date>2016-06-16 15:00:59</wp:post_date>
  <wp:post_date_gmt>2016-06-16 20:00:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>defensive-programming</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[23908843602]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>arstechnica-20140307-rough01</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/16/defensive-programming/arstechnica-20140307-rough01/#main</link>
  <pubDate>Sat, 04 Jun 2016 20:13:54 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/06/arstechnica-20140307-rough01.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>441</wp:post_id>
  <wp:post_date>2016-06-04 15:13:54</wp:post_date>
  <wp:post_date_gmt>2016-06-04 20:13:54</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>arstechnica-20140307-rough01</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>434</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/06/arstechnica-20140307-rough01.jpg</wp:attachment_url>
</item>
<item>
  <title>photo</title>
  <link>https://danieljscheufler.wordpress.com/about/photo/#main</link>
  <pubDate>Sat, 18 Jun 2016 19:25:10 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/03/photo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>451</wp:post_id>
  <wp:post_date>2016-06-18 14:25:10</wp:post_date>
  <wp:post_date_gmt>2016-06-18 19:25:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>photo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/03/photo.jpg</wp:attachment_url>
</item>
<item>
  <title>Defensive Programming Revisited</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/23/defensive-programming-revisited/</link>
  <pubDate>Thu, 23 Jun 2016 20:00:08 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=453</guid>
  <description/>
  <content:encoded><![CDATA[<b><img class="  wp-image-455 alignright" src="https://danieljscheufler.files.wordpress.com/2016/06/2a2e745500000578-3147721-image-a-26_1435866577601.jpg" alt="2a2e745500000578-3147721-image-a-26_1435866577601" width="361" height="256" /></b>

<b>A few weeks ago, I wrote a post on Defensive Programming. In it I recalled a recent work project that had benefited from the practice. Today, I want to bring in additional insights that I have since found. I believe they will help broaden the conversation.</b>

<b>I found an article recently listed on my feed from LinkedIn. You can read the article </b><a href="https://blog.cloudpassage.com/2016/03/02/build-your-network-like-a-submarine-rsa-2016/"><b>here</b></a><b>. The article discussed system design, and focused on defense against hacking. In summary, the recommendation was to build our systems like we do a submarine. A submarine contains water-tight compartments sealed from one another by bulkheads. This way is any part of the submarine is breached, one can seal the affected parts.  I did some light research on Wikipedia to verify my understanding. It is truly impressive the amount of engineering that goes into these machines. Perhaps the most striking feature is the physical embodiment of the </b><b><i>"Ruthless Calculus of War"</i></b><b>. Specifically looking at the Pressure Hull section of the Wikipedia article, it is clear that these devices are built to take a hit. You can find the wikipedia article </b><a href="https://en.wikipedia.org/wiki/Submarine#Hull"><b>here</b></a><b>.</b>

<b>While the author discussed defending network systems against attack, I thought about my employer's legacy code project. We have many components separated into many libraries. And the interfaces in the software are often convoluted at best. Moreover, I have seen little protections or compartmentalization where it might be prudent. For an example, I will use the same project which initiated my first discussion. A new feature would crash without explanation in certain conditions. While most of us thought about why the crash was happening, One of our front end developers was smart enough to put the call to our interop into a try-catch block. With this in place, any exception thrown from the algorithm was caught. This way the exception details are shown to the user. Instead of hypothesizing about the problem we could simply know.</b>

<b>But, the more important effect was the clean separation between the front and back ends. This neat compartmentalization means that failure in the algorithm don't result in a crash. In the same way that a breach doesn't sink the sub. While reviewing this article I realized that we need to change our thinking for this practice to work. We need to think less about protecting ourselves from every possible failure. We need to think more about how to survive that failure. Perhaps it seems fatalistic to try to just survive the inevitable failure. But the truth of the matter is we cannot and will not anticipate every condition. As a result it may be wiser to invest our effort in equal parts between anticipation and containment.</b>

<b>Looking back, I realized that containment should not be applied just to Interop components. A wise developer would see that we ought to apply compartmentalization to any file system access as well. In fact, I recently fixed a Customer Defect in my employer's main C# application related to a corrupts of their settings file. The solution was of course to protect the application for corrupt files, without crashing. While talking about this to one of the lead Devs on the project, we realized that service calls should be protected similarly. For example, when the C# project calls into the legacy code, we ought to protect the C# project against the legacy code failures, and vice versa when the legacy code calls into the C# project. </b>

<b>The more I mull this idea over, the more I realize about it. As in the first example, it was a wise use of our Development time. And it improved our debugging efficiency! Furthermore, this construction follows the testing pattern of: </b><b><i>Fail Loud, Fail Fast, and Fail Safely!</i></b><b>, which I generally try to adhere to. The 'Fail Safely' part is often forgotten though, as the other examples have shown. In some cases is it also difficult to implement. But with the revelations of the article and my recent examples, I hope to be more consistent in my use of this principle. With any luck,it has become a little clearer.</b>

<b>So, looking again at the many parts of our legacy code, I wonder if it would be wise or viable to add the try-catch bulkheads. These simple steps would save our users from the dark and murky depths of unknown failures. What do you think? Please share your thoughts in the comments below!</b>

<b>* Image borrowed from </b><a href="http://www.dailymail.co.uk/sciencetech/article-3147721/Saab-unveils-superstealth-ghost-submarine-says-virtually-invisible-enemies-allows-divers-silently-enter-exit.html"><b>DailyMail.com</b></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>453</wp:post_id>
  <wp:post_date>2016-06-23 15:00:08</wp:post_date>
  <wp:post_date_gmt>2016-06-23 20:00:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>defensive-programming-revisited</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[24129184483]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>2a2e745500000578-3147721-image-a-26_1435866577601</title>
  <link>https://danieljscheufler.wordpress.com/2016/06/23/defensive-programming-revisited/2a2e745500000578-3147721-image-a-26_1435866577601/#main</link>
  <pubDate>Sat, 18 Jun 2016 19:32:02 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/06/2a2e745500000578-3147721-image-a-26_1435866577601.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>455</wp:post_id>
  <wp:post_date>2016-06-18 14:32:02</wp:post_date>
  <wp:post_date_gmt>2016-06-18 19:32:02</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>2a2e745500000578-3147721-image-a-26_1435866577601</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>453</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/06/2a2e745500000578-3147721-image-a-26_1435866577601.jpg</wp:attachment_url>
</item>
<item>
  <title>An Update</title>
  <link>https://danieljscheufler.wordpress.com/2016/08/02/an-update/</link>
  <pubDate>Tue, 02 Aug 2016 20:00:37 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=469</guid>
  <description/>
  <content:encoded><![CDATA[<h1 style="text-align:center;"><strong>Good day, Internet! </strong></h1>
If I may direct your attention to the date of this post and that of the previous one. You will note, that there was an extended absence of posts. Needless to say, a <strong>lot</strong> has happened in my life since then.

Firstly, I have changed jobs. I completed the interviews perhaps mid-way through June. Then I completed my final two weeks, and started in early July with my new company. less than a week after starting, my son was born!

I then proceeded to take the remainder of the week to be with my family. And any parents among you will know immediately what that means. To cut to the chase, it has been like trying to ride the whirlwind since then. He is super cute... when he is not exercising his substantial lungs.

Naturally, there has been very little time to collect my thoughts and record them here. That is not to say that thoughts worth sharing have not been had. I intend to record as many as possible in the near future. In the mean time, until I can get a more normal cadence, I am planning a slightly different format.

In the next couple of weeks, I plan to be posting a digest of interesting articles and resources that I happen upon during my work. I will include some basic summaries and perhaps offer my thoughts on the implications. These will likely be posted at half my usual rate, so once every two weeks.

And that should about close it up for this update. Thank you for your patience and of course for your viewership. I hope that the content will provide both interest and value for your time.

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>469</wp:post_id>
  <wp:post_date>2016-08-02 15:00:37</wp:post_date>
  <wp:post_date_gmt>2016-08-02 20:00:37</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>an-update</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[25417744412]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Journeyman's Digest</title>
  <link>https://danieljscheufler.wordpress.com/2016/08/09/journeymans-digest/</link>
  <pubDate>Tue, 09 Aug 2016 20:00:26 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=483</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 00</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<a href="https://news.ycombinator.com/" target="_blank">Hacker News</a> - Hacker News is a service similar to Reddit. As I understand it, there is a community which submits links to various recent news, and then by a voting system the best finds rise to the top 30 entries on the list. Through this community, I have found many great articles, including many which I am including here. I strongly encourage you to check it out!
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<b><a href="http://sivers.org/2c" target="_blank">Some advise for new managers</a></b><b> - </b>This is a short management snippet for new managers. It regards how to advise and discuss the contribution of your employees. I could summarize it in one line, but I think the effect is best if read in full.

<strong><a href="http://redmonk.com/sogrady/2016/07/20/language-rankings-6-16/" target="_blank">Ranks of popular programming languages as of June</a></strong> - In June, the kind posters over at RedMonk took the time to analyze the contributes and discussions in GitHub and on Stack Overflow to determine how various popular languages are doing in terms of use. The big five this time include Javascript, Python and C#. Be sure to check the list out for more details on their methods and to find where your favorite language ranks!

<strong><a href="http://thedailywtf.com/articles/the-inner-json-effect" target="_blank">A JSON coding horror story</a> </strong>- A young developer gets hired on to a new company. His experience starts as any new job does, learning the new systems and trying to understand the code. But as our hero learns more, a growing horror begins to loom. Will he escape it's clutches? Or will the code claim another victim? Look here to find out!

<strong><a href="https://news.ycombinator.com/item?id=12179756">A Discussion of TDD</a> - </strong>This is a forum thread discussion of TDD, started by a frustrated programmer trying to convince his company to adopt a better practice. The original poster asks for specific reasons and explanations for why his company should do TDD. There are the normal responses about making the software more stable, and more robust. One response in particular stood out to me, as it described instead how to explain these values to a Manager, in terms of time saved and money saved/spent. It is overall an insightful discussion for anyone in a similar situation.

<strong><a href="http://arstechnica.com/security/2016/07/dark-patterns-are-designed-to-trick-you-and-theyre-all-over-the-web/">The dark-side of UI</a></strong><a href="http://arstechnica.com/security/2016/07/dark-patterns-are-designed-to-trick-you-and-theyre-all-over-the-web/"> patterns</a> - This is an hour-or-so talk about the dark UI patterns that can be seen all over the web. They do make money, but they are predatory, generally immoral, and in some cases possibly illegal. The speaker describes many of the type of patterns which are employed. But he goes a step further and offers an explanation for why the patterns arise in the first place. As always it comes down to money. He then concludes with ways that the industry could help to dissuade and possible eliminate the use of these dark patterns.
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<strong><a href="https://eng.uber.com/mysql-migration/" target="_blank">Uber migrates to MySQL</a></strong> - This weeks curiosity regards Uber's move from Postgres to MySQL. I wasn't able to dedicate as much time to looking into this article as I would have liked, but the first third or so was full of interesting technical discussion. I hope you will enjoy it too!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>483</wp:post_id>
  <wp:post_date>2016-08-09 15:00:26</wp:post_date>
  <wp:post_date_gmt>2016-08-09 20:00:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[25629106473]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>life-863148_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2016/08/09/journeymans-digest/life-863148_960_720/#main</link>
  <pubDate>Sun, 07 Aug 2016 13:54:05 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/08/life-863148_960_720.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>524</wp:post_id>
  <wp:post_date>2016-08-07 08:54:05</wp:post_date>
  <wp:post_date_gmt>2016-08-07 13:54:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>life-863148_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>483</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/08/life-863148_960_720.jpg</wp:attachment_url>
</item>
<item>
  <title>Journeyman's Digest 01</title>
  <link>https://danieljscheufler.wordpress.com/2016/08/23/journeymans-digest-01/</link>
  <pubDate>Tue, 23 Aug 2016 20:00:47 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=538</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 01</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<a href="https://medium.com/@invoker/how-to-use-the-steak-clause-to-win-your-next-negotiation-55b4dafbea94#.s9n9gviz0" target="_blank"><strong>The Steak-dinner clause</strong></a> - Imagine you are in a tense business negotiation. You've been at this all-day and no one is willing to budge on who has to pay a fee. As you close for the day, you realize that if you don't resolve this issue tomorrow, there won't be any agreement. This was the author's situation when he happened upon a brilliant way to handle the disagreement. Moreover, their resolution not only helps get the contract through, it also brings the two companies together over time, creating a very strong business relationship!
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<strong><a href="https://medium.com/@nmalcolm/hacking-imgur-for-fun-and-profit-3b2ec30c9463#.6wcc2245n" target="_blank">The Tales of a White-Hat</a></strong> - A White-hat finds a massive security hole in the popular image sharing service, <a href="http://imgur.com/" target="_blank">Imgur</a>. This is his story about how Imgur's bug bounty program worked, and his journey with them to make the service and the compensation for finding such bugs better. Bonus Link: <a href="https://hackerone.com/" target="_blank">HackerOne</a> , the Bug bounty board mentioned by the author.

<a href="http://www.benstopford.com/2015/02/14/log-structured-merge-trees/" target="_blank"><strong>Log Structured Merge Trees</strong></a> - This article describes the basic working of a Log Structured Merge Tree, which is a happy middle ground between Journal/Log and Fixed Index ( like Hash Table) data storage. It is intended to provide good write and read speed, by balancing the concerns and attempting to improve the linearity of the Read operation.

<a href="http://ithare.com/knowledge-sharing-architects-as-an-alternative-to-coding-architects/" target="_blank"><strong>Knowledge-sharing Architect</strong></a> - What is the Architect's job? Should they be responsible for implementing the core framework, only to be pulled into another project in the starting stages? Or should they be mentors, mental-giants who slowly educate their team on the intricacies of the current application, so that nothing in the big-picture gets ignored? This article discusses the common arguments regarding the Architect's role, and proposes an alternative which I believe solved the existing problems in a more feasible and sustainable way.

<strong><a href="https://distrowatch.com/weekly.php?issue=20160801#ubuntuphone" target="_blank">Ubuntu has gone mobile</a> - </strong>Ubuntu has apparently released a new phone! It's price is comparable to the average smartphone, but it comes with some interesting features. This review goes over the various software changes, and capabilities. Personally, if and when the UbuntuPhone comes to the US I may consider purchasing one.

<a href="http://arstechnica.com/gaming/2016/07/scythe-the-most-hyped-board-game-of-2016-delivers/" target="_blank"><strong>Scythe - Most-Hyped board game of 2016?</strong></a> - ArsTechnica loves it's boardgames! And they have been drooling over a new game called Scythe for most of the year. It was recently release, and their review is glowing. I think the game sounds excellent and totally worth the rather high-price tag. Check it out and see what you think!

&nbsp;
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<a href="http://beginners.re/RE4B-EN.pdf" target="_blank"><strong>Free Reverse Engineering Textbook</strong></a> -The kind Mr. <a href="http://yurichev.com/" target="_blank">Yurichev</a> has compiled his notes and his method for reverse engineering software. I was only able to read a small fraction of his material, but a college course based on his work would be thoroughly interesting! Please feel free to poke around his free textbook!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>538</wp:post_id>
  <wp:post_date>2016-08-23 15:00:47</wp:post_date>
  <wp:post_date_gmt>2016-08-23 20:00:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest-01</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26090364764]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Journeyman's Digest 02</title>
  <link>https://danieljscheufler.wordpress.com/2016/09/06/journeymans-digest-02/</link>
  <pubDate>Tue, 06 Sep 2016 20:00:45 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=580</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 02</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<strong><a href="http://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf" target="_blank">Valve Employee's Handbook</a></strong> - Any geek into computer games knows Valve. Their the company responsible for a number of amazing titles, as well as the game delivery platform, <a href="http://store.steampowered.com/" target="_blank">Steam</a>. Naturally one might look to them for guidance on good company culture. I read some bits of their handbook, and I must admit, I was both impressed and afraid. Their corporate culture is based on mutual trust and specifically in trusting people to do the right thing. Right out of the gate the author starts explaining that Vale's structure is much flatter than expected, and as a result the employees has a significant amount of freedom and control of where the company goes. I invite those interested in development, management, self-organizing teams and any related disciplines to take a read!
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<strong><a href="https://medium.com/unboxd/how-i-built-an-app-with-500-000-users-in-5-days-on-a-100-server-77deeb238e83#.2rbavvm5v" target="_blank">How to build a 500000 user app on a 100 dollar server in 5 days</a> - </strong>The author built an app which partnered with and used PokemonGo data, and ramp-ed up to half a million users in around a week. He discusses the design decisions and rationale that he used. He also describes a counter-example of a similar app in a similar time-frame which did not fair as well. He frames his discussion around the idea of an MVP built to fail, and how this is a flawed practice for young entrepreneurs.

<strong><a href="https://medium.com/@cscalfani/why-experts-make-bad-teachers-ccaed2df029b#.547vefn5f" target="_blank">Why experts tend to make bad teachers</a> - </strong>Before I continue, I wish to express that I have experienced both ends of this spectrum with great and terrible teachers. Naturally I was pleased to find the author is not arguing against expert teachers. Instead he describes the way an expert, who is not trained as an educator, will tend to teach. Normally, they will focus on the abstractions which they, being experts, have learned over the course of many years. They do this in an effort to make the student's learning easier. However this tactic tends to back-fire since the abstractions are more difficult to learn when told, rather than experienced. The author concludes his discussion with some suggestions for how an ideal Expert-lead class might look.

<strong><a href="http://aaronrandall.com/blog/cracking-the-adventure-time-cipher/" target="_blank">Cracking the Adventure Time Cipher</a></strong> - The artists for adventure time put out a series of comic on the web with a strange cipher printed around the panes. Naturally this spurred interest in the community, and the race was one. This discussion focuses on the logic to code breaking, and the rationale used at each step, along with some code examples. Overall it makes for an interesting read!

<strong><a href="http://chessboardifygame.xyz/" target="_blank">An Enjoyable Online Logic Puzzle</a></strong> - This little flash puzzle is deceptively simple. I tinkered with it for a few minutes and was intrigued. Naturally I passed a few levels, but eventually stumbled on some solutions. The few levels can be solve by a number of moves equal to their positions (1 for level 1, 2 for level 2 and so on.) I encourage anyone with some spare time to try it out.

<strong><a href="http://arstechnica.com/information-technology/2016/08/mint-18-review-just-works-linux-doesnt-get-any-better-than-this/" target="_blank">Linux Mint has released version 18</a></strong> - Linux Mint has reached version 18! For anyone unfamiliar with Mint, it is a Linux distrobution based on Ubuntu. But unlike ubuntu Mint is a slower moving, and thus more stable OS. I personally use it for most computer tasks at home, and I feel that it is an easy jump from Windows. I strongly recommend it to anyone wishing to dodge the "Big Brother", Windows 10.

&nbsp;
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<strong><a href="http://mainichi.jp/english/articles/20160805/p2a/00m/0na/013000c" target="_blank">The Glider from Nausicaa actually flies!</a></strong> - Any Hayao Miazaki will immediately recognize this design. Being a fan of his works, I was quite pleased to see it fly so well. Kudos to the engineers behind it! Any for anyone who is curious, my favorite Studio Ghibli film is <a href="http://www.imdb.com/title/tt2013293/" target="_blank">The Wind Rises</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>580</wp:post_id>
  <wp:post_date>2016-09-06 15:00:45</wp:post_date>
  <wp:post_date_gmt>2016-09-06 20:00:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest-02</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26560412574]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Pretty Good Privacy</title>
  <link>https://danieljscheufler.wordpress.com/2016/09/13/pretty-good-privacy/</link>
  <pubDate>Tue, 13 Sep 2016 20:00:32 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=614</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-653 alignright" src="https://danieljscheufler.files.wordpress.com/2016/08/computer-1294045_960_720.png" alt="computer-1294045_960_720" width="256" height="256" />

Shortly after starting with my new company, I began work on a back-end infrastructure project. To be specific, I am working on an inter-process-communication (hereafter IPC) layer. As the project developed, we realized the need to protect our data in transit. This is because we are working with Protect Health Information (hereafter PHI). It would be a disaster if the data became compromised.

So to combat this, we are encrypting the data before it is send through the IPC layer. There are many fine encryption schemes available, but many are difficult to implement. Moreover, it is not enough to just encrypt the data. One cannot continue to use the same key for all applications without risk. Enough messages using the same key, and enough time mean someone could learn it. They would then be free to read all our messages and the possible PHI contained within.

Our brilliant architect suggested that we use <a href="https://en.wikipedia.org/wiki/Pretty_Good_Privacy" target="_blank">Pretty Good Privacy</a> or PGP for short. It is an easy to implement encryption scheme that combines many desirable features. PGP uses a new random key for each message to encrypt the outbound data. This key is itself encrypted by a known private key, and is sent along with the encrypted message.

Since the key is random every time, it is difficult to guess the private key. As a result, one cannot decrypt the public key, thus the message is reasonably safe.

To help explain this, I have crafted a simple example in python code, using a <a href="https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher" target="_blank">Vigenere Cipher</a>. You can find the entire example project on my GitHub Repo, <a href="https://github.com/djscheuf/ProgamingPractice/blob/Playground/Playground/Cryptography/PGP/example.py" target="_blank">here</a>. But the core of the example is as follows:
<pre>def encodePGP(self,plainMsg): 
# generate random key 

randKey = self._generateRandomKey() 
print("&gt; Internal Random Key: "+randKey) 

# encrypt input with ^ 
cryptographer = Crypto() 
encryptedMsg = cryptographer.encode(randKey,plainMsg) 

# encrypt random key with priv. 
key pubKey = cryptographer.encode(self.privateKey,randKey) 

#return concat encrypted key and input 
return pubKey + "_"+encryptedMsg</pre>
For those who prefer, a visual representation of this is available on the Wikipedia page for PGP. The algorithm is as I stated before:
<ol>
	<li>Generate a Random Key for the message</li>
	<li>Encrypt the message with the Random key</li>
	<li>Encrypt the Random Key with the Private Key, to form the public key</li>
	<li>Concatenate the Encrypted Message and Public Key</li>
</ol>
The code for Decoding is as follows:
<pre>def decodePGP(self,concatMsg): 
#parse encrypted pub key, encrypted message 
parsed = concatMsg.split("_") 
pubKey = parsed[0] 
encryptedMsg = parsed[1] 

# decrypt rand key with priv. key 
cryptographer = Crypto() 
randKey = cryptographer.decode(self.privateKey, pubKey)
 
# decrypt message with rand key 
decryptedMsg = cryptographer.decode(randKey,encryptedMsg) 

#return message 
return decryptedMsg</pre>
In plain terms the decryption steps are:
<ol>
	<li>Parse the input message to get the Public Key and the Encrypted Message</li>
	<li>Decrypt the Public key with the Private key, to form the original Random Key</li>
	<li>Use the Random Key to Decrypt the Encrypted Message</li>
</ol>
Ridiculously simple right?! However, this method can be rendered vulnerable by using a weak encryption method, such as the Vigenere Cipher, as I have. Though,it should be clear that a PGP-Vigenere is stronger that Vigenere alone.

As you can see, with a strong encryption method, PGP adds a significant increase in security. The cost is that it increases the complexity in a limited fashion. Naturally, I will be adding this to my tool kit for future projects! I hope this explanation and example has been helpful. But I admit the diagram on Wikipedia provides a good outline of the PGP scheme. For anyone interested, you can download the example and the Vigenere Cipher implementation <a href="https://github.com/djscheuf/ProgamingPractice/tree/Playground/Playground/Cryptography/PGP" target="_blank">here</a>.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>614</wp:post_id>
  <wp:post_date>2016-09-13 15:00:32</wp:post_date>
  <wp:post_date_gmt>2016-09-13 20:00:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>pretty-good-privacy</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="algorithms"><![CDATA[algorithms]]></category>
  <category domain="post_tag" nicename="encryption"><![CDATA[encryption]]></category>
  <category domain="post_tag" nicename="infrastructure"><![CDATA[infrastructure]]></category>
  <category domain="post_tag" nicename="interprocess-comminitation"><![CDATA[interprocess comminitation]]></category>
  <category domain="post_tag" nicename="protection"><![CDATA[protection]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="recent-work"><![CDATA[recent work]]></category>
  <category domain="post_tag" nicename="security"><![CDATA[security]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tool"><![CDATA[tool]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[26800116503]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>computer-1294045_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2016/09/13/pretty-good-privacy/computer-1294045_960_720/#main</link>
  <pubDate>Sun, 14 Aug 2016 16:13:16 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/08/computer-1294045_960_720.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>653</wp:post_id>
  <wp:post_date>2016-08-14 11:13:16</wp:post_date>
  <wp:post_date_gmt>2016-08-14 16:13:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>computer-1294045_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>614</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/08/computer-1294045_960_720.png</wp:attachment_url>
</item>
<item>
  <title>Digest Template</title>
  <link>https://danieljscheufler.wordpress.com/?p=657</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=657</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 03</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
&nbsp;
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
&nbsp;
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>657</wp:post_id>
  <wp:post_date>2016-09-03 15:33:32</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Journeyman's Digest 03</title>
  <link>https://danieljscheufler.wordpress.com/2016/09/20/journeymans-digest-03/</link>
  <pubDate>Tue, 20 Sep 2016 13:53:56 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=659</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 03</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<strong><a href="https://medium.com/@benjaminsledge/a-letter-to-my-daughter-about-young-men-2bab2fca4971#.i4oever3u" target="_blank">A Man's Letter to his daughter about young men</a></strong> - I cannot even begin to describe the affect this article had on me when I first read it. I strongly recommend it. It is thought-provoking, and emotionally challenging. It touched something in me, and it forced me to pause during my day and reflect. One of the more powerful quotes from the post: "<strong class="markup--strong markup--p-strong">Meekness is strength wrapped in humility, my dear daughter. It is strength under control in a world where so many are <em class="markup--em markup--p-em">out of control." </em></strong>I encourage you to read, and to have this experience as well!

<strong><a href="http://pne.people.si.umich.edu/PDF/howtoread.pdf" target="_blank">A Guide on How To Read</a></strong> - On a more practical note, this is a small booklet from the University of Michigan School of Information. It was intended to help Grad students learn to read vast volumes of information. Personally I wished that I had found during my undergraduate degree. It would have helped with the engineering textbooks.
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<a href="http://mewo2.com/notes/naming-language/" target="_blank"><strong>On Naming Languages, or Con-Langs</strong></a> - All-Hail the inner nerd! This article is a very nice walk-through for creating a naming language. In this particular context, the author was creating a Name generator for a role-playing world. He wanted the names to sound reasonable, and so walks through the various rules and complexities of a language. It's a very enjoyable read!

<a href="http://mewo2.com/notes/terrain/" target="_blank"><strong>On reasonable world Terrain</strong></a> - Another post by the author of the Con-Lang article. This one focuses on reasonably generating a worlds terrain. Discussions of reasonable height-maps, erosion, and even city-placement. He even discusses the appropriate power of 2 to use when generating the height map. Again an interesting article.

<strong><a href="https://medium.com/@ecaron/why-i-stopped-hacking-the-amazon-dash-button-and-learned-to-solder-84386a38bbd1#.m28puy323" target="_blank">A short evangilization of soldering</a> </strong>- A short article<strong> </strong>from a Maker who learned the need to solder. Because his child's nightlight, previously powered by a Amazon button, burned out. I hope you enjoy the read!

<strong><a href="https://blog.codeship.com/5-ways-not-mess-microservices-production/" target="_blank">A discussion of common pitfall with Microservices</a></strong> - This is kind of a sponsored article ( not that I am paid, but that the author is kind of pushing a particular solution). However ti does offer some interesting discussion, and especially for a neophyte to Microservices, I found that discussion informative. Generally the pitfalls that he mentions are distributed logging, the difficult of debugging in a distributed environment, and cascade failures when a system dependency fails.

<strong><a href="https://syonyk.blogspot.com/2016/07/solar-shed-summary-my-off-grid-office.html" target="_blank">An off-the-grid office</a><a href="https://syonyk.blogspot.com/2016/07/solar-shed-summary-my-off-grid-office.html" target="_blank"> space</a></strong> - This guy build a little shed in his back-yard into an off-the-grid work-space. I personally think it's pretty cool, particularly for the off-the-grid part. I also think said office would be a bit hot, but still a cool idea.

<strong><a href="https://medium.com/@cramforce/hacking-business-negotiations-117468bc51e7#.f3euo1944" target="_blank">A software engineers hack of business negotiations</a></strong> - Now as a disclaimer, I cannot vouch for the recommended sales tactic. But in a conceptual sense, the author of this article has some good points. He describes a method to build the trust of prospective clients, in a way that only an engineering mind could be comfortable with.

&nbsp;
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<strong><a href="http://gabordemooij.com/index.php?p=/manifest" target="_blank">An Anti-mediocrity Manifesto</a></strong> - An interesting idea for software developers. It's something like the Agile manifesto or the Reactive Manifesto, but focuses instead on keeping the developer from slipping into mediocre patterns.

<strong><a href="http://arstechnica.com/science/2016/07/the-basics-of-the-thorny-relationship-between-science-and-philosophy/" target="_blank">The thorny relationship between Science and Philosophy</a></strong> - This article from Ars Technica, focuses on , as the title suggests the relationship between philosophy and science. At it's root it is about how we know what we know, and whether we can trust that knowledge.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>659</wp:post_id>
  <wp:post_date>2016-09-20 08:53:56</wp:post_date>
  <wp:post_date_gmt>2016-09-20 13:53:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest-03</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27026852524]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Journeyman's Digest 04</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/04/journeymans-digest-04/</link>
  <pubDate>Tue, 04 Oct 2016 20:51:27 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=712</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 04</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<strong><a href="https://backchannel.com/forget-comcast-heres-the-diy-approach-to-internet-access-ef1e37bc09e1#.9uldu8hbl" target="_blank">A DIY approach to internet</a></strong> - So everyone knows that the ISPs don't provide the best of services. So, one gent in Spain got fed up with waiting for them to run internet to his house, so he did it himself, by modifying commercially available equipment. After a while, his neighbors asked him to do the same for them, and he set up a small network. This network grew. And now he has an organization helping him to roll this out over more of the country, and helping him negotiate more service based deals with providers. These new providers instead offer tech-support, installations, an maintenance, rather than owning the wire or the data going through. It is a new and interesting model. I wonder if it will ever be able to come to the US.

<strong><a href="http://urbanconfessional.org/blog/howtodisagree" target="_blank">On How to disagree</a></strong> - The author discusses a rather contentious issue, namely abortion, but decides to take a different approach. He may disagree, but he realizes that the only way to help anyone towards your opinion, is to treat them with respect, and understand that we all have stories. This article made me pause. No matter if you agree with his stance or disagree, the suggestion for how to disagree in a more constructive way is powerful!
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<strong><a href="http://techblog.netflix.com/2016/08/vizceral-open-source.html" target="_blank">Netflix's open-source Traffic intuition tool</a></strong> - So Netflix, has updated it's open source traffic-intuition tool. This tool is apparently responsible for balancing the load of the Netflix servers, and keeping data speeds at reasonable levels. For those of us in Tech, it is an interesting topic, and this project might hold some insights.

<strong><a href="https://techcrunch.com/2016/08/02/china-has-actually-built-that-elevated-bus-that-travels-above-car-traffic/" target="_blank">China builds a traffic straddling bus!</a></strong> - So that futuristic idea of a bus that simply rides over traffic? Yeah, a company in China actually built it, and did a test.
<p style="padding-left:30px;"><strong><a href="http://shanghaiist.com/2016/08/05/straddling_bus_scam.php" target="_blank">... but maybe it isn't as impressive as originally thought.</a></strong> - Don't get your hopes up too much though. Apparently, the city official's didn't even know the test was happening. Further, as one might expect for an initial test, the traffic conditions were carefully controlled, and the test course was not very long. However the most concerning news, is that the bus only supports traffic up to 10 feet off the road... the city's limit is 20 feet, which might mean that the bus cannot remain street legal, and still dodge the larger trucks.</p>
<strong><a href="http://www.consciouscapitalism.typepad.com/conscious-capitalism/2009/10/summary-of-thinking-in-systems-by-donella-meadows.html" target="_blank">Thinking in systems, a summary</a> </strong>- The author of this post, provides his summary of several systems he has found useful for thought. I found it an interesting compilation, and thought you all might find something useful in it as well.

<strong><a href="http://themacro.com/articles/2016/08/product-development-cycle-fundamentals/" target="_blank">Product Development Cycle Fundamentals</a></strong> - As the title suggests, it is a discussion of the fundamental of the cycle of product development. For anyone familiar with Agile, these will be familiar, but I particularly appreciate the authors remarks on the need for a measurement of success. I have experience attempts at development without such markers. These were difficult to say the least.

<strong><a href="https://medium.com/anymail-finder-blog/using-an-api-to-build-a-1-500-month-business-in-4-months-6573350291f#.dy1mppk09" target="_blank">How to start a 1500USD business using a public API in 4 months</a></strong> - Another article from a small-business entrepreneur. This time, the authors discussion revolve around finding the niche for the business, as well as learning to adjust to the inconsistent stream of income. Over all, I found it an informative read.

&nbsp;
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<strong><a href="http://arstechnica.com/cars/2016/08/meet-some-of-the-startups-trying-to-take-the-pain-out-of-buying-a-new-car/" target="_blank">Some start-ups trying to take the pain out of car buying</a></strong> - So someone finally decided to try to make a better car-buying experience. Anyone whose bought a used car knows the pain and the toil that goes into finally getting the car out of the dealer's lot. This article discusses two companies, with two slightly different approaches, who are trying to make that process less arduous and frustrating.

<strong><a href="http://yournewswire.com/mysterious-tweet-sparks-fears-edward-snowden-is-missing-or-dead/" target="_blank">Fears that Snowden may be dead</a> </strong>- By now, anyone who follows the tech-related news closely, should have heard of this. Snowden's twitter account posted what looked like a hexadecimal cryptographic key. This spurred speculation that it is the key for archives he has shared with various news sources, and that if the key was shared, it might mean his detention or death. The news of this is troubling in my opinion. But I found the discussions surrounding the event interesting.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>712</wp:post_id>
  <wp:post_date>2016-10-04 15:51:27</wp:post_date>
  <wp:post_date_gmt>2016-10-04 20:51:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest-04</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27512864698]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Tutorial: NuGet packaging</title>
  <link>https://danieljscheufler.wordpress.com/?p=751</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=751</guid>
  <description/>
  <content:encoded><![CDATA[-- NOT READY TO POST

&nbsp;

Review Repo Notes, comments on ease, local repo use, as well as auto-building.

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>751</wp:post_id>
  <wp:post_date>2016-09-03 15:10:52</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>How to increase Team Velocity by 50% I</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/01/how-to-increase-team-velocity-by-50-i/</link>
  <pubDate>Tue, 01 Nov 2016 20:00:19 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=755</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

How would you like to increase your team's velocity by 50%? Well, I was able to accomplish such a feat as the capstone to my last internship. It took a lot of help from the team I was on, and a lot of support from the Team Lead. But we implemented a system that increased our velocity by 50% in roughly a month.

Our tale begins with the database access team, working with Entity Framework. I had just arrived. I was learning C#, Integration Test practices, and other new technologies as fast as I could.  I was shadowing the team's current tester to learn the ropes, and contributing where I could. Even with two of testers, the developers often need to wait for the us to catch up, up to an iteration after them. Moreover, released entities are later discovered to have inadequate test coverage, or undesirable behaviors.

The idea hit me one day when I was literally copying and pasting tests, and then replacing class names. I admit this was a poor habit, but I was endeavoring to keep up with the team. What I realized was a great number of our tests were of the same type. This kind of property gets that battery of tests, that kind gets a different set. Thanks to recent lessons in T4 templates, I realized we needed to generate the correct battery of tests for the entities in a programmatic way.

I tried to compile a set of known test scenarios. Then I enumerated the entities we'd produced or modified in the last PSI that matched the set I wrote. These data sets provided a good coverage. But I needed a place to store that information for all the entities, and the templates had to be able to read it. I experimented a bit and found that, with some C# code, the templates were able to read the a database.

The database tables would represent a single entity. The rows would represent the properties. They could even store boundary conditions! Then a master table would control what entities would have tests generated. The master table could also present the relationships between entities.

But this was too big a task for me. I needed help, so I brought my idea and some of my findings to my team lead. She called a small meeting between myself, the other tester, and the architect. I explained my idea, and showed them some of what I'd done.

After a lot of discussion, the team lead decided that it was a worthwhile project. She then set about getting the team ahead of schedule. This was we could put a month into the new project, and not be behind. Meanwhile she had me setup the core of the system and a scaffold to make sure we could delegate work. Additionally we spent a lot of time polishing the format of the generated tests. By the end of that month we were ready to start making our team faster!

With a  moment of inspiration, and the support of the team lead, my plan to put in place a system to generate our tests was ready to begin. In my next post I will discuss more of the implementation details. The various discoveries that occurred while the team worked on the project will also come up. In the end, we easily achieved a 50% increase in our team velocity!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>755</wp:post_id>
  <wp:post_date>2016-11-01 15:00:19</wp:post_date>
  <wp:post_date_gmt>2016-11-01 20:00:19</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-increase-team-velocity-by-50-i</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="automation"><![CDATA[Automation]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28463523609]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6199317527424745472&type=U&a=EnMl]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>AI Development Digest Special issue</title>
  <link>https://danieljscheufler.wordpress.com/?p=789</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=789</guid>
  <description/>
  <content:encoded><![CDATA[A Special issue of the Journeyman's Digest centered on AI Development.

Should include links to MarIO, and the Github project about Javascript leaning to dev AI. If possible should include links to  scholarly articles on Genetic AI Algorithm, discussion of weighting success and failure etc.

Some reasonable synthesis might be useful, but more likely should focus on collecting references and tying them together, rather than new material since it may be beyond your feild.

Links:

<a href="http://www.ehrenbrav.com/2016/08/teaching-your-computer-to-play-super-mario-bros-a-fork-of-the-google-deepmind-atari-machine-learning-project/"><span style="font-weight:400;">http://www.ehrenbrav.com/2016/08/teaching-your-computer-to-play-super-mario-bros-a-fork-of-the-google-deepmind-atari-machine-learning-project/</span></a><span style="font-weight:400;"> - Trainig AI to play Mario, MarIO if you recall</span>

<a href="http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf"><span style="font-weight:400;">http://nn.cs.utexas.edu/downloads/papers/stanley.ec02.pdf</span></a><span style="font-weight:400;"> - Paper which is the basis for MArIO</span>

<a href="https://github.com/olistic/warriorjs/wiki/List-of-tips"><span style="font-weight:400;">https://github.com/olistic/warriorjs/wiki/List-of-tips</span></a><span style="font-weight:400;"> - learn javascript and program ai</span>

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>789</wp:post_id>
  <wp:post_date>2016-09-06 19:22:38</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Data Visualization Art Digest Special Issue</title>
  <link>https://danieljscheufler.wordpress.com/?p=793</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=793</guid>
  <description/>
  <content:encoded><![CDATA[A Journeyman's Digest special issue on Data Visualization Art.

Should specifically mention TED talk, and the Physics sound track Alchemy. Should discuss some ideas like:
<ul>
	<li>Heart Beat data symphony</li>
	<li>Code Base Symphony, or day-to-day growth visualization ( or both)</li>
	<li>Tree model of Person-of-interests life, people them met, things they did, or the like.</li>
	<li>Github code base map, linking contributors and locations? (if that info is available), like building towers per 1000 lines of code</li>
</ul>
Links:

<a href="http://www.popsci.com/simonne-jones-alchemy-particle-physics-song-exclusive#page-5"><span style="font-weight:400;">http://www.popsci.com/simonne-jones-alchemy-particle-physics-song-exclusive#page-5</span></a><span style="font-weight:400;"> - This could be used as the nucleus of an interesting discussion of Sonifications, and other data conversions. Translating our data into another ‘visualization’ so that we can see different aspects. And of course the necessary weaknesses of the correlations. Yey statistics!</span>

<a href="https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen?language=en"><span style="font-weight:400;">https://www.ted.com/talks/hans_rosling_shows_the_best_stats_you_ve_ever_seen?language=en</span></a>

<a href="http://www.ted.com/talks/r_luke_dubois_insightful_human_portraits_made_from_data?language=en"><span style="font-weight:400;">http://www.ted.com/talks/r_luke_dubois_insightful_human_portraits_made_from_data?language=en</span></a>

<a href="http://www.ted.com/talks/david_mccandless_the_beauty_of_data_visualization?language=en"><span style="font-weight:400;">http://www.ted.com/talks/david_mccandless_the_beauty_of_data_visualization?language=en</span></a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>793</wp:post_id>
  <wp:post_date>2016-09-06 19:23:14</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
</item>
<item>
  <title>Repository</title>
  <link>https://danieljscheufler.wordpress.com/?page_id=801</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=801</guid>
  <description/>
  <content:encoded><![CDATA[NOT READY TO POST

A Reference repository for useful items, services, links that I have found and used in work or in life. In the interest of sharing alike.

Internet News: Hacker News, ArsTechnica

Blogs: Art of Manliness, Medium, Geek and Sundry

Tools: Bullet Journal, Keepnote, Atom.io, Repl.it, Feedly, Github]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>801</wp:post_id>
  <wp:post_date>2016-09-03 15:46:30</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>How to increase Team Velocity by 50% II</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/08/how-to-increase-team-velocity-by-50-ii/</link>
  <pubDate>Tue, 08 Nov 2016 22:00:28 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=831</guid>
  <description/>
  <content:encoded><![CDATA[If you missed the first post in the series you can find it here!

Last time, I opened with the hook of increasing a team's velocity by 50%. I introduced an automation project that would generate integration tests for us. Before that system, the testers, myself included, had trouble keeping pace with the rest of the team. Worse still, we found out later that some of the entities we release had bugs in them! But I had an idea. I assembled a rough outline and a demonstration for the Team Lead. Then after some discussion she gave it a green light. She also gave me one month to set up the necessary scaffolding, while she got the team ahead of schedule.

The core of this automation system was <a href="https://en.wikipedia.org/wiki/Text_Template_Transformation_Toolkit" target="_blank">T4 templates</a>. For those unfamiliar, they are a file generation framework created by Microsoft. By writing .NET code in the .tt file, one can control the contents of the generated text files. This includes generating C# code, and other file types.

We used these templates to generate partial test classes containing the predefined test cases. Not every entity would get the same kind of tests. For example, some entities would have doubles that could not be negative. Others might have a string that had to be populated. There were even different edge cases supported within the same data type. A database containing various flags would dictate what tests to generate.

To review, the database housed two kinds of tables: the Main table, and an entity specific table. The Main table controlled whether tests were generated, and linked to the entity tables. The entity tables housed information on the properties to test. AS well as  the boundary conditions and other requirements for testing.

One challenge I discovered while scaffolding was ensuring that Parent-Child relationships were honored. I couldn't just assign a random ID to the parentID field. The program database would kick that out with a constraint. I discussed and brainstormed on this problem with the Senior tester. We finally decided to create a helper class that could act as a factory for the tested entities.

The factory would assign all the required fields of an entity with appropriate values. For the most part, these were randomly generated numbers, or strings. The Helper's factory functions were called to create the entity-under-test's Parents. Following this logic, the helper would create the entire entity tree.  This would work at any level of child, leaving our database in an appropriate state.

In database testing there are four basic level tests: Create, Read, Update, and Delete. To support these cases, one must control when to save an entity to the database. To help in these cases, we added alternative factory functions to the helper, selected by parameter flags.

Up to this point we wrote the helper functions manually. This became difficult to maintain, and so we automated it as well, again using T4 templates. But unlike the test generators, we could not honor the generate flags in the database. There were cases where an entity was not ready to test, but a child, or a parent was wishing to test with it. Instead, we opted to generate factory functions for every listed entity.

By the time I had finished this level of scaffolding it was time to bring the team on board the project. We delegated by a series of test cases. 'Not equal null' tests to this developer, 'Less than the specified max length' to another and so on.

The size of the system, in comparison to its scaffold, exploded during this time. I spend much less time coding the system, and much more helping and directing the other developers. I sought guidance from the Team Lead often.  I did so to ensure that I was not ruffling feather or otherwise harming my effectiveness as a leader.

With grace and patience, she guided me on better practices.  She offered ideas for how to help the developer understand. Many of her ideas made it into loose documentation that I sent to the developers for reference. But the developers weren't the only ones who had to understand the system. I also had to find a way to communicate the value and usage to the Product Manager.

I was blessed with an understanding PM. She allowed me to walk her through the basics of the system, and what it meant. In the end, she decided that it was the perfect place for her to define the AC for any new or modified entities. Once she understood the structure of the tables, she happily filled in the requirements. Moreover, she was able to provide them in greater detail than we'd been able to achieve before.

Instead of having some loose requirements, we had detailed expectations. Or in other cases, we had a description of the desired end-state of a modified entity. This greatly reduced confusion altogether. And resulted in  far fewer follow-up meetings with the PM. This alone would have increased our team speed. This test Database provided our team, PM included, a common medium to communicate in. And on top of that, it provided enough details for all parties to understand!

Back to the practical use of the database, I crafted template SQL queries. These allowed the PM to add new entities, or change existing ones. And with her existing skill she easily found the information she wanted. These tools, including the database, allowed the team to accommodate the availability of the PM's time. Some weeks she would be out with customers, while on others she was free most of the day for discussion. With the test Database, she could tell us what she wanted without having to be present for everyone of our meetings!

After a month of expeditious work by our team, we had the core of our automation system ready to use! The developers returned to new development. The testers moved to round out the automation, and to maintain it. Our first process change was adding another step to our storyboard. The developers would now generate the core integration tests for an entities and run them. If those tests didn't pass, then they would fix their entity, before it every went into QA.

This extra step saved the testers a great deal of time, since the Developers would see the common bugs. And this reduced the back-and-forth between Development and QA immensly! With the extra time, the testers could focus on maintaining the system. We could also pursue exploratory testing!

One drawback in this system was that every time a developer wanted to run their entity tests, it had to change a flag in the database. This flag change affected everyone! Which lead to some confusion in the first week. My first iteration of improvement added an override list on each user's box. This allowed a developer to test without modifying the database.

On the topic of maintenance, our automation system was great at handling standard cases. But it was somewhat ornery about special cases, and especially so for one-offs. We had to add a couple of tables to identify specific special relationships. This way we could test them specifically without interrupting the existing structure.

Further, we had to carefully manage access to this database to protect it against accidental corruption. Which meant we had to allow the developers to read, but not write to the database. Both of these requirements were non ideal. But in hindsight, we should have expected them, considering the tools used to create the system.

But the required maintenance did encourage the team to adopt a better development process. Instead of immediately going to work on new entities, we would start with a through review of the specifications. We adopted the habit of always having the test Database open during these meetings. And  we kept it up-to-date with the discussion. When we finished with the meeting, the database accurately reflected our expectations. The developer could immediately and confidently begin their work.

The automation system was beneficial for all. Though it did not completely free the testers from test maintenance. It did free up our time for exploratory testing. With the benefits to the developers in rapid feedback, they saved time. For the PM, it provided a fertile communication medium. And all together the team was able to achieve a 50% increase in our velocity for a given iteration. It was a good way to end an internship.

The next post, the last in this series,  I'll cover what happened by the time I returned as a full-time developer. This will include exact quantification of the team's new stable velocity. I will cover the improvements we made on the system, and even a scion system based on the same idea!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>831</wp:post_id>
  <wp:post_date>2016-11-08 16:00:28</wp:post_date>
  <wp:post_date_gmt>2016-11-08 22:00:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-increase-team-velocity-by-50-ii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="automation"><![CDATA[Automation]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28716763375]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6201934003138891776&type=U&a=zNCT]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>13</wp:comment_id>
    <wp:comment_author><![CDATA[How to increase Team Velocity by 50% III &laquo; Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2016/11/15/how-to-increase-team-velocity-by-50-iii/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.82.83</wp:comment_author_IP>
    <wp:comment_date>2016-11-15 16:12:43</wp:comment_date>
    <wp:comment_date_gmt>2016-11-15 22:12:43</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] mentioned in the last post, we were able to achieve a 50% increase in our delivered story points per iteration. To be sure, [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1479251624.2130200862884521484375;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1479251847.4190890789031982421875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1479251847</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1479247963.9028398990631103515625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>How to increase Team Velocity by 50% III</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/15/how-to-increase-team-velocity-by-50-iii/</link>
  <pubDate>Tue, 15 Nov 2016 22:12:35 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=850</guid>
  <description/>
  <content:encoded><![CDATA[<img class="  wp-image-899 alignleft" src="https://danieljscheufler.files.wordpress.com/2016/09/sport-1014015_960_720.jpg" alt="sport-1014015_960_720" width="270" height="270" />Last time, I discussed the development process and some of the end results of a automated test-generation system. I have mentioned from the beginning that it enabled my team to increase our velocity by 50%. Today, I will discuss how long it took for us to realized that increase. I will also talk about some further improvements that allowed us to reach that level.

As mentioned in the <a href="https://danieljscheufler.wordpress.com/2016/11/08/how-to-increase-team-velocity-by-50-ii/">last post</a>, we were able to achieve a 50% increase in our delivered story points per iteration. To be sure, this increase did not happen overnight. It took roughly 3 iterations before we learned how to use the system most effectively. It took an two more iteration before we reached our new plateau.

As we used the system we began to realize several weaknesses in it. The clearest of these was the systems rapid rate of decay. If we got even a little lazy, the system magnified that laziness. And we would then have to spend much more time just to fix it.  Sort of like cleaning one's room. Some mess attracts more mess. But if you'd just put the laundry away you wouldn't spend a couple hours extra on the weekends just to clear it away.

In a similar fashion we had to adopt better habits to keep our system pristine and operating. As a team we had to adopt better habits, one of which I mentioned before. We adopted the practice of having our requirements discussions with the Database open. We then kept it up to date with the conversation.

Now in theory, this fixation with cleanliness would only need to be maintained during active development of the data model. Once the data model development was completed, the Test generation system would not longer be as necessary. Presuming the system runs for the last time on a completely specified data model, and that all models correctly meet their criteria, the auto-generation system would be effectively retired.  While its final output would be kept for posterity. However, I was transferred to another team before such an even occurred, and so cannot speak from experience.

But before I left the team, I actually returned to school for my last semester. I then returned to work with the team again, this time as a full-hire. When I returned, the team had expanded on the auto-generated tests. They had added new types of tests and were beginning to have trouble maintaining my original t4 architecture. This was the first improvement that I made to the system when I returned.

My original design had become cluttered and bloated. This was due to intense aggregation of the test implementation and the generation-decision logic. So as any good programmer would, I created layers of abstraction. I created a hierarchy of t4 files. Since you can refer to functions created in other t4, I organized the test implementation logic in one file and the test generation logic in another for each test category. Some categories were particularly large and so I split their logic out into yet more.

At most, I believe the nesting was 3 deep. But by adding this abstraction, all further extension of the generation system were greatly eased. Additionally, while abstracting the tests, I discovered several generation errors, and corrected them. Further improving the test coverage of the system.

While the reorganization was taking place, one of my colleagues was making another improvement. At the time, the generation system produced something like 5000 tests. However, they used a network database. As a result, running all the tests would take 2 hours or so. My colleague created a script that was run before the test-suite executed. It would create a seed copy of the database on the SQL server running on the local machine. As a result, the execution time went from 2 hours to around 16 minutes! Again, this was not am improvement I made. But it did greatly increase our efficiency and so I feel it is imperative to mention it here.

After finishing the re-organization of the system, and improving our execution speed, I happened on an interesting idea. I realized that we could apply the same concept to test another aspect of our code. At the time, I was tasked with writing some tests that would confirm that our triggers were working as expected after a schema upgrade. I realized we could use a similar system to test the proper creation of Table, Keys, Triggers, and restrictions of the database itself.

Most of us agreed that testing this through the entity was cumbersome and unnecessary. The trigger executed after the entity was saved, and thus testing it would require a second read cycle, which is slow while using the entity. So instead we decided to use SQL queries directly.

It was at this stage that the idea struck me. I offered it to our team lead, and she again supported the idea. And this time, having learned several lessons from the last time, I was able to whip out a working system for the desired test in an iteration. Over the following iterations, I expanded the trigger test to several other tables. I added both structural and key verification tests, which eased many of our worries regarding the schema upgrade process. At this point,I was transferred to another team. I saw the successful extension of the system, so I am unable to comment on the value it added to the team in the long run.

I will leave off with just three points. First, If you are willing to put in a little extra effort, you can buy time for your team to pay down technical debt. This is done by investing in strong meaningful tests. These tests, if properly written, will pay dividends whenever the system is changed. And the system is always changing.

Secondly, All test systems require maintenance. A test is only as valuable as the code that it verifies, and if that code changes, the test may also need to change. When the business function a test covers is no longer valid, the test should be removed. It is like weeding a garden (<em>if the peonies in the garden could turn into dandelions spontaneously). </em>

Finally, A quick excursions into a new way of doing things, can pay off in many ways. It can invigorate the team, especially if the system is time or labor saving! Everyone likes to work less! The new way can stimulate new ideas, as it did with the trigger tests. And of course if the time-savings do pan out, your team can achieve even more in the same period of time! I hope my discussion has provided some food for thought, and that perhaps you too will consider a little automation of your own! Feel free to PM me if you are curious about any system details that I did not mention.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>850</wp:post_id>
  <wp:post_date>2016-11-15 16:12:35</wp:post_date>
  <wp:post_date_gmt>2016-11-15 22:12:35</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>how-to-increase-team-velocity-by-50-iii</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="automation"><![CDATA[Automation]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28953972200]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6204415636035244032&type=U&a=iUrL]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>sport-1014015_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/01/how-to-increase-team-velocity-by-50-i/sport-1014015_960_720/#main</link>
  <pubDate>Wed, 14 Sep 2016 01:30:28 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/09/sport-1014015_960_720.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>899</wp:post_id>
  <wp:post_date>2016-09-13 20:30:28</wp:post_date>
  <wp:post_date_gmt>2016-09-14 01:30:28</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>sport-1014015_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>755</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/09/sport-1014015_960_720.jpg</wp:attachment_url>
</item>
<item>
  <title>What is a Software Engineer</title>
  <link>https://danieljscheufler.wordpress.com/?p=987</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=987</guid>
  <description/>
  <content:encoded><![CDATA[# NOT READY TO PUBLISH

The general idea of this post is to be a parrallel on LinkedIn Publishing.

It is intended to be in 3 parts:
<ol>
	<li>Alchemist (A Humorous beginning) - This title needs work, because it doesn't fit very well
<ol>
	<li>Shortly, we take component parts and create something new and greater from them. We are craftsmen, and tinkerers. For many it is a labor of love, for others it is an art. But the basic principles remain the same. And as with all practices some patterns emerge, if only we would listen.</li>
</ol>
</li>
	<li>Translator - This was the original point of the idea, so may be moved to point 3
<ol>
	<li>We are translators. We speak both a human language, and the language of machines. We are familiar with the intricacies of both, and the best of us know how to speak to each in such a way as to be represent the others ideas and limitations.</li>
</ol>
</li>
	<li>Human
<ol>
	<li>The best manager knows his people. And Software engineer are, while peculiar, very human. though we work on a team, each member is still strongly influenced by their preferences. You can see it in coding styles, and in the manner in which they take and look at certain assignments. We as engineers need to remember this, because, while we might prefer one way and understand one way, our colleagues will not necessarily share those views. The best among us ( not simply the lonely expert) need to have some charisma to help explain and convince others to their side.</li>
</ol>
</li>
</ol>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>987</wp:post_id>
  <wp:post_date>2016-09-25 11:33:33</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
</item>
<item>
  <title>Journeyman's Digest 05</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/18/journeymans-digest-05/</link>
  <pubDate>Tue, 18 Oct 2016 20:00:39 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1000</guid>
  <description/>
  <content:encoded><![CDATA[<h6 style="text-align:right;">Issue 05</h6>
<h2 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Highlight</span></h2>
<strong><a href="http://www.pbs.org/wgbh/nova/next/space/plasma-air-control/" target="_blank">Plasma Air Control</a></strong> - It would appear that the next advance in flight technology may be on the horizon. By manipulating the placement of plasma along a wing's edge, a team of researchers have fine-tuned the flow of air over the wing. This leads to improved efficiency and several other very promising possibilities!

<strong><a href="http://arstechnica.com/gaming/2016/08/anti-cheat-technology-stopped-pokemon-go-hackers-for-four-days/" target="_blank">How long can you stop the cheaters? Apparently, 4 days...</a> </strong>- Back in August, Niantec put in place some anti-cheat measures in Pokemon Go. This was to stop cheaters from running various bots that would rapidly level you character for you. In the end, this change really only stopped the bot creators for about 4 days. This Ars Technica article discusses more of the happening related to combating the anti-cheating fix.
<h2 style="text-align:center;"><span style="text-decoration:underline;">The Goods</span></h2>
<strong><a href="http://spectrum.ieee.org/tech-talk/semiconductors/optoelectronics/a-polariton-boseeinsten-condensate-for-switching-and-storing-optical-data" target="_blank">A new component for Data Storage</a></strong> - Researches have learned the basics for controlling a new component  as a storage media. These Bose-Einstein Condensates, are an amalgam of particles, which can carry information in both the polarity of their photon, and in the spin of their exiton. This new technology could provide a bridge between voltage based and optical circuitry.

<strong><a href="http://spectrum.ieee.org/nanoclast/semiconductors/materials/new-technique-reveals-black-phosphorus-properties-and-how-to-control-them" target="_blank">Additional controllable properties of Black Phosphorus found</a></strong>  - Black Phosphorous has shown some potential as the next Silicon. Recently some researches with Case Western have discovered another controllable property of Black Phosphorous which may unlock additional potential of this martial!

<strong><a href="http://arstechnica.com/cars/2016/08/hackers-use-arduino-to-unlock-100-million-volkswagens/" target="_blank">Vehicle Security Hack</a></strong>  - As it turns out that little key-dangle remote for your Volkwagen might not be very secure. With some minor snooping on a different remote, an Arduino could be used to spoof the signals necessary to cause the Volkwagen to open. Apparently, there was only a few 'keys' used by these remotes.

<strong><a href="https://medium.com/@yanismydj/standup-antipatterns-1e9db0d497da#.vmsldiyux" target="_blank">An anti-pattern for Stand-ups</a></strong> - Don't get me wrong, a stand-up, done right can be great. It keeps everyone up-to-date, and in the know. If people are engaged, then the knowledge necessary to solve a road-block can easily be identified. If this happens, the stand-up, far from interrupting work, actually improves the speed at which work can be done! But even a good tool, if used improperly can be more a burden. This post discusses some of the way a stand-up can go awry.
<h3 style="text-align:center;"><span style="text-decoration:underline;">This Issue's Curiosity</span></h3>
<strong><a href="http://www.thenewatlantis.com/publications/saving-science" target="_blank">A Discussion of some bad habits science has gotten into</a> </strong>- Science is great! It's how we know what we know, and more over its how we can learn! But even such a technology as the scientific method has flaws. Namely, humans are the ones that have to execute it. As a result, this system can come down with some unfortunate habits. This post offers some insight on a few of these, and is worth a read.

<strong><a href="http://arstechnica.com/gadgets/2016/08/emoji-are-getting-ever-more-expressive-but-not-without-growing-pains/" target="_blank">Emojis: The Growing-pains of a language</a></strong> - Emojis, a language? Actually, if you think about it, Emojis are basically a newly formed written language. But as with all growing languages, new symbols and their means mean that not everyone will use the same symbols for the same meaning. To complicate matters, since Emojis are rather technology based, the emojis available with Android and iPhone are diverging. This article offer some interesting perspective on that branching.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1000</wp:post_id>
  <wp:post_date>2016-10-18 15:00:39</wp:post_date>
  <wp:post_date_gmt>2016-10-18 20:00:39</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>journeymans-digest-05</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="category" nicename="journeymans-digest"><![CDATA[Journeyman's Digest]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="news"><![CDATA[news]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27985855285]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>A Master-Class in Survey Design: MIT's Self-Driving Car Survey</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/11/mit-is-asking-how-should-self-driving-cars-behave/</link>
  <pubDate>Tue, 11 Oct 2016 20:00:29 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1038</guid>
  <description/>
  <content:encoded><![CDATA[The future is coming. The consumer space-flight is possible within our life-times. And the self-driving car is fast approaching. No! Really!! It's brakes are out!!!

Or at least that's the situation that MIT wants your input on. They recently posted a survey on the topic. They want to know what decision a self-driving car should make if that kind of thing happens.  Don't worry it's nice and short, so feel free to take it and come back. You can find the survey <a href="http://moralmachine.mit.edu/" target="_blank">here</a>.

For an amateur student of philosophy, it was an enjoyable exercise. MIT presents a variety of scenarios wherein only a subset of the group can be saved. In fact is a new face on a classic problem.

The original formulation, to the best of my knowledge, is called the <a href="https://en.wikipedia.org/wiki/Trolley_problem" target="_blank">Trolley Problem</a>. In short, a trolley or train is on a track before a switch. You are next to the lever that changes which track the train will proceed down. But no matter which track you choose someone will die. Variations occur on how many people you can save. Some variations even change the type of people. But  all are there to bring you face-to-face with your personal ethical values.

Stepping back to the approachable, MIT has posed this question in a way which is easier to approach. I commend them for it! By now you have already taken their survey, and should recognize the snap shot below. If you haven't taken the survey yet, you can take it <a href="http://moralmachine.mit.edu/" target="_blank">here</a>.

<img src="https://mytrendingstories.com/media/photologue/photos/mts_moralMachine.jpg" alt="" />You will notice that MIT has presented the problem in visual terms. In the first place this allows the information to be processed more readily by more people. Which is great, especially for a survey where statistical significance is important! The more people who can take your survey the better.

Going back to the presentation, I will remark on the clever visual language that MIT has employed. They describe gender, health, social standing with understandable patterns. They can even express a persons habits (to a limited degree) with these patterns! Moreover, it is clear what the choice is. Those affected marked by icons. And the choice of the vehicle is also made clear, in a simple representation. Having taken the time to review it more , I  am impressed! Well done, MIT.

Moving to their results page, I must again praise their work. The visual style is consistent with the rest of the survey, as well as informative. They also show you where your preference is, relative to other takers. This provides easy to understand information, without complicating the graphs!

As one might expect, the results may not map one-to-one with your ethical beliefs. Of course, such a short survey cannot capture the full breadth of a persons beliefs. Several scenarios mix several criteria together. As a result some of the data may appear to show an incorrect conclusion. This has more to do with the limited set provided to the taker.

Despite this minor short-coming, the MIT survey has some solid scenarios! On the whole, they do a good job teasing our the taker's preferences. To remove the last vestiges of misleading data, I think MIT would need at most 5 more scenarios. But they have done a great job as is, while keeping the survey to a manageable length.

&nbsp;

<tt></tt><em>Title image is public domain, found <a href="https://pixabay.com/en/tram-trolley-traffic-urban-night-711792/" target="_blank">here</a>.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1038</wp:post_id>
  <wp:post_date>2016-10-11 15:00:29</wp:post_date>
  <wp:post_date_gmt>2016-10-11 20:00:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>mit-is-asking-how-should-self-driving-cars-behave</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="autonomous"><![CDATA[autonomous]]></category>
  <category domain="post_tag" nicename="autonomous-vehicle"><![CDATA[autonomous vehicle]]></category>
  <category domain="post_tag" nicename="choice"><![CDATA[choice]]></category>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="mit"><![CDATA[mit]]></category>
  <category domain="post_tag" nicename="morality"><![CDATA[morality]]></category>
  <category domain="post_tag" nicename="morals"><![CDATA[morals]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="self-driving-car"><![CDATA[self-driving car]]></category>
  <category domain="post_tag" nicename="statistics"><![CDATA[statistics]]></category>
  <category domain="post_tag" nicename="survey"><![CDATA[survey]]></category>
  <category domain="post_tag" nicename="visual-communication"><![CDATA[visual communication]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1062]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27749691990]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>moralmachinepostpic</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/11/mit-is-asking-how-should-self-driving-cars-behave/moralmachinepostpic/#main</link>
  <pubDate>Fri, 07 Oct 2016 01:57:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/10/moralmachinepostpic.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1042</wp:post_id>
  <wp:post_date>2016-10-06 20:57:24</wp:post_date>
  <wp:post_date_gmt>2016-10-07 01:57:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>moralmachinepostpic</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1038</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/10/moralmachinepostpic.png</wp:attachment_url>
</item>
<item>
  <title>tram-711792_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/11/mit-is-asking-how-should-self-driving-cars-behave/tram-711792_960_720/#main</link>
  <pubDate>Sat, 08 Oct 2016 18:18:16 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/10/tram-711792_960_720.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1062</wp:post_id>
  <wp:post_date>2016-10-08 13:18:16</wp:post_date>
  <wp:post_date_gmt>2016-10-08 18:18:16</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>tram-711792_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1038</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/10/tram-711792_960_720.jpg</wp:attachment_url>
</item>
<item>
  <title>Enable Multi-channel communication in your next meeting!</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/13/enable-multi-channel-communication-in-your-next-meeting/</link>
  <pubDate>Thu, 13 Oct 2016 20:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1071</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

All have been in one of those meetings. The one where only a couple of voices speak, and we never get a chance to add to the conversation. Not only do these degrade team morale, they stifle true discussion and they waste time! But most of these trouble come about because we do not have a way to signal each other without interrupting the speaker.

Recently, I found a <a href="https://gds.blog.gov.uk/2016/10/07/platform-as-a-service-team-takes-even-handed-approach-to-meetings/" target="_blank">blog post</a> by a PaaS team in the UK that came up with a novel approach to resolve just this issue. In simple terms, they instituted a series of hand signals. This allows them to communicate requests or comments while another was speaking. What they actually did was formalize a second channel for commutation during meetings!

They created a simple language that uses a different medium than the speaker. Because the language is simple, it does not disturb the flow of the discussion. And it still allowing the signaler to state their intent. They created six basic signal, which suit the most common needs during a meeting.

They created two-handed signals for Agree, Disagree and 'Point of Order', or informing the speaker that they are off-topic. Additionally, they have 'Direct Response', 'Request Clarification', and 'I want to speak', which are one handed. These serve almost all the needs an attendee could have while not speaking. Ans since these signals do not interrupt the speaker, he can finish his point and then allow others to speak.

The only modification I might make would be to convert all their signals to a single handed approach. This way they would be  more accessible. Further it would allow for the use of the other hand without disrupting communication. To accomplish this, only the 'Point of Order' and the 'I want to speak' might have to change. Instead of a triangle with the hands for 'Point of order', one could reach across their chest to their opposite shoulder with straight fingers to show the speaker is off topic. As for 'I want to speak' could just convert to a raised hand, or perhaps the 'Direct Response' but pointing upward.

I am struck by this progression. We as humans learn from our machines even as we create them. As an example, the creation of a smart watches ushered in <a href="http://spritzinc.com/" target="_blank">Spritz</a>. Spritz recognized that we could fundamentally re-invent the act of reading, on any computer display! This new channel of communication , and the idea to use it in tandem with the spoken word holds similar potential!

I admit to being very excited to try this in my next meeting. I offer kudos to the UK team, and thank them for sharing their discovery!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1071</wp:post_id>
  <wp:post_date>2016-10-13 15:00:00</wp:post_date>
  <wp:post_date_gmt>2016-10-13 20:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enable-multi-channel-communication-in-your-next-meeting</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="business-meetings"><![CDATA[business meetings]]></category>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="effective"><![CDATA[effective]]></category>
  <category domain="post_tag" nicename="effective-communication"><![CDATA[effective communication]]></category>
  <category domain="post_tag" nicename="effective-meetings"><![CDATA[effective meetings]]></category>
  <category domain="post_tag" nicename="hands"><![CDATA[hands]]></category>
  <category domain="post_tag" nicename="meetings"><![CDATA[meetings]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="visual-communication"><![CDATA[visual communication]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1104]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[27816358662]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>hand-427517_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/13/enable-multi-channel-communication-in-your-next-meeting/hand-427517_960_720/#main</link>
  <pubDate>Wed, 12 Oct 2016 00:38:21 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/10/hand-427517_960_720.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1104</wp:post_id>
  <wp:post_date>2016-10-11 19:38:21</wp:post_date>
  <wp:post_date_gmt>2016-10-12 00:38:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>hand-427517_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1071</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/10/hand-427517_960_720.png</wp:attachment_url>
</item>
<item>
  <title>Dev Tool: Atom - Revisited</title>
  <link>https://danieljscheufler.wordpress.com/2016/10/25/dev-tool-atom-revisited/</link>
  <pubDate>Tue, 25 Oct 2016 22:00:29 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1106</guid>
  <description/>
  <content:encoded><![CDATA[<a href="http://atom.io/" target="_blank" rel="nofollow noopener">Atom</a> is Github's <em>hackable</em> text editor. I was introduced to it by a friend in college. Since then I have used it for various tinkering projects in Python, and an Arduino project with a couple of friends. Atom is awesome!

Atom doesn't ship with support for everything, which is alright. But what makes Atom great, is that it is extensible! It has a rich marketplace of published extensions offering support from Python to C, and Json to Yaml. I discussed some of the packages that I used to support both python and Arduino in <a href="http://danieljscheufler.wordpress.com/2016/05/19/development-tool-atom/" target="_blank" rel="nofollow noopener">my previous post</a>.

Lately, I have been using Atom as my go-to <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop" target="_blank" rel="nofollow noopener">REPL</a> environment. Now, there are other tools like <a href="http://repl.it/" target="_blank" rel="nofollow noopener">repl.it</a>, which are great for rapid feedback tinkering. However, I always feel ... iffy about online solutions. They can be great, but if the power is out, or the internet is down, or worse slow... well there go the advantages.

But last week, I started to notice that my instance of Atom was starting a bit slow. Mind you it was just a few seconds, but it was noticeable. So I started hunting. After a while I found that Atom ships with a plug in called Timecop. Timecop tracks performance times of the modules that you have installed and active. It tracks the load time, the init time as well as other associated metrics.

As I started snooping I found that several of my modules were really slowing me down. For example, a bit more than a half second was lost to <a href="http://github.com/OmniSharp/omnisharp-atom/wiki" target="_blank" rel="nofollow noopener">Omnisharp</a>, which I had loaded to support C# tinkering. Additionally the <a href="http://github.com/AtomLinter/linter-clang" target="_blank" rel="nofollow noopener">C Language Linter Library</a> also ate considerable time.

C and C# are not the fastest REPL languages for me. As a result, I decided to pare down the modules that I had supporting them. Now don't get me wrong, I love C# for business development! I just feel that it can be cumbersome for REPL workflows. So, I uninstalled some of my modules, like Omnisharp. But for C, I just deactivated them. This is because C is often used for Robotics and Arduino Associated applications.  Since the modules were still installed, I could turn them back on. Thus the features can be used without incurring the start-up cost every time I launched Atom.

All in all, this was an interesting exercise, and I thought that others might benefit from hearing about it. I am rather pleased with the results. And after gaining this experience, I am think that my next challenge will be to write a plug-in or module myself! I recently found <a href="http://github.com/blog/2231-building-your-first-atom-plugin" target="_blank" rel="nofollow noopener">this tutorial</a> that I think will help.

As always thanks for your time! If you found this post interesting, I would encourage you to check out my personal blog. I have several posts on <a href="http://danieljscheufler.wordpress.com/tag/tools/" target="_blank" rel="nofollow noopener">Development Tools</a> that I think you might like!

<em>This was originally posted on <a href="https://www.linkedin.com/pulse/dev-tool-atom-daniel-scheufler?trk=pulse_spock-articles" target="_blank">LinkedIn</a> with the Title Dev Tool: Atom. Since that was the original post's title, I have changed it. Further, this post originally refered to the plugin as Timeit. I discovered later that was incorrect. I have applied this correction here.</em>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1106</wp:post_id>
  <wp:post_date>2016-10-25 17:00:29</wp:post_date>
  <wp:post_date_gmt>2016-10-25 22:00:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dev-tool-atom-revisited</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="development-environment"><![CDATA[development environment]]></category>
  <category domain="post_tag" nicename="ide"><![CDATA[IDE]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="post_tag" nicename="repl"><![CDATA[repl]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="tools"><![CDATA[tools]]></category>
  <category domain="post_tag" nicename="tuning"><![CDATA[tuning]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[393]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[28237194131]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6196871409684271105&type=U&a=jP1r]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Enter Bullet Journal</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/22/enter-bullet-journal/</link>
  <pubDate>Tue, 22 Nov 2016 21:00:05 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1173</guid>
  <description/>
  <content:encoded><![CDATA[In this digital age, I have learned the value of a to-do list. I’ve tried Trello, and even GoogleSheets, but nothing quite replaces the feel of paper, or the mental reminder I get when I physically write it down. I have been searching, but never liked the thought to just writing it on random sheets of paper. Or worse a ton of sticky notes littered through the house.

Enter <a href="http://bulletjournal.com/" target="_blank">Bullet Journal</a>. As you can guess, Bullet Journal is a system  to managing to-do lists. But what I particularly appreciate is, this system is designed to work for any notebook you might have lying around. The core is built around the Index, where the current notes, or lists, or whatever else you can think of are recorded, with their page numbers.  This way you can find all your notes again, or more retired lists when you no longer need them.

Picture: <a href="http://imgur.com/9fm1BFl">My Bullet Journal</a>

Picture: <a href="http://imgur.com/mPkGAnN">The Index</a>

Besides the Index, several other list types are prescribed by the creator. Specifically the Annual plan, and the Monthly plan. The Annual is for long-term events, or necessary tasks. Things like doctor’s appointment and last days to enroll in school or the like. The Monthly is then for monthly tasks, and events, such as date-night or company potlucks. While not necessary, I have found these artifacts to be helpful in keep track of my life.

Picture: <a href="http://imgur.com/PSnsu58">The Future Plan</a>

Picture: <a href="http://imgur.com/oqCmG9J">The Monthly Plan</a>

But best of all, is that this system works within a single notebook! All my lists, and my various notes, like ‘Blog Post Ideas’ are in the one book. As long as I have the book, I have access to my ideas. The only down-side is that it is a physical only copy. But for me this is a worthwhile trade!

Of course, a to-do list at the monthly level is not really useful. As a result, the creator expects the user to dive into a weekly level list. I have done this, and found that with my OCD, I prefer to keep them on a pair of pages. This makes my organization easier, and sates my desire for even-ness.

Picture: <a href="http://imgur.com/xaQKyjH">A Weekly List</a>

If this sounds interesting to you, I encourage you to check them out and try your own Bullet journal!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1173</wp:post_id>
  <wp:post_date>2016-11-22 15:00:05</wp:post_date>
  <wp:post_date_gmt>2016-11-22 21:00:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>enter-bullet-journal</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bullet-journal"><![CDATA[bullet journal]]></category>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="innovation"><![CDATA[innovation]]></category>
  <category domain="post_tag" nicename="journal"><![CDATA[journal]]></category>
  <category domain="post_tag" nicename="list"><![CDATA[list]]></category>
  <category domain="post_tag" nicename="lists"><![CDATA[lists]]></category>
  <category domain="post_tag" nicename="notebook"><![CDATA[notebook]]></category>
  <category domain="post_tag" nicename="organization"><![CDATA[organization]]></category>
  <category domain="post_tag" nicename="organize"><![CDATA[organize]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="to-do"><![CDATA[to-do]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29202829415]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6206974570432389120&type=U&a=nwLS]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1176]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>bag-1565402_1280</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/22/enter-bullet-journal/bag-1565402_1280/#main</link>
  <pubDate>Tue, 15 Nov 2016 23:15:47 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/bag-1565402_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1176</wp:post_id>
  <wp:post_date>2016-11-15 17:15:47</wp:post_date>
  <wp:post_date_gmt>2016-11-15 23:15:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bag-1565402_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1173</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/bag-1565402_1280.jpg</wp:attachment_url>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/11/15/1180/</link>
  <pubDate>Wed, 16 Nov 2016 00:33:44 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2016/11/15/1180/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1180</wp:post_id>
  <wp:post_date>2016-11-15 18:33:44</wp:post_date>
  <wp:post_date_gmt>2016-11-16 00:33:44</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1180</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="collections"><![CDATA[Collections]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[category]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[191035]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/11/15/1182/</link>
  <pubDate>Wed, 16 Nov 2016 00:33:48 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2016/11/15/1182/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1182</wp:post_id>
  <wp:post_date>2016-11-15 18:33:48</wp:post_date>
  <wp:post_date_gmt>2016-11-16 00:33:48</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1182</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>4</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="collections"><![CDATA[Collections]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[12412]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[category]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/11/15/1184/</link>
  <pubDate>Wed, 16 Nov 2016 00:40:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2016/11/15/1184/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1184</wp:post_id>
  <wp:post_date>2016-11-15 18:40:24</wp:post_date>
  <wp:post_date_gmt>2016-11-16 00:40:24</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1184</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="collections"><![CDATA[Collections]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[527236856]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[category]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Work Experience</title>
  <link>https://danieljscheufler.wordpress.com/about/work-experience/</link>
  <pubDate>Thu, 24 Nov 2016 15:19:53 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=1186</guid>
  <description/>
  <content:encoded><![CDATA[<blockquote>
<p style="text-align:center;"><em><strong>This page is a work-in-progress. Please excuse the dust!</strong></em></p>
</blockquote>
I have listed my work experience, calling out certain project for your attention. In addition to being listed in order of recency, I have added link to posts about the associated projects.
<h2 style="text-align:center;">Preventice - Software Engineer</h2>
<h6 style="text-align:center;">July 2016 - Present</h6>
<h3>Projects:</h3>
<h4>Enterprise Service Bus</h4>
<p style="padding-left:30px;text-align:justify;">Related Technologies: C#, Azure Service Bus, REST, MEF, Nuget</p>
&nbsp;
<h4><a href="https://danieljscheufler.wordpress.com/2016/09/13/pretty-good-privacy/">Pretty Good Privacy</a></h4>
<ul>
	<li>Electronic Medical Records Integration</li>
</ul>

<hr />

<h2 style="text-align:center;">IHS - Software Engineer</h2>
<h6 style="text-align:center;">Jan 2016 - July 2016</h6>
<h3>Projects:</h3>
<ul>
	<li>Predictive Algorithm refinement and improvement
<ul>
	<li><a href="https://danieljscheufler.wordpress.com/2016/04/07/development-tool-jupyter/">Development Tool: Jupyter</a></li>
	<li><a href="https://danieljscheufler.wordpress.com/2016/06/16/defensive-programming/">Defensive Programming</a></li>
</ul>
</li>
	<li><a href="https://danieljscheufler.wordpress.com/2016/04/21/licensing-overhaul-introduction/">Licensing Overhaul</a></li>
</ul>

<hr />

<h2 style="text-align:center;">IHS - Associate Software Engineer</h2>
<h6 style="text-align:center;">Dec 2014 - Jan 2016</h6>
<h3>Projects:</h3>
<ul>
	<li><a href="https://danieljscheufler.wordpress.com/2016/05/26/innovation-fridays-learn-c/">Innovation Fridays</a></li>
	<li>Integration Test Auto-generation - <a href="https://danieljscheufler.wordpress.com/2016/11/01/how-to-increase-team-velocity-by-50-i/">How to increase your team velocity by 50%</a></li>
</ul>
&nbsp;

&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1186</wp:post_id>
  <wp:post_date>2016-11-24 09:19:53</wp:post_date>
  <wp:post_date_gmt>2016-11-24 15:19:53</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>work-experience</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Education</title>
  <link>https://danieljscheufler.wordpress.com/about/education/</link>
  <pubDate>Thu, 24 Nov 2016 15:39:27 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?page_id=1212</guid>
  <description/>
  <content:encoded><![CDATA[<h2 style="text-align:center;"><img class="alignnone size-full wp-image-1461" src="https://danieljscheufler.files.wordpress.com/2016/11/logo-uh-wordmark-primary-color.gif" alt="logo-uh-wordmark-primary-color" width="250" height="93" /></h2>
<h2 style="text-align:left;">B.S. Electrical Engineering - <a href="https://www.egr.uh.edu/" target="_blank" rel="noopener">University of Houston</a></h2>
<h6>with a Focus on Computers</h6>
<h4>Graduated Dec 2014<em>  - Magna Cum Laude</em></h4>
During my studies I had the opportunity to learn basic Digital Signal processing. I was able to apply the understanding of discrete time mathematics gains from DSP while learning the theory behind Telecommunication encoding and protocols. Among my favorite class projects involved writing control protocols in Assembly and Robot-C for a micro-controller robot. With this experience, I capped off my studies by designing and beginning the implementation of an Autonomous Quadrocopter for Geometric mapping of GPS-denied environments.

Since entering the workforce I have continued my education through several means. In addition to reading books such as <a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-3rd/dp/0321934113" target="_blank" rel="noopener">Peopleware</a>, and <a href="https://www.amazon.com/12-Essential-Skills-Software-Architects/dp/0321717295" target="_blank" rel="noopener">12 Essential Skills for Software Architects</a>, I have taken a number of <a href="https://www.pluralsight.com/" target="_blank" rel="noopener">Pluralsight</a> course. Since Pluralsight offers a reasonable evaluation of a Software Engineer's mastery of a particular language, I have decided to add a selection of my evaluations from Pluralsight.

[gallery ids="1454,1455,1456,1457" columns="2" size="medium"]

&nbsp;
<h6></h6>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1212</wp:post_id>
  <wp:post_date>2016-11-24 09:39:27</wp:post_date>
  <wp:post_date_gmt>2016-11-24 15:39:27</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>education</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>page</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wp_page_template</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>switch_like_status</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>sharing_disabled</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/11/24/1243/</link>
  <pubDate>Thu, 24 Nov 2016 15:39:46 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2016/11/24/1243/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1243</wp:post_id>
  <wp:post_date>2016-11-24 09:39:46</wp:post_date>
  <wp:post_date_gmt>2016-11-24 15:39:46</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1243</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="resume"><![CDATA[Resume]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1186]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2016/11/24/1244/</link>
  <pubDate>Thu, 24 Nov 2016 15:39:48 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2016/11/24/1244/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1244</wp:post_id>
  <wp:post_date>2016-11-24 09:39:48</wp:post_date>
  <wp:post_date_gmt>2016-11-24 15:39:48</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1244</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>1</wp:post_parent>
  <wp:menu_order>3</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="resume"><![CDATA[Resume]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1212]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>So tell me, Why do we pay you?</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/29/so-tell-me-why-do-we-pay-you/</link>
  <pubDate>Tue, 29 Nov 2016 22:27:03 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1250</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

&nbsp;

<span style="font-weight:400;">So imagine this: you are sitting at your desk at work. When a mid-level manager strolls up and asks you the following: "Why are we paying you to do what you do?" Could you answer him? Would he understand the value of keeping you if you did?</span>

<span style="font-weight:400;">Recently, I had a chance at work to answer this exact question. Thankfully, the situation was much more relaxed. You see a project that I am the technical lead of was awarded a Project Manager. To me this means that the business thinks that what I am doing is valuable. Valuable enough to pay someone to make sure that it is well staffed, organized and properly directed. I am pleased with the direction we are going.</span>

<span style="font-weight:400;">But as one might expect, the Project Manager was not a software engineer. So naturally explaining the value of the project in software terms wouldn't help. The make matters more complicated, the project is not customer facing. It is in fact a business solution, helping to tie many other services together.</span>

<span style="font-weight:400;">Since this project had been without a Project Manager for a while, we had never completely translated the value of the project into business terms. As a result our first meeting with the PM experienced a little bit of a disconnect. We spoke about the value the software provided to other software applications. But our PM had some trouble translating that into meaningful terms for herself.</span>

<span style="font-weight:400;">So following the meeting, I took it upon myself to attempt a business translation. I took what I knew about the project and its value and translated that roughly into business terms. I certainly did not do a perfect job. But I believe that some benefit may come from discussing what I have learned over the years and was able to apply to this project.</span>

<span style="font-weight:400;">As I see it, Business Value comes down to just one thing: More Money. But there are two ways to achieve this end. Either you make them money, or your save them money. If you can translate your work into one of these two parts you can usually make a business case for it.</span>

<span style="font-weight:400;">Our project was created to simplify the process of connecting many apps. The project would make it easier to maintain, and easier to extend the connections between application. It would also support new feature implementation. Moreover, since the new system is simpler, it reduces the likelihood of incorrect actions by our system. So how does one translate this into saving or earning more money?</span>

<span style="font-weight:400;">If the project make it easier to maintain a system, then it reduces the man-hours spent on maintenance, right? If you save man-hours, then you are saving money right? If you want to go the extra mile, provide an estimate of how many man-hours it saves. Then multiply those hours by the average software engineer hourly rate. This provides a number of dollars that your project can save the business!</span>

<span style="font-weight:400;">Since software projects often provide a benefit for many years; try to provide information about saving during a single year. So if I save 8 man-hours a month, I save the company 96 man-hours or 3600$ per year (assuming a salary of 75K$).</span>

<span style="font-weight:400;">To take the example a step further, I can also factor in the cost of my work on the project. Let us say that it will take me 42 man-hours ( or roughly 1 week of work) to complete this feature. Then it will cost the company 1575$ to produce. The result is a net savings of 2025$!</span>

<span style="font-weight:400;">Going back to my project, since it makes it easier to extend, the cost to implement it will be rather low. If you can quantify how much time it will take to implement your solution, you can provide a more accurate estimate to the business.</span>

<span style="font-weight:400;">The project is designed to make it easier to add new features to our system. This means that it reduces development cost. Additionally, it means that the new feature can make it to the market faster. Do not under-estimate this! Faster Time-to-Market can provide your company a competitive edge.  The edge comes from either by being the first to provide a particular functionality, or by begin able to under-bid competitors. While it can be difficult to provide exact value numbers on this, you can highlight the man-hours saved in development. I find it easiest to understand by providing a comparison to the current process.</span>

<span style="font-weight:400;">To provide a good estimate, I recommend using a current project. Comment on the time it took to implement the part of the feature related to the new project. Then compare it to the time it might have taken using the new project. This provides a tangible example of the value your project creates. </span>

<span style="font-weight:400;">Finally, my project simplifies the logic of linking multiple services. This simplification reduces the risk of errors. To put a value on this, you need the time saved. Start with the current time spend debugging. Then estimate the how much your project would save, based the project's implementation.  My project simplifies by pushing the logic into a more appropriate context. It also allows the using services to dictate the communications they wish to react to. As a result nearly all the current bugs could be eliminated. Not 100% of course, but a sizable chunk, perhaps 70-85%. Using this estimate, you can translate the man-hours saved into dollar value as before.</span>

<span style="font-weight:400;">Translating from software value into Business value isn't always easy. But it is doable. Further, it is quite approachable if you have the right mindset. How am I saving the company money, or how am I earning them more money? Once you have these answers, you can begin the translation into business terms.</span>

<span style="font-weight:400;">To be sure, the estimates you provide when you first start will be a bit optimistic. But with time, practice and experience, they can become more realistic. I am certain that the estimates I provided to my PM were lacking in some respects. But something is better than nothing! And I got to learn a valuable lesson in translation!</span>

<span style="font-weight:400;">If you have a project to translate, I'd be happy to discuss! If you have any pointers, I would appreciate your suggestions! Just send me a message! Good luck and Happy hunting!</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[If someone asked, 'Why do we pay you?' Could you answer them? I recently got some practice translating my work into business value.  The trick is showing them how your work makes them more money!]]></excerpt:encoded>
  <wp:post_id>1250</wp:post_id>
  <wp:post_date>2016-11-29 16:27:03</wp:post_date>
  <wp:post_date_gmt>2016-11-29 22:27:03</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>so-tell-me-why-do-we-pay-you</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="business-meetings"><![CDATA[business meetings]]></category>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29445763915]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_failed_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[O:13:"Keyring_Error":2:{s:6:"errors";a:1:{s:21:"keyring-request-error";a:1:{i:0;O:8:"WP_Error":2:{s:6:"errors";a:1:{s:19:"http_request_failed";a:1:{i:0;s:80:"cURL error 28: Operation timed out after 5001 milliseconds with 0 bytes received";}}s:10:"error_data";a:0:{}}}}s:10:"error_data";a:0:{}}]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>biz_value</title>
  <link>https://danieljscheufler.wordpress.com/2016/11/29/so-tell-me-why-do-we-pay-you/biz_value/#main</link>
  <pubDate>Sun, 27 Nov 2016 19:43:15 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/biz_value.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1297</wp:post_id>
  <wp:post_date>2016-11-27 13:43:15</wp:post_date>
  <wp:post_date_gmt>2016-11-27 19:43:15</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>biz_value</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1250</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/biz_value.jpg</wp:attachment_url>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/?p=1303</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1303</guid>
  <description/>
  <content:encoded><![CDATA[<p style="text-align:center;"><a href="http://zonoff.com/2016/11/29/codebattles-competitive-coding-in-the-workplace/" target="_blank">Competitive Code Battles</a></p>
Someone might have figured out how to make 'code battles' work, without damaging egos, and with reduced likelihood of losing steam.]]></content:encoded>
  <excerpt:encoded><![CDATA[I found this post on the Zonoff Co. blog. They found a way to make internal competitive code battle work for them!]]></excerpt:encoded>
  <wp:post_id>1303</wp:post_id>
  <wp:post_date>2016-12-03 20:22:15</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="code"><![CDATA[code]]></category>
  <category domain="post_tag" nicename="code-battle"><![CDATA[code battle]]></category>
  <category domain="post_tag" nicename="compete"><![CDATA[compete]]></category>
  <category domain="post_tag" nicename="competition"><![CDATA[competition]]></category>
  <category domain="post_tag" nicename="competitive"><![CDATA[competitive]]></category>
  <category domain="category" nicename="knowledge-base"><![CDATA[Knowledge Base]]></category>
  <category domain="post_format" nicename="post-format-link"><![CDATA[Link]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1309]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>knowledge_base</title>
  <link>https://danieljscheufler.wordpress.com/?attachment_id=1309#main</link>
  <pubDate>Sun, 04 Dec 2016 02:18:29 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/12/knowledge_base.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1309</wp:post_id>
  <wp:post_date>2016-12-03 20:18:29</wp:post_date>
  <wp:post_date_gmt>2016-12-04 02:18:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>knowledge_base</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1303</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/12/knowledge_base.jpg</wp:attachment_url>
</item>
<item>
  <title>Where'd my UX go?</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/06/whered-my-ux-go/</link>
  <pubDate>Tue, 06 Dec 2016 23:40:45 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1311</guid>
  <description/>
  <content:encoded><![CDATA[<em>Disclaimer: I am not the happy looking chap in the photo.</em>

<span style="font-weight:400;">I was working on a personal project recently when a realization dawned on me. User Experience Design,also known as UX design, and software design collide more frequently. And not only in the User Interface layer. </span><span style="font-weight:400;">
</span><span style="font-weight:400;">
</span>

<span style="font-weight:400;">Before I get too far, when I talk about UX, I am referring to the experience the user has while attempting to use the device or object, or code. I think this image does an excellent job of describing good UX concisely.</span><span style="font-weight:400;">
</span><span style="font-weight:400;">
</span>

http://i.imgur.com/9LqhOl3.jpg

<span style="font-weight:400;">Link: <a href="http://i.imgur.com/9LqhOl3.jpg" target="_blank">http://i.imgur.com/9LqhOl3.jpg</a>
</span>

<span style="font-weight:400;">It’s pretty easy to tell what UX is like with a Graphic User interface, or a GUI. After all, this is the part everyone touches. If a website is snappy and the layout makes sense, that is good UX. If it is clear how to do the operation you want, without needing to consult the magic talking paperclip, then it is a good UX. But it seems that once you go below the GUI layer, the lessons on good UX vanish.</span>

<span style="font-weight:400;">I was working on a <a href="https://github.com/djscheuf/FluentPyTestAPI" target="_blank">Fluent Testing API for python</a> when I realized it. In <a href="https://github.com/djscheuf/FluentPyTestAPI/tree/master/DeclareATest/v1" target="_blank">version 1</a>, I had all the functionality for this API bound up in a single class. Sure, it limited the import tree, and made it easy for me to develop. For <a href="https://github.com/djscheuf/FluentPyTestAPI/tree/master/DeclareATest/v2" target="_blank">version 2</a>, I decided to pull the functions into separate classes. And while I was writing out some example cases, I realized that this simple code change resulted in an augmented User Experience!</span>

<span style="font-weight:400;">You see, by pulling the various functions into different classes, I allowed the IDE to create better prompts. The better prompts now guide a user of my API through the proper pattern of using my API. Since there were fewer functions to choose from, it is now clearer how to proceed. The user no longer has to consult a lot of documentation. This is a simple example, but it did get me thinking.</span>

<span style="font-weight:400;">
</span><span style="font-weight:400;">In fact, one week prior, I added a Facade to one of my library at work. The Facade simplified interactions with my  Library. Now other software engineers could more readily use my library’s functionality. I am surprised that I didn’t think of it at the time, but APIs are a Software Engineer’s UI layer. As a result, they should be subject to a UX review!</span><span style="font-weight:400;">
</span>

<span style="font-weight:400;">I mentioned earlier that I have noticed that, on the whole, UX degrades as you leave the GUI layer. Two factors are responsible, in my opinion. First, the majority of UX review and work goes into the GUI layer. And this focus makes sense. The vast majority of software interaction is through such a layer. As an aside, finding a UX guy who can talk about UX and about API design can be difficult. I usually have a heck of a time getting time with them to review a GUI design with them!</span>

<span style="font-weight:400;">The Second factor is a lack of discipline. I am not throwing stones here, the first version of my Testing API is example of such a lack! I collected all the functionality in a single class <em><strong>because it was easier for me!</strong></em>  I wanted to get the functionality together and to reduce the import tree. In hindsight this is a silly reason. And yet, it was enough to change my behavior.</span><span style="font-weight:400;">
</span>

<span style="font-weight:400;">So now that I’ve seen the problem, what can I do? Well, I noticed the improvements made in the UX for version 2 by writing up some examples. That is to say, I used it. This is a good start, bu submitting it to user testing would be a better step. After all, as the design I was intimately familiar with the inner workings and the proper usage of the tool. But a fresh user wouldn’t be. And if there is anything I have learned developing software: the user never does exactly what you expect them to.</span>

<span style="font-weight:400;">Besides more user testing, some cross-functional education might help. This recent epiphany put me in mind of a tech talk that I hadn’t finished. You can find the youtube video <a href="https://www.youtube.com/watch?v=aAb7hSCtvGw" target="_blank">here</a></span><span style="font-weight:400;">. I am hoping that revisiting the principles from the talk will continue to improve my designs!</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1311</wp:post_id>
  <wp:post_date>2016-12-06 17:40:45</wp:post_date>
  <wp:post_date_gmt>2016-12-06 23:40:45</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>whered-my-ux-go</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="api"><![CDATA[API]]></category>
  <category domain="post_tag" nicename="api-design"><![CDATA[API Design]]></category>
  <category domain="post_tag" nicename="gui"><![CDATA[GUI]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="ui"><![CDATA[UI]]></category>
  <category domain="post_tag" nicename="user-experience"><![CDATA[User Experience]]></category>
  <category domain="post_tag" nicename="user-interface"><![CDATA[User Interface]]></category>
  <category domain="post_tag" nicename="ux"><![CDATA[UX]]></category>
  <category domain="post_tag" nicename="ux-design"><![CDATA[UX Design]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1312]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29707411649]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6212047971387789312&type=U&a=Jw6D]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ux_joke</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/06/whered-my-ux-go/ux_joke/#main</link>
  <pubDate>Tue, 06 Dec 2016 23:32:20 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/12/ux_joke.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1312</wp:post_id>
  <wp:post_date>2016-12-06 17:32:20</wp:post_date>
  <wp:post_date_gmt>2016-12-06 23:32:20</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>ux_joke</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1311</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/12/ux_joke.jpg</wp:attachment_url>
</item>
<item>
  <title>office_politics</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/13/do-performance-reviews-have-to-be-political/office_politics/#main</link>
  <pubDate>Tue, 13 Dec 2016 22:24:32 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/12/office_politics.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1353</wp:post_id>
  <wp:post_date>2016-12-13 16:24:32</wp:post_date>
  <wp:post_date_gmt>2016-12-13 22:24:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>office_politics</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1330</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/12/office_politics.jpg</wp:attachment_url>
</item>
<item>
  <title>programming-1857236_1280</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/27/code-is-read-more-often-than-it-is-written/programming-1857236_1280/#main</link>
  <pubDate>Tue, 27 Dec 2016 22:20:36 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/12/programming-1857236_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1364</wp:post_id>
  <wp:post_date>2016-12-27 16:20:36</wp:post_date>
  <wp:post_date_gmt>2016-12-27 22:20:36</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>programming-1857236_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1359</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/12/programming-1857236_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>mindmap-1469592_960_720</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/03/better-tools-or-better-skills/mindmap-1469592_960_720/#main</link>
  <pubDate>Tue, 03 Jan 2017 23:12:33 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/01/mindmap-1469592_960_720.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1371</wp:post_id>
  <wp:post_date>2017-01-03 17:12:33</wp:post_date>
  <wp:post_date_gmt>2017-01-03 23:12:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>mindmap-1469592_960_720</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1367</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/01/mindmap-1469592_960_720.png</wp:attachment_url>
</item>
<item>
  <title>cross-1507703_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/10/resuscitating-the-dread-word-agile/cross-1507703_1280/#main</link>
  <pubDate>Tue, 10 Jan 2017 22:35:05 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/01/cross-1507703_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1382</wp:post_id>
  <wp:post_date>2017-01-10 16:35:05</wp:post_date>
  <wp:post_date_gmt>2017-01-10 22:35:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cross-1507703_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1373</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/01/cross-1507703_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>barn-214639_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/17/amish-software/barn-214639_1280/#main</link>
  <pubDate>Tue, 17 Jan 2017 21:58:05 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/01/barn-214639_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1389</wp:post_id>
  <wp:post_date>2017-01-17 15:58:05</wp:post_date>
  <wp:post_date_gmt>2017-01-17 21:58:05</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>barn-214639_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1387</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/01/barn-214639_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>children-593313_1920</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/31/if-you-give-a-dev-a-board-game/children-593313_1920/#main</link>
  <pubDate>Tue, 31 Jan 2017 15:42:04 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/01/children-593313_1920.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1424</wp:post_id>
  <wp:post_date>2017-01-31 09:42:04</wp:post_date>
  <wp:post_date_gmt>2017-01-31 15:42:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>children-593313_1920</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1398</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/01/children-593313_1920.jpg</wp:attachment_url>
</item>
<item>
  <title>dice-1265633_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/02/07/dungeons-and-dragons-and-leadership-training/dice-1265633_1280/#main</link>
  <pubDate>Wed, 08 Feb 2017 00:13:13 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/02/dice-1265633_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1436</wp:post_id>
  <wp:post_date>2017-02-07 18:13:13</wp:post_date>
  <wp:post_date_gmt>2017-02-08 00:13:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>dice-1265633_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1430</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/02/dice-1265633_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>boat-606187_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/02/14/having-no-fear-for-the-outcome-of-1000-battles/boat-606187_1280/#main</link>
  <pubDate>Tue, 14 Feb 2017 22:31:33 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/02/boat-606187_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1447</wp:post_id>
  <wp:post_date>2017-02-14 16:31:33</wp:post_date>
  <wp:post_date_gmt>2017-02-14 22:31:33</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>boat-606187_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1439</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/02/boat-606187_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>cpp_skill</title>
  <link>https://danieljscheufler.wordpress.com/about/education/cpp_skill/#main</link>
  <pubDate>Sat, 25 Feb 2017 23:44:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/cpp_skill.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1454</wp:post_id>
  <wp:post_date>2017-02-25 17:44:24</wp:post_date>
  <wp:post_date_gmt>2017-02-25 23:44:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>cpp_skill</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1212</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/cpp_skill.png</wp:attachment_url>
</item>
<item>
  <title>c_skill</title>
  <link>https://danieljscheufler.wordpress.com/about/education/c_skill/#main</link>
  <pubDate>Sat, 25 Feb 2017 23:44:25 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/c_skill.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1455</wp:post_id>
  <wp:post_date>2017-02-25 17:44:25</wp:post_date>
  <wp:post_date_gmt>2017-02-25 23:44:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>c_skill</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1212</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/c_skill.png</wp:attachment_url>
</item>
<item>
  <title>java_skill</title>
  <link>https://danieljscheufler.wordpress.com/about/education/java_skill/#main</link>
  <pubDate>Sat, 25 Feb 2017 23:44:25 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/java_skill.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1456</wp:post_id>
  <wp:post_date>2017-02-25 17:44:25</wp:post_date>
  <wp:post_date_gmt>2017-02-25 23:44:25</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>java_skill</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1212</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/java_skill.png</wp:attachment_url>
</item>
<item>
  <title>python_skill</title>
  <link>https://danieljscheufler.wordpress.com/about/education/python_skill/#main</link>
  <pubDate>Sat, 25 Feb 2017 23:44:26 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/python_skill.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1457</wp:post_id>
  <wp:post_date>2017-02-25 17:44:26</wp:post_date>
  <wp:post_date_gmt>2017-02-25 23:44:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>python_skill</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1212</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/python_skill.png</wp:attachment_url>
</item>
<item>
  <title>logo-uh-wordmark-primary-color</title>
  <link>https://danieljscheufler.wordpress.com/about/education/logo-uh-wordmark-primary-color/#main</link>
  <pubDate>Sat, 25 Feb 2017 23:52:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2016/11/logo-uh-wordmark-primary-color.gif</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1461</wp:post_id>
  <wp:post_date>2017-02-25 17:52:24</wp:post_date>
  <wp:post_date_gmt>2017-02-25 23:52:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>logo-uh-wordmark-primary-color</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1212</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2016/11/logo-uh-wordmark-primary-color.gif</wp:attachment_url>
</item>
<item>
  <title>washington-dc-739633_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/03/14/software-engineers-are-actually-creatives/washington-dc-739633_1280/#main</link>
  <pubDate>Wed, 15 Mar 2017 00:04:41 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/03/washington-dc-739633_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1469</wp:post_id>
  <wp:post_date>2017-03-14 19:04:41</wp:post_date>
  <wp:post_date_gmt>2017-03-15 00:04:41</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>washington-dc-739633_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1467</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/03/washington-dc-739633_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>bridge-53769_1280</title>
  <link>https://danieljscheufler.wordpress.com/2017/04/11/for-the-love-of-the-user/bridge-53769_1280/#main</link>
  <pubDate>Wed, 22 Mar 2017 21:09:53 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/03/bridge-53769_1280.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1485</wp:post_id>
  <wp:post_date>2017-03-22 16:09:53</wp:post_date>
  <wp:post_date_gmt>2017-03-22 21:09:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>bridge-53769_1280</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1484</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/03/bridge-53769_1280.jpg</wp:attachment_url>
</item>
<item>
  <title>320565</title>
  <link>https://danieljscheufler.wordpress.com/320565/</link>
  <pubDate>Tue, 18 Apr 2017 17:43:43 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2017/04/320565.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1490</wp:post_id>
  <wp:post_date>2017-04-18 12:43:43</wp:post_date>
  <wp:post_date_gmt>2017-04-18 17:43:43</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>320565</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2017/04/320565.png</wp:attachment_url>
</item>
<item>
  <title>database-search-2797375_640</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/13/til-how-to-debug-nhibernate-queries/database-search-2797375_640/#main</link>
  <pubDate>Sat, 03 Mar 2018 19:04:51 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2018/03/database-search-2797375_640.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1496</wp:post_id>
  <wp:post_date>2018-03-03 13:04:51</wp:post_date>
  <wp:post_date_gmt>2018-03-03 19:04:51</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>database-search-2797375_640</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1495</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2018/03/database-search-2797375_640.png</wp:attachment_url>
</item>
<item>
  <title>Today I learned</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/03/today-i-learned/</link>
  <pubDate>Sat, 03 Mar 2018 19:52:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2018/03/03/today-i-learned/</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1508</wp:post_id>
  <wp:post_date>2018-03-03 13:52:00</wp:post_date>
  <wp:post_date_gmt>2018-03-03 19:52:00</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>today-i-learned</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>2</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="collections"><![CDATA[Collections]]></category>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[category]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[24750899]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[taxonomy]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title/>
  <link>https://danieljscheufler.wordpress.com/2018/03/03/1510/</link>
  <pubDate>Sat, 03 Mar 2018 19:52:31 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/2018/03/03/1510/</guid>
  <description/>
  <content:encoded><![CDATA[ ]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1510</wp:post_id>
  <wp:post_date>2018-03-03 13:52:31</wp:post_date>
  <wp:post_date_gmt>2018-03-03 19:52:31</wp:post_date_gmt>
  <wp:comment_status>closed</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>1510</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>1</wp:menu_order>
  <wp:post_type>nav_menu_item</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="nav_menu" nicename="resume"><![CDATA[Resume]]></category>
  <wp:postmeta>
    <wp:meta_key>_publicize_pending</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_type</wp:meta_key>
    <wp:meta_value><![CDATA[post_type]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_menu_item_parent</wp:meta_key>
    <wp:meta_value><![CDATA[0]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object_id</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_object</wp:meta_key>
    <wp:meta_value><![CDATA[page]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_target</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_classes</wp:meta_key>
    <wp:meta_value><![CDATA[a:1:{i:0;s:0:"";}]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_xfn</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_menu_item_url</wp:meta_key>
    <wp:meta_value><![CDATA[]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>react-512</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/03/til-how-to-manually-redirect-within-react-router/react-512/#main</link>
  <pubDate>Sat, 24 Mar 2018 18:56:17 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2018/03/react-512.png</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1513</wp:post_id>
  <wp:post_date>2018-03-24 13:56:17</wp:post_date>
  <wp:post_date_gmt>2018-03-24 18:56:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>react-512</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1512</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2018/03/react-512.png</wp:attachment_url>
</item>
<item>
  <title>Retro_Raygun_by_donsolo</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/10/til-how-to-add-raygun-to-a-react-app/retro_raygun_by_donsolo/#main</link>
  <pubDate>Sat, 24 Mar 2018 19:08:08 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2018/04/retro_raygun_by_donsolo.jpg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1516</wp:post_id>
  <wp:post_date>2018-03-24 14:08:08</wp:post_date>
  <wp:post_date_gmt>2018-03-24 19:08:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>retro_raygun_by_donsolo</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1515</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2018/04/retro_raygun_by_donsolo.jpg</wp:attachment_url>
</item>
<item>
  <title>TIL... How to set Entity Id without using Reflection</title>
  <link>https://danieljscheufler.wordpress.com/?p=1520</link>
  <pubDate>Tue, 24 Apr 2018 20:00:23 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1520</guid>
  <description/>
  <content:encoded><![CDATA[While writing some integration tests using an In-Memory Database, I found I needed to set the id of an entity post-construction. Normally I'd use Reflection for this, since the Property is protected.
<pre><span style="min-height:10pt;font-family:Consolas;color:#0000ff;font-size:9pt;">var</span> <span style="min-height:10pt;font-family:Consolas;font-size:9pt;color:#333333;">prop = depOption.GetType().GetProperty(</span><span style="min-height:10pt;font-family:Consolas;color:#a31515;font-size:9pt;">"Id"</span><span style="min-height:10pt;font-family:Consolas;font-size:9pt;color:#333333;">);</span>

<span style="min-height:10pt;font-family:Consolas;font-size:9pt;color:#333333;">            prop.SetValue(depOption, 2);</span>

<span style="min-height:10pt;font-family:Consolas;font-size:9pt;color:#333333;">           </span> <span style="min-height:10pt;font-family:Consolas;color:#0000ff;font-size:9pt;">return</span> <span style="min-height:10pt;font-family:Consolas;font-size:9pt;color:#333333;">depOption;</span></pre>
<div></div>
To my joy, I was informed there is another option! Use the EntitySetter like so:
<pre><strong><span style="font-weight:bold;font-family:Monaco;font-size:9pt;color:#333333;">EntitySetter.SetIdOf(object, desiredObjectId);</span></strong></pre>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1520</wp:post_id>
  <wp:post_date>2018-04-24 15:00:23</wp:post_date>
  <wp:post_date_gmt>2018-04-24 20:00:23</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-set-entity-id-without-using-reflection</wp:post_name>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="csharp"><![CDATA[csharp]]></category>
  <category domain="post_tag" nicename="entity-framework"><![CDATA[entity-framework]]></category>
  <category domain="post_tag" nicename="integration-tests"><![CDATA[integration-tests]]></category>
  <category domain="post_tag" nicename="reflection"><![CDATA[reflection]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>HoustonTechFest</title>
  <link>https://danieljscheufler.wordpress.com/2018/05/08/spring-2018-houston-techfest-slides/houstontechfest/#main</link>
  <pubDate>Mon, 07 May 2018 22:42:01 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">http://danieljscheufler.files.wordpress.com/2018/05/houstontechfest.jpeg</guid>
  <description/>
  <content:encoded><![CDATA[]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1533</wp:post_id>
  <wp:post_date>2018-05-07 17:42:01</wp:post_date>
  <wp:post_date_gmt>2018-05-07 22:42:01</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>closed</wp:ping_status>
  <wp:post_name>houstontechfest</wp:post_name>
  <wp:status>inherit</wp:status>
  <wp:post_parent>1531</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>attachment</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <wp:attachment_url>https://danieljscheufler.files.wordpress.com/2018/05/houstontechfest.jpeg</wp:attachment_url>
</item>
<item>
  <title>Oh! Your thoughts are showing...</title>
  <link>https://danieljscheufler.wordpress.com/?p=1542</link>
  <pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1542</guid>
  <description/>
  <content:encoded><![CDATA[I recently read an article posted on <a href="https://www.linkedin.com/pulse/how-talk-developer-part-1-jacob-silva/" target="_blank" rel="noopener">LinkedIn</a>, discussing the idea that <em>'Developers are bad communicators'. </em>I encourage you to read it through before continuing.

Personally, I opened the article prepared to defend the poor developer against a needless accusation. I was pleasantly surprised , that it was wholly unnecessary. Further I found the authors discussion to be quite observant. He cut straight to the heart of the issue.

In his example, a manager had come to ask why it was going to take so long for <em>just a website. </em>On the face, that is a reasonable question., though it hides a certain venom. Think for a moment, if someone came to you and ask why your work took any time at all?

Just because they don't understand doesn't mean that they should be so unkind as to insinuate that you are wasting their time. And what's scary is just how easy it is to make this mistake. We do it all the time.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1542</wp:post_id>
  <wp:post_date>2018-06-03 20:28:33</wp:post_date>
  <wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name/>
  <wp:status>draft</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
</item>
<item>
  <title>Do Performance reviews have to be political?</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/13/do-performance-reviews-have-to-be-political/</link>
  <pubDate>Tue, 13 Dec 2016 22:28:10 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1330</guid>
  <description/>
  <content:encoded><![CDATA[&nbsp;

<span style="font-weight:400;">I was reading Hacker News recently, when I found this <a href="https://news.ycombinator.com/item?id=13130547" target="_blank">question</a></span><span style="font-weight:400;">. The topic was performance review tools. Several responses indicated that managers generally misused the tools. Others indicated that it was the corporate culture that dominated whether the managers misused the tool or not.</span>

<span style="font-weight:400;">One response in particular linked to <a href="https://www.tamu.edu/faculty/payne/PA/Longenecker%20et%20al.%201987.pdf" target="_blank">a study by Texas A&amp;M from 1987</a>. This particular study reviewed the impact of Politics on the Review process. They interviewed  60 manager and executives from 7 major corporations across 11 functional areas. They recorded the semi-structured interviews, and from the interviews they captures 1400 quotes. If 72% of the interviews contains the topic, they bundles those cards together as a category. After establishing the categories, they performed statistical analysis on the comments to find correlations and trends.</span>

<span style="font-weight:400;">Surprisingly, the study found that the <em>“accuracy is not the primary concern of the practicing executive in appraising subordinates...”</em>[Study pg. 9, the conclusion], contrary to popular belief. Instead managers used the review to <em>"keep things cooking"</em>[Study pg. 3, a manager quote], or motivate their employees. Naturally, then the researchers suggested that the company should then not try to eliminate politics from the equation. <em>"The goal, then, is not to arbitrarily and ruthlessly try to eliminate politics but, instead, to effectively manage the role politics plays in employee appraisal."</em> [Study pg. 9, the conclusion]</span>

<span style="font-weight:400;">However the study does have one correlation between a manager’s action and the accuracy of their review. Specifically, Managers who spent time giving feedback on a more frequent corresponded to more accurate reviews. It would be reasonable to assume that the review is more accurate because the manager spends more time with their employees, and therefore they are more aware of the employee’s actual accomplishments.</span>

<span style="font-weight:400;">This rapid feedback cycle reminds me heavily of Agile software development. The main principle behind agile is rapid iteration and feedback. The ideas is that small feedback cycles produce better software because you learn more quickly and can more easily adapt to changing needs. </span>

<span style="font-weight:400;">With this in mind, I suggest that the increased accuracy of the reviews is not in fact due to the manager’s increased awareness. Instead, It is because the manager no longer needs to use the review as their primary motivational tool. By frequently offering feedback the manager is able to address problems early, when they require little effort. They are able to praise the recent good actions more quickly, keeping morale high. As a result, the manager can use the review as an actual measurement of the employee’s accomplishments, instead of having to use it as a lever to move them.</span>

<span style="font-weight:400;">People are right to observe that performance reviews are not as accurate as they should be. The study agrees with this observation. The study further indicates the cause may be from managers using the performance review as a motivational tool. Using the review this way results in increased political 'adjustment' of the review. In the end, we are left with lower accuracy and the general suspicion of performance reviews.</span>

<span style="font-weight:400;">The study also indicates there may be ways to encourage the use of accurate performance reviews again. Managers who provide more frequent feedback were correlated to more accurate reviews. This increased accuracy comes from having another tool to fill the communication and motivational need. This allows the review to serve its original purpose.</span>]]></content:encoded>
  <excerpt:encoded><![CDATA[Most performance reviews are politically influenced? A TAMU study confirms this, but also offers some insight into how to reduce that influence. Some manager's action were correlated to increased accuracy. I have a theory about why.]]></excerpt:encoded>
  <wp:post_id>1330</wp:post_id>
  <wp:post_date>2016-12-13 16:28:10</wp:post_date>
  <wp:post_date_gmt>2016-12-13 22:28:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>do-performance-reviews-have-to-be-political</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[AGILE]]></category>
  <category domain="post_tag" nicename="agile-methodology"><![CDATA[Agile Methodology]]></category>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="research"><![CDATA[research]]></category>
  <category domain="post_tag" nicename="review"><![CDATA[review]]></category>
  <category domain="post_tag" nicename="statistics"><![CDATA[statistics]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[29958703035]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6214566415840669696&type=U&a=LTsN]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>‘Code is read more often than it is written’</title>
  <link>https://danieljscheufler.wordpress.com/2016/12/27/code-is-read-more-often-than-it-is-written/</link>
  <pubDate>Tue, 27 Dec 2016 22:22:49 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1359</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-weight:400;">At first glance, this would seem an obvious statement. And it is in a way. When Python language creator Guido Van Rossum created Python, he did so with </span><a href="https://www.python.org/dev/peps/pep-0008/"><span style="font-weight:400;">this thought in mind</span></a><span style="font-weight:400;">. As a result, the culture of Python is partly molded around </span><a href="https://www.python.org/dev/peps/pep-0020/"><span style="font-weight:400;">“readability counts”</span></a><span style="font-weight:400;">.</span>

<span style="font-weight:400;">The more I thought that statement, the more I realized the marvel it held. ‘Code is read more often than it is written’. If asked to choose between reading and writing, I would have said the same. And yet I realized now, that much of the code I have read, and some of the code I have written does not show this. I wondered, why did my behavior, and that of my peers, not match what I knew to be true? If we believed that code was read more often, they why is so much of our code so hard to read?</span>

<span style="font-weight:400;">At the core, our behavior remains unchanged because this quote is only an observation. There is not imperative contained in it. Without the means of an imperative, the observation cannot turn into an action. Instead the reader would need to derive <em>‘Code ought to be easily read’</em> from <em>‘Code is read more often than it is written’</em>.  I trust most would be equal to the task, given a basic desire to optimize.</span>

<span style="font-weight:400;">When I first discovered this, I did not pay it nearly enough attention. I went blithely on my way. Some time later, during the quiet of a vacation, the thought came storming back. I was left dumbfounded. How could I have not seen it earlier? I realize now, it was because I had not given my self enough time to think. With the lighter load during vacation, I was able to think, and so naturally the thought came.</span>

<span style="font-weight:400;">This moment of serendipity also encouraged other considerations. Specifically, what other imperatives had I missed with casual observations? I quickly realized this is dark territory. It would be difficult to turn every observation into a possible imperative. Worse still, these observations might be biases, leading to bad imperatives. Or they might be too weak to lead to a meaningful imperative.</span>

<span style="font-weight:400;">In all cases, the question remains, what have I missed? I believe, especially in software, that we are caught in a rush to develop, to implement, and to finish. As a result, we do not give ourselves time to ask, ‘Is this the best way?’ Business demands that we move with purpose, and that is a reasonable demand. But for the best results, we need time to consider if we go in a way that will deliver us to the goal we seek. I will continue to look for miss-able observations may turn out to change everything.</span>

<span style="font-weight:400;">Addendum:</span>

<span style="font-weight:400;">While drafting this article, two other examples of <em>‘observation leading to imperative’</em> appeared. The first was fictional, from <span style="text-decoration:underline;">Foundation and Earth</span> by Isaac Asimov. In the book, the protagonist remarks with surprise at the neural interface to a computer. Instead of being an over-the-head affair, it was through the hands. His realization was that humans sense and interact with the world through their hands. I may revisit this in a later branch of this discussion on design.</span>

<span style="font-weight:400;">The second example, sprouted from the first, specifically interaction and design. Recently the IoT movement has brought integration to our homes. In particular, the voice-interaction, such as Amazon’s Echo or Google Now. I observed that these devices extended a natural principle:  <em>‘Humans use their voice to make their wishes known.’</em></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[‘Code is read more often than it is written’ At first glance, this would seem an obvious statement. And it is in a way. This quote offers some insight into common facts we all overlook.]]></excerpt:encoded>
  <wp:post_id>1359</wp:post_id>
  <wp:post_date>2016-12-27 16:22:49</wp:post_date>
  <wp:post_date_gmt>2016-12-27 22:22:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>code-is-read-more-often-than-it-is-written</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="user-experience"><![CDATA[User Experience]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[142673452]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6219638500740919296&type=U&a=DfXJ]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>39</wp:comment_id>
    <wp:comment_author><![CDATA[The Alsys Ada commenting style &#8211; Grenouille Bouillie]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://grenouillebouillie.wordpress.com/2017/12/09/the-alsys-ada-commenting-style/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.89.220</wp:comment_author_IP>
    <wp:comment_date>2017-12-11 01:07:04</wp:comment_date>
    <wp:comment_date_gmt>2017-12-11 07:07:04</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] The way I remember it, someone had actually studied how people read code using eye-tracking cameras, and key Alsys coding style guidelines were a result of that study, being intended to minimize eye movement, and make it easy for the eye to quickly locate important pieces of the code. In short, the coding standard was designed to make reading easier and faster based on actual scientific data. And that matters, because code is read much more often than it is written. [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1512981134.512916088104248046875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1512976024.4461081027984619140625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
  <wp:comment>
    <wp:comment_id>192</wp:comment_id>
    <wp:comment_author><![CDATA[Two years with CloudFormation: lessons learned - Sander Knape]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://sanderknape.com/2018/08/two-years-with-cloudformation-lessons-learned/</wp:comment_author_url>
    <wp:comment_author_IP>54.244.63.122</wp:comment_author_IP>
    <wp:comment_date>2018-08-10 02:42:44</wp:comment_date>
    <wp:comment_date_gmt>2018-08-10 07:42:44</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] if you feel like your CloudFormation needs some explanation, definitely use a comment. Remember: code is read much more often than it is written, so whatever you can write down once to help yourself and others dozens or hundreds of times in the [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>0</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1533891047.667737;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1533886965.811513;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Better tools, or Better skills?</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/03/better-tools-or-better-skills/</link>
  <pubDate>Tue, 03 Jan 2017 23:15:10 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1367</guid>
  <description/>
  <content:encoded><![CDATA[I have read many posts and discussions on how to run better meetings. I’ve even written some myself. I was reviewing another one recently, with a novel suggestion. The author advocated the use of MindMaps for organizing and running meetings. His title was <a href="https://spin.atomicobject.com/2016/12/19/better-meeting-tools/" target="_blank">‘For Better Meetings, Use Better Tools’</a>. I feel this title may may actually undercut what makes his meetings great.

To be sure, a good tool can vastly improve the flow of a meeting. Powerpoint can add weight to a good presentation. I’ve also seen it reflect the presenter's style in a bad way. A tool enables a skilled user to produce great value… while it does little to help the unskilled user.

In the same way, a skill meeting facilitator can reap a great harvest from an improved tool. But an unskilled facilitator may not profit much by a better tool. By analyzing the author’s discussion, we can safely say that he is a seasoned and practiced meeting facilitator. Thus finding a tool which jives well with his personal style and with the culture of his company would pay great dividends!

That is why I think his title may be misleading. It is correct to indicated the relationship between good tools and good meetings. But above and beyond that relationship, good meetings require good facilitators. But here’s the catch, facilitating meetings is a skill. Moreover, it’s not a skill taught in class. Instead one can learn it either as an apprentice, or by the 'school of hard-knocks'.

From my studies, and my own experience, there are a few common responsibilities of the meeting facilitator. As mentioned by the author, work begins well before a meeting. The facilitator needs to create an agenda to drive the meeting by. And whether by sharing a MindMap with the group, or a series of bullet points in an email, having this agenda is a must. The agenda provides a guiding framework for the meeting. By having it ready in advance, you allow your participants to prepare themselves. As a result, you will waste less time ‘figuring out’ what information you need.   This pre-meeting preparation is the first duty of the facilitator.

The second duty of the facilitator is to <i>facilitate </i>the meeting. I still haven’t master this. To run an effective meeting, you need to manage clock, while still allowing everyone to be heard. For a meeting to be effective, the participants need to be engaged. They also must buy-in to any decisions made during the meeting. The facilitator needs a good sense for when a topic has had enough discussion. They must keep the time spent on each topic more or less in line with its importance. I’ve found that a good stopping point is when two or three action items become apparent for a given topic. Usually, that means more information is needed. Or that we've made the necessary decision.

Finally, the last duty a facilitator is to report the decisions and discussion of a meeting. Here the author’s suggestion is actually quite helpful. Since he had already shared the agenda, and the agenda was used to record the meeting minutes and action items, he merely ensure the information on the MindMap is correct. For my part, I have found that a bullet point email usually works. In other cases, I have posted the presentation and a collection of my notes. I may try the mind map in the future.

A good meeting facilitator is a god-sent blessing to all who attend their meetings. And while it is not a commonly taught skill, one can learn it through diligent practice and some research. By far, the best thing to do is find someone who’s meeting style you admire, and learn from them. Failing that, spread your wings and try different styles, knowing some won’t work. Most importantly, seek feedback! Your attendees can tell you if they felt heard, and whether they felt the meeting was effective. This feedback will be invaluable for self-improvement. With practice, feedback, and new styles/tool to try, nearly anyone can become an effective meeting facilitator.]]></content:encoded>
  <excerpt:encoded><![CDATA[Better tools, or Better skills? Which makes for a better meeting? In truth, the guy standing at the front can make or break a meeting. Anyone can run a meeting, but it takes practice to truly facilitate one!]]></excerpt:encoded>
  <wp:post_id>1367</wp:post_id>
  <wp:post_date>2017-01-03 17:15:10</wp:post_date>
  <wp:post_date_gmt>2017-01-03 23:15:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>better-tools-or-better-skills</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="business-meetings"><![CDATA[business meetings]]></category>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="effective"><![CDATA[effective]]></category>
  <category domain="post_tag" nicename="effective-communication"><![CDATA[effective communication]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="meetings"><![CDATA[meetings]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1371]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[374420109]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6222188397960716288&type=U&a=Exxh]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Resuscitating the dread word 'Agile'</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/10/resuscitating-the-dread-word-agile/</link>
  <pubDate>Tue, 10 Jan 2017 22:37:08 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1373</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">As 2016 drew to a close, there were numerous articles covering the state of the software development community. [For example <a href="https://dorinlazar.ro/the-sorry-state-of-the-programming-world-as-of-the-end-of-2016-ad/" target="_blank">here</a></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">, and <a href="https://medium.com/@bryanedds/living-in-the-age-of-software-fuckery-8859f81ca877#.lybao9xtx" target="_blank">here</a></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">] In several cases, the authors pointed out the sorry state of 'Agile'. In fact, this trend of developers hating ‘Agile’ has been growing for quite some time. Reading those articles prompted some self-reflection. Obviously, Business management does ‘Agile’ differently. It is a set of prescribed practices, since that is what they understand. And of course robbed of its vigor, this ‘Agile’ is less effective. But we, software developers, do it wrong sometimes as well. We may have bought into the wrong ideas. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">As I wrestled with myself over Agile, a larger picture began to emerge. When I entered the workforce, I joined a company that did <a href="https://pragdave.me/blog/2014/03/04/time-to-kill-agile/" target="_blank">‘Agile’</a>. As I learned more about the original principles of the practice I became a supporter. Note I say </span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><i>original principles</i></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">. The more of a supporter I became, the more I realized my company did not quite get Agile right. We have the form, but lacked the true substance of it. Now, it wasn’t all bad, there were pockets of true agility here and there, but en masse, we missed it. As a result I started to burn out. I had only been working for half a year when I began to tire. The discontinuity between what we professed, and what we actually did was a heavy burden. So far, so normal as disillusioned developers go. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Now, my company did provide a good opportunity for discussion. Specifically, they supported a developer’s book club. And of course ‘Agile’ methodologies would be the topic of discussion from time to time. But when I would bring up some place where I saw the company missing the goal of agility, the observation was generally dismissed. There were a few who did heard and would later come and discuss with me. They usually would come to offer their own observations to help me see what I had missed. Each of these kind souls all had a common trait, they were willing to look at failure for what it was. They didn’t deny its occurrence, and they always looked for some nugget to learn from. From those leaders, I learned a great deal. I would return to them and seek advice during the rest of my time at the company. In my opinion, they understood the true core of agility, despite being unable to practice it because of organizational constraints.
</span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">With the advice of these leaders in my ear, I searched. And as I searched I realized that we, as software developers, need to branch out more. To find insight not just from our insular community, but also from the world at large. After all we are humans, and the world has been analyzing humans for centuries! During one such exploratory expedition, I found <a href="http://www.artofmanliness.com/2014/09/15/ooda-loop/" target="_blank">the OODA loop</a>. As described, the loop is this:</span></span>
<p style="text-align:center;"><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Observe : Review your facts and information</span></span></p>
<p style="text-align:center;"><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Orient : Is something off? How so? Frame your thoughts and discussion</span></span></p>
<p style="text-align:center;"><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Decide : Based on your thoughts, and your facts, what should you do? Make it a small step.</span></span></p>
<p style="text-align:center;"><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Act : Act out your decision.</span></span></p>
<p style="text-align:center;"><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><em>Repeat</em> : Repeat process ad nauseum, until you have reached your goal/destination</span></span></p>
<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">To any supporter of the principles of agile software development, these steps ought to look familiar. It is the same core of iteration with small steps. The very same principle found outside of software development for the same purpose: reach your goal faster. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">But here is where Business influenced the ‘Agile’ practice in a negative sense. Review the loop. It never mentioned the idea that all actions must lead </span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><i>directly</i></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"> to your goal. In fact it appears to assume that some steps won’t be optimal. Just like the original principles for agile software development. But in a business context, such a step can prove costly. If you make a step that doesn’t lead to results, then for a business the cost of the step is lost. So naturally business would want to avoid lossy steps and ensure that they take just the right ones. So we end up with strong Project/Product Managers, and non-autonomous engineers. And from a Business stance, this is excellent. It is safe, and much more certain. And explaining it to any higher-up is infinitely easier. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">It is also stagnant, and impotent, and ineffective. By the very act of achieving safety, the methodology loses its potency. The principles for agile software development imply, expect, and I would go so far as to say requires, risk. The original agile allows, and expects some of the steps to be imperfect. In fact, the first step is supposed to be just a guess. But it is time-boxed so that we can learn from it while the ideas are still fresh in our mind! If we don’t risk anything in a step, how can we gain anything? In agile, there are not ‘unsuccessful’ steps. That is not blind optimizing or and new-age BS. Instead it is a deep understanding of what we are buying with each step. With each step, we either are buying customer approval for the developed feature. Or we are buying knowledge of our customers. And this isn’t just any knowledge we are buying. It is a personal and contextualized knowledge that our customer provides back to us. We pay to learn in small, highly contextualized, ‘as close to the real thing as possible’ bits of knowledge. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">But before I move on, there is one other detail in which Business Agile, and original agile differ. In the original, we do not assume we know what the customer wants. We expect to find it though experimentation and missteps. We start with inaccuracy, and move towards accuracy. In Business Agile, the Product and Project Manager ‘know’ what the customer wants. We start with accuracy and have nowhere further to go. The Iteration is simple and convenient block of man-hours. It allows them to estimation the time it will take to complete the feature we <em>‘know’</em> the customer wants.</span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">It would seem to me that Business has forgotten a value we had given to us in childhood. After all, don’t we spend nearly the first two decades of our lives in learning? In trading time for knowledge? Hasn’t our society decided that it is of value to ensure everyone has some common understanding? I think Business has fallen into its current state of ‘Agile’ because it misunderstands what it is buying. It is not buying software, at least not directly. The original agile aims to provide strategic knowledge. What if we shifted our thinking about agile? Instead of purchasing a static product, we are acquiring and applying strategic knowledge. We could reinvigorate the practices that have been robbed of their efficacy. </span></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[Every developer knows business does 'Agile' different. It's not quite what the originators had in mind. But maybe this is because they misunderstood what the agile principles provided? Perhaps we can resuscitate that dreaded word 'Agile'.]]></excerpt:encoded>
  <wp:post_id>1373</wp:post_id>
  <wp:post_date>2017-01-10 16:37:08</wp:post_date>
  <wp:post_date_gmt>2017-01-10 22:37:08</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>resuscitating-the-dread-word-agile</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[AGILE]]></category>
  <category domain="post_tag" nicename="agile-methodology"><![CDATA[Agile Methodology]]></category>
  <category domain="post_tag" nicename="agility"><![CDATA[agility]]></category>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1382]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[619918595]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6224715545414029312&type=U&a=AZog]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>21</wp:comment_id>
    <wp:comment_author><![CDATA[Amish Software | Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2017/01/17/amish-software/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.101.235</wp:comment_author_IP>
    <wp:comment_date>2017-01-17 16:00:58</wp:comment_date>
    <wp:comment_date_gmt>2017-01-17 22:00:58</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[&#8230;] Resuscitating the dread word &#8216;Agile&#8217; [&#8230;]]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1484690459.31140995025634765625;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1484690803</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1484690803.6748049259185791015625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Amish Software</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/17/amish-software/</link>
  <pubDate>Tue, 17 Jan 2017 22:00:53 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1387</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;"><a href="https://danieljscheufler.wordpress.com/2017/01/10/resuscitating-the-dread-word-agile/" target="_blank">Last week</a>, I spoke about ‘Resuscitating the dread word ‘Agile’ ‘. The core of that post was that Business does ‘Agile’ wrong. Business misunderstands what it is buying when it pursues the ‘Agile’ practices. Business thinks it is buying a software product. But what agile provides is usually strategic information about customer desires. These ideas continued to boil in my brain when another thought hit me. The software Industry is still very young. We’ve only been making software since we had computers. By contrast, we’ve been making furniture much, much longer. Like since we’ve had agriculture…</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">As a result, we haven’t had time to discover suitable manufacturing patterns. That being said, many businesses are seeking these patterns from other industries, for example furniture or automobile manufacturing. Software Businesses have been searching for ways to apply the old practices in an effort to get a handle on this new beast.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">From what I’ve seen, read, or heard, there are a handful of predominant patterns. Today I want to talk about two archetypes that I have experienced. The first pattern follows my previous post. It is the Business ‘Agile’ way of development. We get short, controlled, well-measured, impotent steps. We know when we’ll finish, because we can measure the man-hours it will take to produce the rest of the pieces. Like knowing how many steps are left in the process on a factory line. Each man has a task he must do on the item, and then he hands it off to another person. Sure someone might be working on a wheel, and another on the engine. But he needs to finish polishing the mirror. Then later they can put all those things together and out rolls a new Model T.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">For those who have experienced this style of work, it can be draining or down-right degrading to your spirit. You become the cog in a machine that produces standard measurable quality. There is little for you to be proud of, nor any part of the work that could be held aloft as the epitome of excellence. To put it bluntly, these practiced vulgarize the creative work of software engineers. It encourages management to think of the developer as expendable and replaceable. Note, I am not arguing for indispensability of the engineer. Instead I would argue for recognition of individual value and contribution.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">In contrast, I have worked for a shop where developers behave more like craftsmen. The best allusion that comes to mind is a weathered carpenter sanding a table, or assembling a barn with time-tested methods. He rests easy knows that his creation will stand for generations. To be completely honest, I think of the Amish Barns I’ve seen up north. Specifically their construction techniques that required no nails.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">The developers at this shop naturally wore many hats, from testing to deployment. But when you spoke to them, you could tell they were pleased with their work. Discussions were lively, and issues were rather easy to resolve, even across larger systems. As you can guess, this shop was much smaller in scale. It was also lead up by two seasoned Software Engineers.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">So, the two styles are Factory-line, or Craftsmen. Speaking from experience, I by far prefer the craftsmen shop. The culture of the office was freer, but maintained a strong discipline. Not only that, the output of the office was a higher quality too. That is not to say that high-quality code did not emerge from the Factory-line. Merely that producing such quality was more difficult and less common in the factory-line shop.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">With these two types in mind, I realized that the differenced weren’t merely in style of management, but ran much deeper. The first difference I found was in the language that each shop favored. The Craftsmen shop favored a recent edition of C++. The Factory-line shop favored C# for new development. The language differences were just the surface, but they are a good touch-point for the pattern of differences. One shop favored older, well-worn and stable libraries. The other favored newer, less stable and generally more finicky libraries. And when I realized that, I saw that the problem was also with us, the software developers.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">Perhaps it is a reaction to Business ‘Agile’, or perhaps its just a part of the culture. We scrambled for the ‘new technology’ that will ‘solve all the old problems better, faster, easier’. Of course, after a time, experience teaches that this can never be the case. But on the whole, the software development community leans towards neophilia. With the rapid change in our tools, it appears we may also be drifting towards less proficiency with these tools.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">And that is when it hit me. It’s not only business that does agile wrong. We do it too. In fact, we might even be pursuing software development the wrong way. In the rush to find the new, to get the business people off our back, we haven’t had time to look around for another option. At least, those of us who work for business majors haven’t. Perhaps companies founded by software developers can still get it. Or maybe it’s a size thing.</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">So as I see it we’ve two predominant patterns. First, we have the factory, with its pre-cut particle board. And its pieces precariously held together with glue and the prayers of the innocent. AS one alternative, we’ve the Amish carpenter, crafting his table, or drawers. Using well known and well-worn tools handed down to him by his father. The factory furniture might be ready sooner. It might be cheaper too. But the table so finely crafted, will stand the test of time. Such quality comes at a cost. The question before us is: Is quality worth the cost?</span></span>

<span style="font-size:medium;"><span style="font-family:Times New Roman, serif;">The question isn’t just about price. It is also about practice. What are we willing to give up to gain quality? Are we willing to work with older, more stable technology? I know that when I started in the work-force, I would usually sneer job postings that listed ancient or arcane languages on them. I am beginning to reconsider my stance. What do we want to be? Factory cogs, or Amish carpenters? Or perhaps is there another way?</span></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1387</wp:post_id>
  <wp:post_date>2017-01-17 16:00:53</wp:post_date>
  <wp:post_date_gmt>2017-01-17 22:00:53</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>amish-software</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="agile"><![CDATA[AGILE]]></category>
  <category domain="post_tag" nicename="agile-methodology"><![CDATA[Agile Methodology]]></category>
  <category domain="post_tag" nicename="agility"><![CDATA[agility]]></category>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1389]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6227243126591934464&type=U&a=pSsK]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[866678976]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>To build a better performance review</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/24/to-build-a-better-performance-review/</link>
  <pubDate>Tue, 24 Jan 2017 22:56:18 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1391</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">It’s that time of year again, Performance review season! In reality, most managers did this last month or earlier. The employees usually find out a bit later. This passive relationship employees had with their performance reviews always bugged me. So this year I decided to do something about it.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">I hadn’t made up my mind until the day of. I realized that I would miss out on valuable insight, since I had only started about six months earlier. For an hour before the meeting, I scoured the internet for resource, and I compiled a list of questions. I don’t have the links anymore, but I am certain with few Google searches you can find a good number of lists. A good place to start might be “performance review questions”. </span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">The core three I found in some sources address the basics of a performance review: </span></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What went well? What should I not do anymore? What should I start doing?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> The strength of these three is that they are easy to remember, and the cover a lot of ground. So if you're short of time, just remember to ask: </span></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><i><span style="color:#111111;">What actions to Continue/ Stop/ Start?</span></i></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> Nice and simple.</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">But, these questions also fall short, since they aren’t specific. Moreover they don’t always produce actionable answers. For a review 'actionable' is the most important attribute. You have to be able to act on it. So I sifted through a few more lists and found several very useful additions. </span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What actions can I take to deliver more value?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> – This questions can deliver in spades. It allows the manager to point to specific things that you can do. As a result you can point to them later, and ask for feedback. In my case, it provided the foundation for future questions, and started a useful conversation.</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What are your goals for me next year? /What do you want my priorities to be next year?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> These questions are good to ask earlier on, as it frames the rest of the discussion on actions. Once you have agreed on the goals or priorities, it becomes easier to see actions that can be taken to meet them.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What new knowledge/skill do you think I may need to develop this year? </span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">To me this question feels like a natural extension of the ‘Start’ subset. Especially in software, new skills or knowledge are nearly always needed. In my case, since it followed the priorities question, it didn’t provide a great deal more information. Some of the goals already implied the answer to this question. For example, if the goal was ‘drafting a schema for Mongo to handle X kind of data’, I will need MongoDB basics. As well as any information I can find on MongoDB or non-relational schemas.</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">How do you think the business is going to change in the future?/What challenges do we face?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> This question provides perspective. And it can fill in missing answers for the previous question. Further, it may encourage your manager to think of you filling the role of meeting that challenge, which is always good! In my case, I got some perspective on the larger motions within the company that I wasn’t aware of.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What can I do to improve my rating in ___ next year?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> For a rating where your performance isn’t where you want it this is a good question. It encourages you and your manager to point to concrete items which you can improve as well as the expected improvements. In my case, there wasn’t enough information to offer a correction. This was due to the duration of my employment rather than to lack of interaction between myself and my manager.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What can I do to make you more successful?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> This is the single biggest impact question that I found! It allowed me to mention some areas where I thought I could help my manager, since he’s a busy fellow. It got him thinking. Almost immediately he thought of a task that he could hand-off. Not only would it help him, it would be beneficial for me to experience as well. Through this question I was able to set myself up as a true ally of my manager. Now all that is left is for me is to do my best on the new task, in short, to be faithful in the small things.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What career opportunity do you see for someone with my background?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> This question is more sensitive. Specifically, your manager may need to be careful with phrasing. They will want to avoid coming across as a promise of a position in the future. My manager and I were able to work around this, by changing the context of the question. Instead I asked for some of his insight. What might be useful places to expand my skills? What areas of software that I might enjoy based on our work experience together, and personality? From this new question, I received several valuable insights, and suggestions. For those who have been with their employers longer this may be a safer question. For those who are fresh, I would definitely suggest the alternative version.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">Along these same lines, I avoided this next question: </span></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What could I do to give myself the best opportunity to move onto the next level in the organization?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> I am certain similar concerns would grip a manager with this question. I also feel it is more appropriate to ask about particular positions. It is definitely a question for someone intending to stay with an organization for the long-haul.
</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">And last but not least, my favorite question: </span></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><b><span style="color:#111111;">What is the most difficult thing about doing performance reviews?</span></b></span></span><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> This question broke the tension in the meeting pretty fast. It also allowed my manager to voice some of his thoughts on the review process. It helped me to understand the rating better, and to be better prepared for next year’s review.</span></span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">After reviewing my notes, I plan to keep questions 1, 2, 3, 5, 6, 9 (especially), and 12. I am reviewing the value of questions 4, 7, 8, and 10; and I plan to drop the 11th question. For convenience, I’ve included the numeric, ordered, list below.</span></span></span>
<ol>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;"> What actions should I continue?</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What actions should I stop?</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What actions should I start?</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What actions can I take to deliver more value?
</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What are your goals for me next year? /What do you want my priorities to be next year?
</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What new knowledge/skill do you think I may need to develop this year?</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">How do you think the business is going to change in the future?/What challenges do we face?
</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What can I do to improve my rating in ___ next year?
</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What can I do to make you more successful?
</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What career opportunity do you see for someone with my background?
</span></span></span>
<ul>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">Alternatively: What might be useful places to expand my skills? What areas of software that I might enjoy based on our work experience together, and personality? </span></span></span></li>
</ul>
</li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What could I do to give myself the best opportunity to move onto the next level in the organization?</span></span></span></li>
	<li><span style="font-family:Times New Roman, serif;"><span style="font-size:medium;"><span style="color:#111111;">What is the most difficult thing about doing performance reviews?</span></span></span></li>
</ol>
&nbsp;]]></content:encoded>
  <excerpt:encoded><![CDATA[Can you build a better performance review? I found audience participation is key! You can build a better performance review, just ask questions. These allow you to get actions to take from comments on your review. Here are some that I found were very helpful.]]></excerpt:encoded>
  <wp:post_id>1391</wp:post_id>
  <wp:post_date>2017-01-24 16:56:18</wp:post_date>
  <wp:post_date_gmt>2017-01-24 22:56:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>to-build-a-better-performance-review</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="meetings"><![CDATA[meetings]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="research"><![CDATA[research]]></category>
  <category domain="post_tag" nicename="resources"><![CDATA[resources]]></category>
  <category domain="post_tag" nicename="review"><![CDATA[review]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[1122590537]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6229793787120533505&type=U&a=fWZN]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>40</wp:comment_id>
    <wp:comment_author><![CDATA[Alex]]></wp:comment_author>
    <wp:comment_author_email>alvarezznricardocs@outlook.com</wp:comment_author_email>
    <wp:comment_author_url/>
    <wp:comment_author_IP>179.218.164.140</wp:comment_author_IP>
    <wp:comment_date>2018-01-20 10:59:53</wp:comment_date>
    <wp:comment_date_gmt>2018-01-20 16:59:53</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[I'm no longer sure where you are getting your information, however good topic. I needs to spend some time finding out much more or working out more. Thank you for fantastic information I used to be on the lookout for this information for my mission.]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1516635693.0765869617462158203125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1516635693</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1516580338</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1516580338.6277201175689697265625;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1516580364.714066982269287109375;s:5:"event";s:17:"status-unapproved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1516467593.14826202392578125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1516472624.5364010334014892578125;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>If you give a Dev a board game...</title>
  <link>https://danieljscheufler.wordpress.com/2017/01/31/if-you-give-a-dev-a-board-game/</link>
  <pubDate>Tue, 31 Jan 2017 22:30:38 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1398</guid>
  <description/>
  <content:encoded><![CDATA[<div>
<div class=""><span><span>From my first lecture on C, I have been tinkering with side projects. I've done projects </span></span><span class="adverb"><span><span>purely</span></span></span><span><span> for exploration and entertainment, like a text-based adventure games. More recently I've done utility projects like a script to correct <a href="https://en.wikipedia.org/wiki/Quicken_Interchange_Format" target="_blank">QIF</a> formatted text. Recently I took on a project of a larger scope. </span></span></div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>A while back,I read an <a href="https://boardgamegeek.com/thread/1301080/complete-simulation-machi-koro-strategies" target="_blank">article about a simulation of Machikoro</a>. It is a ‘city-building game’, with rules that are easy to translate to code. In particular, the idea of using the simulator to ‘evolve’ an optimal strategy for the game captivated me. This was applying Machine-learning to a board game. I figured 'I could do that', and got to work. I encountered many distractions and set-backs, including a new baby. But this month I am pleased to admit that I have hit a milestone.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>To support the ‘evolution’ aspect, I had to be able to run thousands of simulations in a reasonable amount of time. And after a bit over a month of concerted effort, I made it. I took my code from being a collection of classes to a library and simulator able to run 1000 games in 15 seconds.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>I started back in December with classes to represent the deck of cards, a strategy for play, and a player state. The first step after this was to create a basic <em>AI*</em> to act upon the player state, and a given strategy. Borrowing from the article I had found, I decided to make the strategy more static. </span></span><span class="hardreadability"><span><span>The decision logic reduced to constant decisions like 'always yes', or 'always the cheapest available'</span></span></span><span><span>. Then the <em>AI</em> only needed to use the <em>Strategy</em> to answer queries from the <em>Game</em>.</span></span></div>
<h6 class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr">*Note: I am capitalizing and <em>italicizing</em> Class names for ease of identification.</h6>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>After the simplified <em>AI</em> was complete, I got to work on the <em>Game</em>, which would simulate a single game. I decided that I wanted to use <a href="https://github.com/djscheuf/FluentPyTestAPI" target="_blank">fluent APIs</a> to instantiate a <em>Game</em>. I spend a good chunk of time to get these write, but it helped to make the main routine clearer. While I developed the <em>Game</em>, I decided to abstract the mechanisms of the game. This allowed me to separate the calculations from the sequence in which they </span></span><span class="passivevoice"><span><span>are applied</span></span></span><span><span>. </span></span><span class="hardreadability"><span><span>I extracted the <em>Engine</em> to handle things like calculating which <em>AI</em> if any has won, or how much money this <em>AI</em> gets with this dice roll</span></span></span><span><span>. Meanwhile the <em>Game</em> can manage whose turn it is, and who rolls the dice.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>Testing both the <em>Game</em> and the <em>Engine</em> were somewhat arduous, but it was time well spent. I caught </span></span><span class="complexword"><span><span>numerous</span></span></span><span><span> bugs, and infinite loops before I ever ran a full simulation. </span></span><span class="adverb"><span><span>Thankfully</span></span></span><span><span> the <em>Deck</em>, <em>State</em>, and <em>AI</em> were all </span></span><span class="adverb"><span><span>similarly</span></span></span><span><span> tested. But I do wish that I had adhered more </span></span><span class="adverb"><span><span>tightly</span></span></span><span><span> to <a href="https://en.wikipedia.org/wiki/Test-driven_development" target="_blank">TDD</a>. Instead I was very eager to getting the core functionality working.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>Once these pieces were in place, I initiated my <a href="https://datasift.github.io/gitflow/IntroducingGitFlow.html" target="_blank">GitFlow</a>, branching Master, Dev, and a new Feature. After pushing version 1.0 to Git, I started work on a new Feature, multi-game simulation! And while I tinkered with a Simulator, I realized that my fluent APIs had a bug. So I went back to Dev, and produced a <a href="https://en.wikipedia.org/wiki/Hotfix" target="_blank">Hotfix</a>, which </span></span><span class="passivevoice"><span><span>was merged</span></span></span><span><span> into Master. From there I re-based the Feature, and continued my work. </span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span class="hardreadability"><span><span>With the <em>Simulator</em>, I needed to initialize a <em>Game</em>, but also to be able to run it N times, without interference from the previous rounds</span></span></span><span><span>. So I had a two-pronged approach, I would accumulate the results of each game, and I would allow a <em>Game</em> to be reset. </span></span><span class="hardreadability"><span><span>Learning from my forebears, I was sure to include randomization of the first-player when I reset</span></span></span><span><span>. This removed the skewing of First-move advantage from my results. With the core <em>Game</em> working and </span></span><span class="adverb"><span><span>fluently</span></span></span><span><span> initialized, I was able to simple inject it into a <em>Simulator</em> to run.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>The original simulator was able to run 1000 games in around 80 seconds. This performance is alright, but my personal dev box has 8 cores and the <em>Simulator</em> was maxing out </span></span><span class="qualifier"><span><span>just</span></span></span><span><span> one. So to improve performance , I began to look into Python multi-threading. I found two similar flavors of concurrent operations in Python</span></span>.</div>
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>I elected to try <a href="https://docs.python.org/3/library/asyncio-task.html" target="_blank">Tasks</a> first, as it seemed </span></span><span class="complexword"><span><span>similar to</span></span></span><span><span> Microsoft’s Task Parallel Library. </span></span><span class="adverb"><span><span>Sadly</span></span></span><span><span> I was not quite right about that. The <em>BatchSimulator</em>’s performance was terrible. For some reason it never used </span></span><span class="complexword"><span><span>multiple</span></span></span><span><span> cores. The original time for the <em>BatchSimulator</em> was 150 seconds for 1000 games. While it is likely this was user error, it was enough to discourage me from pursuing Tasks further.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>So I turned to </span></span><a href="https://docs.python.org/3/library/concurrent.futures.html" target="_blank"><span><span>concurrents</span></span></a><span><span>. And with </span></span><span><span>concurrents,</span></span><span><span> I had much better luck. In this case I spawned some sub-processes. </span></span><span class="hardreadability"><span><span>I created the <em>Coordinator</em> to provide each fork with its own copy of the given <em>Game</em>, and an assigned number of games to run</span></span></span><span><span>. Then each fork created its own <em>Simulator</em>, and ran the given number of games. Once each <em>Simulator</em> completed, the <em>Coordinator</em> would accumulate the results. After all the forks completed, the coordinator calculates the final statistics. This provides an </span></span><span class="complexword"><span><span>overall</span></span></span><span><span> winner. To make this easier, I extracted the <em>SimulationResults</em> class. I then added public methods for merging and calculations. </span></span><span class="hardreadability"><span><span>By leveraging sub-processes, and existing code, the <em>Coordinator</em> was able to run <span style="text-decoration:underline;">at least 1000</span> games in ~16 seconds</span></span></span><span><span>. Now I say <span style="text-decoration:underline;">at least</span>, because the <em>Coordinator</em> divides the games </span></span><span class="adverb"><span><span>evenly</span></span></span><span><span> among the sub-processes. So to ensure that at least 1000 games </span></span><span class="passivevoice"><span><span>are run</span></span></span><span><span>, it must round up on the division of games per sub-process. But having more data is never a bad thing.</span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>I was able to push and close this Feature recently, and I am very pleased with the progress. I went from single game simulation to rather performant 1000 game simulation in a month. I now have something to show for my ideas and my work. This milestone leaves me at a good break point. I can either continue working on the simulator to pursue the machine-learning angle. Or I can change focus and return to this project later. At the moment, I don’t know what direction I will turn. But I wanted to take a step back and look at what I have accomplished, and share my ‘geeking out’ a bit. </span></span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span> </span></div>
</div>
<div class="">
<div class="public-DraftStyleDefault-block public-DraftStyleDefault-ltr"><span><span>If anyone </span></span><span class="passivevoice"><span><span>is interested</span></span></span><span><span> in the source, you can find it <a href="https://github.com/djscheuf/Machikoro-Simulator" target="_blank">here</a>.</span></span></div>
</div>
</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[If you give a Dev a board game... He'll write a simulator? A while back I got a game called Machikoro. My family and I loved it. While trying to learn more about the game I stumbled upon an article on someone's simulator for it. I had to have on too. And this month I finally reached a milestone, so I figured I'd 'geek out' a bit and share!]]></excerpt:encoded>
  <wp:post_id>1398</wp:post_id>
  <wp:post_date>2017-01-31 16:30:38</wp:post_date>
  <wp:post_date_gmt>2017-01-31 22:30:38</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>if-you-give-a-dev-a-board-game</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="board-game"><![CDATA[board game]]></category>
  <category domain="post_tag" nicename="board-games"><![CDATA[board games]]></category>
  <category domain="post_tag" nicename="code"><![CDATA[code]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="games"><![CDATA[games]]></category>
  <category domain="post_tag" nicename="performance"><![CDATA[performance]]></category>
  <category domain="post_tag" nicename="personal-projects"><![CDATA[personal projects]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="python"><![CDATA[python]]></category>
  <category domain="post_tag" nicename="simulate"><![CDATA[simulate]]></category>
  <category domain="post_tag" nicename="simulation"><![CDATA[simulation]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1424]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6232355722223448064&type=U&a=a0CD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[1369304991]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Dungeons and Dragons and Leadership Training?</title>
  <link>https://danieljscheufler.wordpress.com/2017/02/07/dungeons-and-dragons-and-leadership-training/</link>
  <pubDate>Wed, 08 Feb 2017 00:16:09 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1430</guid>
  <description/>
  <content:encoded><![CDATA[‘Roll Initiative!’ - A common call to arms in Dungeons and Dragons. I will freely admit; I still play on occasion with some of my college buddies. But this week during some quiet reflection a strange idea dawned on me. You could use DnD to practice a different forms of leadership.

<a name="_GoBack"></a> Now of course, pretending to be someone else is part and parcel for role-playing in general. But I specifically thought in terms of business. If you do a quick search for Software Development managers, you can find a variety of ideas on the topic. These include books like<em> <a href="https://www.amazon.com/Peopleware-Productive-Projects-Teams-Second/dp/0932633439" target="_blank">Peopleware</a></em>. There are also in-depth discussions on topics such as <em>‘Sovereign Software Development’</em>[<a href="https://top.fse.guru/the-civilized-alternative-to-agile-tribalism-4c60d01428c0#.3m4tg0ivh" target="_blank">here</a> and <a href="https://medium.com/@bryanedds/an-unexpected-inquisition-c4776bdedbb8#.ayu1jea40" target="_blank">here</a>]. Nearly all mention the short-comings of management practices. Nearly all offer various ways around it. One weakness that I’ve found mentioned a handful of times is the way in which a manager leads their team.

In a standard manager-employee relationship, the manager has authority through their title. This authority allows them to direct employees. This template can be made more complex with additional layers, or by cross-reporting to different people; all of which serve to confuse the issue and can lead to other troubles. Other models exist and the community likes discussing them. Many follow the pattern of servant leadership. Here the manager governs not by title-given authority. Instead managers govern by consensus, or by authority awarded them by the people they serve. Both of these increase the autonomy of the developers relative to their managers.

But that very idea can be daunting and even frightening to a manager used to the traditional role. And this is where DnD comes in. I’ve seen several situations in which a player’s out-of-game personality bleeds into their character. It can be quite a trick to wholly separate your thoughts from your characters. But in this case, that blurred line could be useful. If a manager encountered a mock-leadership situation, they could practice their methods. DnD offers an excellent environment for this activity.

To take a personal example, I wind up being the de facto leader in my player group. Generally, I will suggest an idea for our group, and ask for input. And usually the group says, ‘Sounds good.’ And that is that. Lately, I’ve been worried that I am unintentionally killing their creativity by proposing my own solution rapidly after being presented the challenge. I plan to try ask for input first this time. I can then propose my ideas as a modification to the ideas. I will try this next game and see if the results are more enjoyable for all of us.

By taking a bit of the real-world within me into the game I can see how I could take a bit of the game back into the real world. Just because it is a game, doesn’t mean the lessons we learn in it are inapplicable to our work in the real world. Perhaps it’s time to roll some dice?]]></content:encoded>
  <excerpt:encoded><![CDATA[Dungeons and Leadership Training? ‘Roll Initiative!’ - A common call to arms in Dungeons and Dragons. I admit, I play on occassion. But recently I realized that DnD could be used as a training tool for leaders! The game allows you to create practice scenarios for leaders to try new styles and new tactics. Perhaps it's time for the managers to roll some dice?]]></excerpt:encoded>
  <wp:post_id>1430</wp:post_id>
  <wp:post_date>2017-02-07 18:16:09</wp:post_date>
  <wp:post_date_gmt>2017-02-08 00:16:09</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>dungeons-and-dragons-and-leadership-training</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="game"><![CDATA[game]]></category>
  <category domain="post_tag" nicename="games"><![CDATA[games]]></category>
  <category domain="post_tag" nicename="leadership"><![CDATA[leadership]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="management"><![CDATA[management]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="practice"><![CDATA[practice]]></category>
  <category domain="post_tag" nicename="training"><![CDATA[training]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1436]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[1614311520]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6234887298836688896&type=U&a=Rx9x]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Having no fear for the outcome of 1000 battles</title>
  <link>https://danieljscheufler.wordpress.com/2017/02/14/having-no-fear-for-the-outcome-of-1000-battles/</link>
  <pubDate>Tue, 14 Feb 2017 22:31:56 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1439</guid>
  <description/>
  <content:encoded><![CDATA[“Know thy Enemy, and know thy self, and you need not fear the outcome of 1000 battles.” Sun Tzu places a high value on this knowledge. Today I want to focus on the ‘know thyself’ bit. For those unfamiliar with The Art of War, you can find an approachable summary <a href="https://www.youtube.com/watch?v=BOLXv3nqDkI" target="_blank">here</a>. Additionally there is a free audio book <a href="https://librivox.org/the-art-of-war-by-sun-tzu" target="_blank">here</a>. The General corresponds to the CEO or the director of a department. And it is from these men/women that a company’s vision is derived. The trouble is the army does not know itself. The modern soldier corresponds to the employee. If you ask an employee what they do to contribute to the corporate goal, and often they cannot answer. The vision is not well translated to the soldiers.

The ideal situation allows the employee to dictate the connection of their action to the goal of the company. I have found at least one such example in an interview with a SpaceX employee, found <a href="https://blog.ycombinator.com/the-second-job-of-a-startup-ceo/" target="_blank">here</a>.
<p style="text-align:center;"><span style="color:#808080;"><em>“The mission of SpaceX is to colonize Mars. In order to colonize Mars, we need to build reusable rockets because it will otherwise be unaffordable for humans to travel to Mars and back. My job is to help design the steering system that enables our rockets to land back on earth. You’ll know if I’ve succeeded if our rockets land on our platform in the Atlantic after launch.”</em></span></p>
This statement is a Mission-To-Metrics statement. And you can clearly see that the interviewed employee understand how their actions fit into the larger puzzle. Yet these powerful statements are often missing.

Even in an article on the <a href="http://apenwarr.ca/log/?m=201407#01" target="_blank">‘Curse of Smart People’</a>, the effects of a missing Mission-To-Metric statements appear. The author shows that very clever tend to rationalize the changes in priorities to the ‘capriciousness’ of management. This demoralizing fog can permeate an organization, robbing it of its initiative and its productivity.

This problem boils down to a communication break between the General, and the soldier. Thankfully there is a layer between them perfectly placed to help end the break. The commander of manager stands in the gap between the soldier and the general. In this position, the manager is aware of the priorities of the General. They can also see the potential actions and outcomes of the soldiers. With this knowledge, the Manager can translation of a Mission into actual Metrics.

But this process can not be one-sided. Indeed, the Employee should work with their manager to develop this statement. By collaboration the statement is both meaningful and aligned with the companies goals. Further, should an employee notice the 'demoralizing fog', they ought take the initiative. The work on a Mission-To-Metrics statement does not need to start with the manager.

So no matter what your level is, you can do something to contribute to the solution. To dispel the ‘demoralizing fog’, you need a clear statement. The statement needs to be approachable by the soldier, connecting actions to the goal. And with this statement in hand the army can know itself. With that knowledge, and a galvanized sense of purpose, you need not fear the outcome of 1000 battles.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1439</wp:post_id>
  <wp:post_date>2017-02-14 16:31:56</wp:post_date>
  <wp:post_date_gmt>2017-02-14 22:31:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>having-no-fear-for-the-outcome-of-1000-battles</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="goal"><![CDATA[goal]]></category>
  <category domain="post_tag" nicename="goals"><![CDATA[goals]]></category>
  <category domain="post_tag" nicename="leader"><![CDATA[leader]]></category>
  <category domain="post_tag" nicename="leadership"><![CDATA[leadership]]></category>
  <category domain="post_tag" nicename="management"><![CDATA[management]]></category>
  <category domain="post_tag" nicename="metrics"><![CDATA[metrics]]></category>
  <category domain="post_tag" nicename="mission"><![CDATA[mission]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="sun-tzu"><![CDATA[sun tzu]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1447]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[1863707060]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6237397789945458688&type=U&a=MohD]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>27</wp:comment_id>
    <wp:comment_author><![CDATA[balabhaskar6]]></wp:comment_author>
    <wp:comment_author_email>balakalapatapu@gmail.com</wp:comment_author_email>
    <wp:comment_author_url>http://balabhaska.wordpress.com</wp:comment_author_url>
    <wp:comment_author_IP>157.48.3.47</wp:comment_author_IP>
    <wp:comment_date>2017-02-14 17:10:23</wp:comment_date>
    <wp:comment_date_gmt>2017-02-14 23:10:23</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[Reblogged this on <a href="https://balabhaska.wordpress.com/2017/02/14/having-no-fear-for-the-outcome-of-1000-battles/" rel="nofollow">balabhaska</a> and commented: 
300 soliders]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type/>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>87254502</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1487113823.6125469207763671875;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"balabhaskar6";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>reblog_ping</wp:meta_key>
      <wp:meta_value>1</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>email_notification_notqueued</wp:meta_key>
      <wp:meta_value>1487163234</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1487118415.690753936767578125;s:5:"event";s:9:"check-ham";s:4:"user";s:12:"balabhaskar6";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1487163234</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1487163234.123897075653076171875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>A chance encounter: Leadership on a Competition Show</title>
  <link>https://danieljscheufler.wordpress.com/2017/02/21/a-chance-encounter-leadership-on-a-competition-show/</link>
  <pubDate>Tue, 21 Feb 2017 22:39:27 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1448</guid>
  <description/>
  <content:encoded><![CDATA[My wife has recently been hooked on a Competition Series on Netflix. It’s called <i><u>‘Skin Wars’</u></i>, and it is a competition TV show for body painters. It follows the standard model of such shows. Think <u>Americas Next Top Model</u>, or <u>The Next Food Network Star</u>. Normally I wouldn’t watch such a show, but even I have to admit the final products and artwork were impressive. So on occasion, I would watch an episode with my wife, while doing chores or something.

On such an occasion, we were viewing Season 2, Episode 5 ‘Emotional Rollercoaster’. The episode’s main challenge was a Horror-themed pieces made by two teams of four. As the episode unfolded, a curious dichotomy of leadership blossomed. I encourage anyone with access to review the episode. The examples are exquisite! The dichotomy centered on trust. One team grew to trust their team captain. The other started with distrust, and it only festered. Ultimately, that distrust between the team members lost them the challenge. I will focus mostly on the successful captain, hereafter Captain A.

At the beginning of the challenge, he assembles his team for a brainstorming session. Under normal circumstances, creatives can be rather shy about their ideas. They tend to be caution when offering truly unique or ambitious ideas to a group. I was pleasantly surprised to see Captain A handle the situation with such grace!

Captain A asked the group for their input. They bounced some ideas around. Then one of them offered and idea, but immediately backed down suggesting it was foolish. Captain A instead endorsed the idea, praising the team member. The effect was as impressive as it was immediate. You could see the praise taking hold in the proposer, as he smiled and the team began to build on his idea.

In contrast, Captain B chose to dictate her vision to her team, and then ask for input. When team members proposed an idea, she did not exactly reject them… but she didn’t praise or accept them either. The team saw this, and almost immediately began working with a fend-for-yourself mentality. At the end of the brainstorming session Team A had a single cohesive idea. Team B had to cobble together four distinct ideas into a reasonable story.

During the challenge, Team A optimized either activity. The most skilled member handled their specialized tasks, while still managing their one works. The Captain would occasionally walk around asking if anyone needed help. He also directed the team in certain instances, to ensure the joint effort would work. As a result, the captain’s entry suffered from the reduced attention. Several team members remarked about this to each other. I could see the trouble brewing for the end of the challenge. It is standard fare in these types of challenges, to ask each team member who did best and who should go home.

I remarked on the brewing trouble to my wife. The captain had an interesting choice ahead of him. He could ‘save himself’ and throw someone else under the bus, or he could prove his mettle and throw himself under. This prompted my wife to bring up team B. Their captain had a better entry than one or two or her team member. My wife asked <i>‘what if the captain’s work was actually better?’</i> My response was <i>‘unless the captain’s work was markedly superior, not merely better, the captain should not nominate themselves as the best. And even if their work was better, they should never mention a team member as least good. They would immediately lose their team by doing so.’</i> I didn’t realize the semi-prophetic nature of this discussion until we resumed the episode and watched the judging.

As expected, the judges began asking the participants who should stay and who should go. To my great surprise, Captain A called out the artist who had proposed the team’s theme as the best. When the moment of truth came, he selected himself to go home because his work was not his best. The team, looked mildly surprised. But they all seemed to support their captain, providing mitigating evidence for his lesser quality. It was rather touching actually.

By contrast, team B seemed to turn in on itself. Captain B nominated herself as best, and threw a team member how hadn’t produced their best work under the bus. The rest of the team nominated one of their own as best and generally had little positive to say about their ‘glorious leader’. In the end, one of team B’s low performers went home, and all the remaining competitors became wary of Captain B.

<a name="_GoBack"></a> This episode had demonstrated in real life a concept I had mostly seen in books. A leader who can build the trust of those they lead will succeed. But trust is a fragile thing, and must be guarded. In some cases, this required the leader to eat some humble pie. In others they must be willing to let someone else take the spot-light. I’ve heard this called ‘Servant-Leadership’, or ‘Realizing that it’s not about you’. Both fit in this case. And I was thankful for the brilliant demonstration.

One final note, in the next episode, the teams were dissolved, of course. Everyone returned to their individual competition. But I noticed a curious phenomenon with the members of team A. They still showed signs of a camaraderie built during the previous challenge. Among the joking and jostling, I believe there were some helpful hints and aids given between ex-team members. I was surprised that the short stint on a good team had this kind of lasting impact in a show about competing with your neighbor.]]></content:encoded>
  <excerpt:encoded><![CDATA[A chance encounter: Leadership on a Competition Show. If you look hard enough you can find surprising examples of good leadership in the strangest places. I found one recently on a Netflix show called Skin Wars. One team captain showed how to build trust, and how to protect that trust, so that even lasted beyond the immediate team challenge.]]></excerpt:encoded>
  <wp:post_id>1448</wp:post_id>
  <wp:post_date>2017-02-21 16:39:27</wp:post_date>
  <wp:post_date_gmt>2017-02-21 22:39:27</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>a-chance-encounter-leadership-on-a-competition-show</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="competition"><![CDATA[competition]]></category>
  <category domain="post_tag" nicename="leader"><![CDATA[leader]]></category>
  <category domain="post_tag" nicename="leadership"><![CDATA[leadership]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="team"><![CDATA[team]]></category>
  <category domain="post_tag" nicename="trust"><![CDATA[trust]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2112228688]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6239936396560265217&type=U&a=f90X]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Software Developers are Translators</title>
  <link>https://danieljscheufler.wordpress.com/2017/03/07/software-developers-are-translators/</link>
  <pubDate>Tue, 07 Mar 2017 22:04:32 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1464</guid>
  <description/>
  <content:encoded><![CDATA[What is a Software Developer? I know they ‘develop software’. But that is like saying water is wet. What is the fundamental action we train software Developers for? Could you use it to distinguish to excellent from the mediocre? I'd say you can. The fundamental task for Software developers is translation. Software Developers are in essence, translators.

Software Developers are individuals who can speak both to man and to machine. At a low level, they literally translate human sentences and ideas into instructions for computers. Ever used a poor translator app? Then you know proper translation takes some finesse. You have to understand the culture of the language you are translating to. You need to understand the idioms and the proper grammatical structure. Otherwise your translation won't turn out well. It might sound like terrible high-school writing. Worse, it might be a hollow mechanical echo of the original work.

The difference between a ‘good’ developer and a mediocre one hinges on the mastery of the language. The good developer knows the right idiom to convey the fine details of a phrase, while the mediocre developer might be able to eventually explain the instruction. The good developer can instruct with elegance and in some cases even a flourish. This even extends to translating behaviors. In technical language this is the UX. A good developer accounts for the expectations and the wants of those using it. He elegantly handles the use case. The trouble comes when trying to quantify these differences. They are differences in quality rather than quantity. But that is for a different discussion.

A good developer also recognizes the short-comings of the medium. Some things can translate when in their original form, others need to be recast. The target language/culture may not be able to sustain the desired content. Vocal inflection is useful for in-person discussion. They do not translate well into text message. Instead they need to be recast to maintain their emphasis. Put in plain language, computers can only do so much. A good developer recognizes the limitations of the system. He then communicates these limits to the humans he is translating for.

In a proper environment, the software developer would act as a representative of the machine to man. The good developer would help him to understand the needs and abilities of the machine. At the same time, the developer would act as a representative of man to machine. He would ensure that behaviors would meet expectations of man. These two tasks would form a cycle. The developer brings the needs of man to the machine. Then he returns with the limitations and requirements of the machine. Over several cycles, and accommodations, we find a successful system. In spirit this cycle is like Agile software development, though without the extra trappings.

Now if a Software developer is a type of Translator, should we change how we measure them? We can or ought to borrow from the way the Translation business operates. Or adopt their performance measurements? A good software developer acts as a fluent translator between the worlds of man and of machine. Through clever use of language, they translate the desires and needs of men to the machines. And then they bring back the requirements and limitations of the machine. In a proper cycle, both can prosper from this feedback. The good software developer is like a good translator. He is aware of the idioms of his target language as well as the culture. Thus he can make an effective, compelling translation of the original.]]></content:encoded>
  <excerpt:encoded><![CDATA[What is a Software Developer? I know they ‘develop software’. But that is like saying water is wet. What is the fundamental action we train software Developers for? They are trained to translate the desires of men into the instructions of machines. And like a good translator they need to be fluent in the target language, familiar with its idiom and grammar. The best can elegantly translate their thoughts, providing a living vibrant interpretation of the original! ]]></excerpt:encoded>
  <wp:post_id>1464</wp:post_id>
  <wp:post_date>2017-03-07 16:04:32</wp:post_date>
  <wp:post_date_gmt>2017-03-07 22:04:32</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>software-developers-are-translators</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="innovation"><![CDATA[innovation]]></category>
  <category domain="post_tag" nicename="language"><![CDATA[language]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6245001037535600640&type=U&a=_RQl]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2614405926]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:comment>
    <wp:comment_id>28</wp:comment_id>
    <wp:comment_author><![CDATA[For the love of the User | Daniel J Scheufler]]></wp:comment_author>
    <wp:comment_author_email/>
    <wp:comment_author_url>https://danieljscheufler.wordpress.com/2017/04/11/for-the-love-of-the-user/</wp:comment_author_url>
    <wp:comment_author_IP>192.0.91.100</wp:comment_author_IP>
    <wp:comment_date>2017-04-11 21:17:11</wp:comment_date>
    <wp:comment_date_gmt>2017-04-12 02:17:11</wp:comment_date_gmt>
    <wp:comment_content><![CDATA[[…] Software Developers are Translators […]
]]></wp:comment_content>
    <wp:comment_approved>1</wp:comment_approved>
    <wp:comment_type>pingback</wp:comment_type>
    <wp:comment_parent>0</wp:comment_parent>
    <wp:comment_user_id>0</wp:comment_user_id>
    <wp:commentmeta>
      <wp:meta_key>jabber_published</wp:meta_key>
      <wp:meta_value>1491963586</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:3:{s:4:"time";d:1491963586.312491893768310546875;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"tytrin";}</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_result</wp:meta_key>
      <wp:meta_value>false</wp:meta_value>
    </wp:commentmeta>
    <wp:commentmeta>
      <wp:meta_key>akismet_history</wp:meta_key>
      <wp:meta_value>a:2:{s:4:"time";d:1491963431.63971996307373046875;s:5:"event";s:9:"check-ham";}</wp:meta_value>
    </wp:commentmeta>
  </wp:comment>
</item>
<item>
  <title>Software Engineers are actually 'Creatives'</title>
  <link>https://danieljscheufler.wordpress.com/2017/03/14/software-engineers-are-actually-creatives/</link>
  <pubDate>Wed, 15 Mar 2017 00:07:07 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1467</guid>
  <description/>
  <content:encoded><![CDATA[<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Have you seen the <a href="https://github.audio/">Project audio for Github</a>? Or the plethora of esoteric languages like <a href="https://esolangs.org/wiki/Piet">Piet</a> or <a href="https://esolangs.org/wiki/Fish">&gt;&lt;&gt;</a> (pronounced: fish)? Recently I had a ‘coding challenge’ for fun at work. The challenge was to print a poem in a language we didn’t already know. In that time I’ve picked up four such languages, which got me thinking. We, developers, enjoy some of this artsy kind of stuff. Sure it’s not your typical artwork, except for Piet. But it is very creative at heart. Then the light-bulb lit up, Software Developers are members of the ‘Creatives’ community. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">To be clearer, ‘Creatives’ is the group of designers, and artists who contribute to projects in more media-centric ways. For example, the icons, the color scheme, or the marketing campaigns and slogans all fit the bill. Software Engineers are usually inclined to disdain the ‘Creatives’. This is because it is harder to measure what creatives actually do. But I suspect there are some lessons we can learn, if we would open our eyes.</span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">Generally, one manages ‘Creatives’ in a particular way. The method enables the creative freedom. It also establishes the safe environment needed to ‘try something new’. This allows them to bring their brilliance to any given project. This environment makes sense for the product they deliver. If a creative team does not feel safe, very few ideas appear, leading to lack of success. Of course, such an environment is difficult to setup and very easy to tear down. One cruel word, or breach of trust and the system comes toppling down.</span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">In contrast, many software development teams are more hierarchical in their style. Additionally, there tend to be more men than women. As a result, software teams tend to favor codified leadership. We like increased authority rather than community, at least in traditional corporations. Most design ‘discussions’ are arguments in fancy dress. And sometimes this can work well, since engineers usually like to debate. But we should consider adopting some strategies from the ‘creatives’ side. </span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">A safe environment with respectful discussion rather than debate could be desirable. This environment would allow us to foster new and brilliant solutions. In order for this to work, software developers would have to realize they are ‘creatives’ too. We would have to change our ‘comfortable’ behavior to allow for a better team environment. This, of course, comes down to culture, but also to maturity. We must be mature enough to admit we might have missed something. And we must be mature enough to want the best ideas, rather than our own.</span></span>

<span style="font-family:Times New Roman, serif;"><span style="font-size:medium;">At a manager’s level, if Software engineers are creative, then we ought to manage them differently. Dictating the chapter and verse of a solution you want is unproductive. It limits the benefit you can gain from your brilliant engineers. Instead, we need to challenge them. Provide them a problem and your rough idea of a solution and then encourage improvement upon it. Don't dictate your needs as you would to your digital assistant. Rather begin a discussion about the best way forward. Before committing to deadlines, allow for ideas to circulate and then commit. Who knows, maybe we can learn something from those crazy ‘creatives’ in the east wing after all?</span></span>]]></content:encoded>
  <excerpt:encoded><![CDATA[Software Engineers are actually 'Creatives'. Look up the 'Piet' esoteric language and you'll start to understand. But if we're 'creatives', perhaps we can learn some tricks from their managers. They are good at establishing environments and cultures and encourage creative problem solving. We can definitely learn from their techniques, if we can get over our distaste for the label.]]></excerpt:encoded>
  <wp:post_id>1467</wp:post_id>
  <wp:post_date>2017-03-14 19:07:07</wp:post_date>
  <wp:post_date_gmt>2017-03-15 00:07:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>software-engineers-are-actually-creatives</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="creative"><![CDATA[creative]]></category>
  <category domain="post_tag" nicename="esoteric"><![CDATA[esoteric]]></category>
  <category domain="post_tag" nicename="leader"><![CDATA[leader]]></category>
  <category domain="post_tag" nicename="leadership"><![CDATA[leadership]]></category>
  <category domain="post_tag" nicename="management"><![CDATA[management]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1469]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[2872840696]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6247568598722760704&type=U&a=asYo]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>What are you looking for in your interview?</title>
  <link>https://danieljscheufler.wordpress.com/2017/03/28/what-are-you-looking-for-in-your-interview/</link>
  <pubDate>Tue, 28 Mar 2017 21:30:21 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1471</guid>
  <description/>
  <content:encoded><![CDATA[What’s the point of an interview? Before you jump to an answer, do you give your candidate’s coding tests? Some white-board challenges? Have you ever wondered why? Do you think it’s the best way? Recently I’ve encountered opinions that counter the traditional wisdom filtering candidates.<a href="http://blog.interviewing.io/linkedin-endorsements-are-dumb-heres-the-data/" target="_blank"> Interviewing.io shared data that shows LinkedIn Endorsements don't correlate to a candidate’s actual skill.</a>

Recently, respected programmers have taken to Twitter to <em>‘<a href="https://theoutline.com/post/1166/programmers-are-confessing-their-coding-sins-to-protest-a-broken-job-interview-process" target="_blank">confess their programming sins</a>’</em>. This prompted a discussion on the technical interview questions by The Outline. There is even a small industry to prepare candidates for Whiteboard Challenges. In the end, the hubbub about Whiteboard challenges comes from the fact we are using them wrong.

We interview this way because Employers need to feel comfortable about a candidate. For Software, this means verifying the skills of the candidate. And to a lesser extend verifying their ability to communicate. This sums up the entire purpose of an interview.

But what does my answer to a whiteboard challenge actually mean? Is there such a thing as a ‘correct’ response? At a deeper level, does my answer truly reflect my skills as a developer? I say it does not. It does not reflect your skills, unless you are referring to the ability to communicate/reason by drawing boxes and lines.

Don’t get me wrong though. The ability to present your designs on a whiteboard is a useful skill. But it is not the skill that an employer wants to check. Unfortunately, there isn’t a good way to measure some of the skills without seeing actual work. ‘Take-home tests’ in the interviewee’s preferred language are much more useful. Whiteboard challenges do not demonstrate the same skills.

That is not to say you should toss out Whiteboard challenges . What we need is to change our thinking. Whiteboard challenges may not show an interviewee’s ‘coding’ skills. But they do show the manner in which an interviewee thinks. If you ask someone to write out an algorithm on a whiteboard, you will see how they think about the algorithm. You will see how they remember it. If you ask them to create a new algorithm, something unique, you can learn how they explore a new problem. You'll see what details they pay attention to. Moreover, you can introduce new requirements after they get started. This reveals how they will adapt.

All these insights are useful to know. But they are far less tangible/measurable. As with most hard to measure qualities, we tend to fail at measuring them. As a result, the tools created to measure them begin to be mis-used or mis-applied to find other tidbits. It ends up like using a fork to eat soup. It’s not very effective and wears you and your server out trying to get anything done.

So, if an interview is about revealing the skills of the interviewee, then we need technical interview questions. But using Whiteboard challenges still provides some benefits. But we cannot use whiteboard challenges as a litmus for programming skills. Instead, we should use them to pose unusual challenges which expose the way the interviewee thinks. This new form can also reveal how interviewees adapt to adversity. Those insights combined with more traditional evaluations will help businesses to find stronger, more suitable candidates. These candidates will be stronger not merely from a technical perspective but also from a cultural one. All it takes is using the tool for its proper purpose.]]></content:encoded>
  <excerpt:encoded><![CDATA[What are you looking for in your interview? Naturally you want to know what a candidate can do? The most common tool for this is Whiteboard challenges. Though lately they are being misused and abused. The biggest problem is that it doesn't actually show what a candidate knows. But that doesn't mean they aren't useful. We just need to use them better.]]></excerpt:encoded>
  <wp:post_id>1471</wp:post_id>
  <wp:post_date>2017-03-28 16:30:21</wp:post_date>
  <wp:post_date_gmt>2017-03-28 21:30:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>what-are-you-looking-for-in-your-interview</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="challenge"><![CDATA[challenge]]></category>
  <category domain="post_tag" nicename="competition"><![CDATA[competition]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="interview"><![CDATA[interview]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3380480137]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6252608869491634176&type=U&a=hWHr]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>ROI of Training</title>
  <link>https://danieljscheufler.wordpress.com/2017/04/04/roi-of-training/</link>
  <pubDate>Tue, 04 Apr 2017 21:30:31 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1480</guid>
  <description/>
  <content:encoded><![CDATA[What kind of investments do you make? Do you favor immediate returns on investment? Or do you favor guaranteed returns? How long are you willing to wait? Time spent in training or practice is equal to making an investment. Different methods or focuses produce different results.

Much of the training available in the software industry focuses on new frameworks. With a myriad to choose from, there is no shortage. There are many introductory courses. All encourage picking up the tool and applying it to basic problems. Yet these frameworks are subject to change. Two years down the line the framework will change. Sometimes in two years it can become obsolete. In other cases, it becomes an industry standard.

All in all, these skills degrade. Some of the degradation comes from market changes. Lack of practice also contributes to the decay. How often do you truly use that obscure array access format in language so-and-so? Rarely, for most of us. Yet there is a class of training and investments that are less likely to degrade: People skills.

People skills are usually presented in management or leadership courses. They are an investment class of their own. The opportunities to practice people skills are vastly more numerous. As a result they do not suffer as much 'lack-of-practice' degradation. Furthermore, people skills remain in demand for many higher level positions. Want to be a consultant? You need People skills. Want to start your own company? You’re gonna need people skills. But these skills are difficult to acquire. In fact, these skills are in high demand precisely because they are difficult to acquire.

People skills are also applicable across industries, if you ever wanted to move. The skills of a software developer carry over any industry we develop for. Much the same way, the core skills of a manager translate well across industries. As career capital, they pay large dividends.

The best investment for anyone strong depends on what they want from life? I enjoy the challenge and rewards of programming. But I am interested in the role of management, and in its unique challenges. With an eye to the future, people skills appear to be the best investment. The skills suffer less degradation with time, and have remained in demand over the long haul. What do you value in your investments? Do you want to expert in technologies? Or do you want to diversify? Hopefully this perspective provides another lens for reflections.]]></content:encoded>
  <excerpt:encoded><![CDATA[What kind of ROI does your training have? Does learning a new framework provide a better ROI than some other training? One class of training that I've found to be less popular among software developers may have an even higher ROI than any technical training!]]></excerpt:encoded>
  <wp:post_id>1480</wp:post_id>
  <wp:post_date>2017-04-04 16:30:31</wp:post_date>
  <wp:post_date_gmt>2017-04-04 21:30:31</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>roi-of-training</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="business"><![CDATA[business]]></category>
  <category domain="post_tag" nicename="leadership"><![CDATA[leadership]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="management"><![CDATA[management]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="post_tag" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="training"><![CDATA[training]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1297]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3639790998]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6255157219554320384&type=U&a=GXAO]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>For the love of the User</title>
  <link>https://danieljscheufler.wordpress.com/2017/04/11/for-the-love-of-the-user/</link>
  <pubDate>Tue, 11 Apr 2017 21:30:26 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1484</guid>
  <description/>
  <content:encoded><![CDATA[Software is for the user. It is not for the Software Engineers who develop it. In the end, software will succeed or fail to meet user needs. The user is the arbiter of software’s fate. Oddly though, many software developers tend to resent their users. The users are prone to strange behaviors. Sometimes they can even come across as whinny children to jaded developers. But we must do away with this flawed way of thinking. We must act as humble stewards, gentle of heart, and eager to please.

Users are the life blood of a software product. Without them, the product will fail. As a result their needs are paramount, and must be address to the best of our abilities. If this is the case, then why are developers so often frustrated by their users? Remember we are <a href="https://danieljscheufler.wordpress.com/2017/03/07/software-developers-are-translators/">fluent in the machine tongue</a>. Generally speaking, users aren’t. Sure they can use the machines, to a limited degree. But they don’t understand them like we do.

Imagine you are in a foreign country. The only way to get your work done is to cajole a lumbering beast into action for you. Without understanding the beast’s language, even simple tasks could be infuriating. Users who are less familiar with software might feel the same. Only remember that we specialize software to particular tasks. As a result users need to learn, remember and use a variety of these ‘beasts’ to get their work done. Also remember, they are being evaluated by their ability to get work done, using your software.

And so scared, frustrated, and feeling impotent, they turn to us. They wonder why their actions did not work. They ask for strange features or work-flows. All these feeling arise because they don’t understand their tools. Sure we could ‘educate them’. But if the way to use a tool is less than obvious, or they only use it seldom, then you can expect them to forget. Not to mention, you have to convince them to take the time to get trained, rather than working. Even we don’t feel comfortable trading training time for working time. So why should we ask that of them?

Two paths remain to us. We can tell the user’s they are wrong and constantly bicker with them, trying to explain the proper way. Or we can choose to listen. The way we thought was obvious is not. They need more help, because the grammar of machines is difficult. I would call this path ‘Stewardship’. We have to think of the code as belonging to the users, not to us. In so doing, it becomes clear what choices we need to make. If the code is for the user, then their needs overrule ours. If they aren’t fluent, we must may the software more approachable.

We are like gardeners. The land we tend is not our own, but still we make it bloom with brilliant flowers. We cherish the blossoms, and suffer when they are trodden upon. But the garden is not for us. Imagine if the gardener chased off the owner with a spade when he ask for a new row of lilies. The gardener would be marched off and a new one brought in to replace him. This is not an exact analogy, since users pick their software. They might just avoid a certain gardener altogether.

If instead, we are gentle and approachable, we could better tend our gardens. If no one ever walks our garden paths, then we put to waste all the love and beauty to garden contains. Software without users, despite its brilliant design, and delicious complexity, is dead. If we want vibrant, living software we must serve our users. We cannot lord our understanding over them, but must instead steward the code for them. With gentle hearts, we can learn their needs, and make the garden they need. In the process we may discover an even greater beauty.]]></content:encoded>
  <excerpt:encoded><![CDATA[Software, at the end of the day, is for the user. We,as developers, often forget. We ought bear ourselves like humble gardeners, managing the rose bed for our users. As stewards of the code we must work toward understanding and appreciating our users!]]></excerpt:encoded>
  <wp:post_id>1484</wp:post_id>
  <wp:post_date>2017-04-11 16:30:26</wp:post_date>
  <wp:post_date_gmt>2017-04-11 21:30:26</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>for-the-love-of-the-user</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="communication"><![CDATA[communication]]></category>
  <category domain="post_tag" nicename="innovation"><![CDATA[innovation]]></category>
  <category domain="category" nicename="perspective"><![CDATA[Perspective]]></category>
  <category domain="post_tag" nicename="principles"><![CDATA[principles]]></category>
  <category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
  <category domain="post_tag" nicename="software"><![CDATA[software]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1485]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[3897442836]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6257748182923558912&type=U&a=gMzs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Going where no QA has gone before!</title>
  <link>https://danieljscheufler.wordpress.com/2017/04/18/going-where-no-qa-has-gone-before/</link>
  <pubDate>Tue, 18 Apr 2017 21:30:00 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1489</guid>
  <description/>
  <content:encoded><![CDATA[As a developer having QA you can rely on is great! They are welcome friends helping us cultivate our precious software. But there are dark places which even a QA cannot shine a light. When your software has no interface, what can a QA do, but wish you luck? But what if there was a way for QAs to interact with otherwise UI-less software? Enter Cucumber, a tool that allows QA to shine a light in dark places.

I rediscovered Cucumber, while researching test automation frameworks. Cucumber is a framework for Behavioral Driven Development. After experimenting for a time, I realized Cucumber opens a whole realm of possibilities. Cucumber encourages the expression of program actions in the human tongue. With a proper translation mechanism, Cucumber could act as a mediator between QA and the UI-less software.&nbsp;

Cucumber translates the human tongue into functions through the Gherkin language. For example, a tester would define a test case like this:&nbsp;
<blockquote><i><b>Scenario: Messages are saved until the consumer arrives</b></i>
<i>Given the queues are empty</i>
<i>And I publish a message to the queue with ‘SomeDetails’</i>
<i>When Alice subscribes to the queue</i>
<i>Then Alice should receive a message with ‘SomeDetails’</i></blockquote>
It is fairly easy to understand the behavior that is being described in this scenario. Cucumber ties the keywords Given, When, and Then to functions which execute the described action using a Regex Match string. This can include free-hand parameters such as ‘SomeDetails’.&nbsp;

Properly designed, the Givens and Whens can be setup to be repeatable and re-compose-able. Doing so allows the QA to describe more complex scenarios with different combinations of the same simple behaviors. As a result, once the initial steps are available, a QA could test to their hearts content with little developer support.

Cucumber improves the documentation of a product. Test document expected behaviors in a common tongue. This makes them available to all parts of the company.

But great care must be taken to ensure that the compose-able parts function precisely as described and without side-effects. Imperfections in the design or the aforementioned side-effects will destroy test-validity and erode trust in the test cases written using Cucumber.

Cucumber was designed to improve TDD, enabling members of a team to describe the function of a program in a human tongue. This same feature creates a tool for empowering QA. Given careful planning and design, you can compose a terse but flexible set of instructions. These allow a QA to test projects they could never touch before! By blending the skills of a developer and a QA, we can reap the best of all our talents. All it takes is an investment to allow our friend in QA to come with us!]]></content:encoded>
  <excerpt:encoded><![CDATA[As a developer having QA you can rely on is great! They are welcome friends helping us cultivate our precious software. But there are dark places which even a QA cannot shine a light. When your software has no interface, what can a QA do, but wish you luck? But what if there was a way for QAs to interact with otherwise UI-less software? Enter Cucumber, a tool that allows QA to shine a light in dark places!]]></excerpt:encoded>
  <wp:post_id>1489</wp:post_id>
  <wp:post_date>2017-04-18 16:30:00</wp:post_date>
  <wp:post_date_gmt>2017-04-18 21:30:00</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>going-where-no-qa-has-gone-before</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bdd"><![CDATA[BDD]]></category>
  <category domain="post_tag" nicename="behavior-driven-development"><![CDATA[behavior-driven development]]></category>
  <category domain="post_tag" nicename="development"><![CDATA[development]]></category>
  <category domain="post_tag" nicename="quality"><![CDATA[quality]]></category>
  <category domain="post_tag" nicename="software-dev"><![CDATA[software dev]]></category>
  <category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="test-driven-development"><![CDATA[test-driven development]]></category>
  <category domain="post_tag" nicename="tool"><![CDATA[tool]]></category>
  <category domain="post_tag" nicename="tools"><![CDATA[tools]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1490]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[2697]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[4140726163]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6260240955882958848&type=U&a=J2yR]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL ... How to spoof my domain...</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/06/til-how-to-spoof-my-domain/</link>
  <pubDate>Tue, 06 Mar 2018 22:00:17 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1493</guid>
  <description/>
  <content:encoded><![CDATA[Before we begin today, I want to provide a quick update, as my blog has been inactive for a while. I started a new position in September of last year, right after Harvey force myself and my family out of out apartment. Thankfully all is well, but it has taken some time for me to get back on my feet.

During this absence, I have met many new colleagues, and found several new mentors. One such mentor is <a href="https://www.linkedin.com/in/ClaudioLassala/" target="_blank" rel="noopener">Claudio Lassala</a>. to say the least he is impressive. And among the things I have learned from him is a better way to find blog-post topics and a new form in which to show them. I am going to give this new form a try for a while in my 'Today I Learned...' series going forward. If you are interested in seeing his execution, he keeps a blog full of excellent resources here: <a href="https://lassala.net/" target="_blank" rel="noopener">https://lassala.net/</a>

Without further ado, Today I learned how to spoof my domain, so that third-party(s)  will trust my test environment. I was working on integrating a third-party script for product reviews. But during my testing,  I found the node never loaded. Peeking into the dev-tools I saw the reason.

The third-party response indicated that localtest.me was not configured in their system. This made some sense, given I was using a pre-compiled script from my client. It appeared that needed to convince the third-party API that I was in fact part of my client's network.

After some searching and instruction by senior team members, I found a solution. I needed to add a hostfile entry for test.{clientComain}.com. Then I had to add an IIS bind to my test site so it would response to test.{clientDomain}.com. Run the app again, and viola! It works like magic.

I hope you found this quick summary to be helpful.  If you are having trouble finding your hostfile. I found mine in C:\Windows\System32\drivers\etc. Be warned, I do not know the full implications of editing the Hostfile. Beyond here be dragons.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1493</wp:post_id>
  <wp:post_date>2018-03-06 16:00:17</wp:post_date>
  <wp:post_date_gmt>2018-03-06 22:00:17</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-spoof-my-domain</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="domain"><![CDATA[domain]]></category>
  <category domain="post_tag" nicename="learn"><![CDATA[learn]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="spoof"><![CDATA[spoof]]></category>
  <category domain="post_tag" nicename="third-party"><![CDATA[third-party]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1520378301]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15456743291]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6376928794317586432&type=U&a=g0J8]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to debug NHibernate Queries</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/13/til-how-to-debug-nhibernate-queries/</link>
  <pubDate>Tue, 13 Mar 2018 20:00:21 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1495</guid>
  <description/>
  <content:encoded><![CDATA[Today I learned how to debug an NHibernate Query. I was writing a new entity, and map to be accessed thru NHibernate from a SQL datbase. The table had certain fixed-size columns, and I had specified this size in the mpa. However everytime I tried to save, I received a truncation error.

However at the C# level, I couldn't tell what query was actually being run. I needed to go deeper. Thankfully someone on the team know how to do taht. they pointed me at <span style="text-decoration:underline;">Sql Profiler</span> which I beleive is installed with either SQL Databse or with the Management Studio. either way, I ran the profiler, so that it would collect all StoredProc and TSQL events, as well as RPCs. This allows you to see the actual SQL query that NHibernate created for your entity. Turns out that NHibernate had mapped the fixed-size string to nvarcahr(4000) rather than nvarchar(10).

Digging deeper, I realized that my migration was the culprit as it had created the columns incorrectly. I had used FluentMigrator initially. This time I went back and wrote the SQL statements by hand so that I could be certain of the data types. Once I created the proper types, and ran NHibernate again the problem was resolved.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1495</wp:post_id>
  <wp:post_date>2018-03-13 15:00:21</wp:post_date>
  <wp:post_date_gmt>2018-03-13 20:00:21</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-debug-nhibernate-queries</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="database"><![CDATA[database]]></category>
  <category domain="post_tag" nicename="debug"><![CDATA[debug]]></category>
  <category domain="post_tag" nicename="learn"><![CDATA[learn]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="nhibernate"><![CDATA[nhibernate]]></category>
  <category domain="post_tag" nicename="query"><![CDATA[query]]></category>
  <category domain="post_tag" nicename="sql"><![CDATA[sql]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1496]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1520971969]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15693934227]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6379418817386332160&type=U&a=VAlg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... ASP.Net Form Validation Easy-Mode</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/20/til-asp-net-form-validation-easy-mode/</link>
  <pubDate>Tue, 20 Mar 2018 20:00:13 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1498</guid>
  <description/>
  <content:encoded><![CDATA[Today I learned there is an easy-mode for form validation in ASP.NET! I was creating a series of CRUD pages for our in-house admin system, for entering a new data-type. This of course meant adding a new view for creating said data.

I mentioned in passing to a team-mate that there had to be a better way that manually validating every property and providing a response model with an error property for each entry, or worse a generic error list displayed randomly at the top of the page like other parts of the admin tool.

To my delight, there was a better way. 'Easy-mode' it actually a decorator called <a href="https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations?view=netframework-4.7.1" target="_blank" rel="noopener">DataAnnotations</a>. Further you can check on the complete Validation-State of the model by called ModelSate.IsValid ( which is MVC magic), and further you can show the set of errors by rendering the summary on the view with Html.ValidationSummary ( which is also MVC magic).]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1498</wp:post_id>
  <wp:post_date>2018-03-20 15:00:13</wp:post_date>
  <wp:post_date_gmt>2018-03-20 20:00:13</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-asp-net-form-validation-easy-mode</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="asp-net"><![CDATA[ASP.NET]]></category>
  <category domain="post_tag" nicename="form-validation"><![CDATA[form validation]]></category>
  <category domain="post_tag" nicename="learn"><![CDATA[learn]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1353]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6381984503283404801&type=U&a=d6Xt]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[15934332111]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1521583676]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... Another way that IE is 'special'</title>
  <link>https://danieljscheufler.wordpress.com/2018/03/27/til-another-way-that-ie-is-special/</link>
  <pubDate>Tue, 27 Mar 2018 20:00:10 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1500</guid>
  <description/>
  <content:encoded><![CDATA[Today I learned another way in which InternetExplorer is <em>'special'</em>. One of my team-mates was hunting down a bug in a recent project of ours. A critical link on the page was not working in IE. Strange thing was that Chrome was able to handle it just fine.

Turns out the link had use back-slashes(\) rather than forward-slash(/) after the link protocol. As a result IE was unable to redirect to the next page properly.

The solution was simple enough, swap the \ with / and viola IE is happy again. Oh the joys of milti-browser support :P]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1500</wp:post_id>
  <wp:post_date>2018-03-27 15:00:10</wp:post_date>
  <wp:post_date_gmt>2018-03-27 20:00:10</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-another-way-that-ie-is-special</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="ie"><![CDATA[ie]]></category>
  <category domain="post_tag" nicename="internetexplorer"><![CDATA[internetexplorer]]></category>
  <category domain="post_tag" nicename="learn"><![CDATA[learn]]></category>
  <category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="web"><![CDATA[web]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1424]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16192815066]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1522193861]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6384543803931443201&type=U&a=RZqI]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to manually redirect within React-Router</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/03/til-how-to-manually-redirect-within-react-router/</link>
  <pubDate>Tue, 03 Apr 2018 20:00:49 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1512</guid>
  <description/>
  <content:encoded><![CDATA[While working on a SPA react application, I noticed that every time I returned from one screen to the first, I was resetting the Redux state. Given we were using React-Router to handle 'pseudo' links, I was very confused.

As it turns out, the way I was redirecting was the culprit. The SPA was supported by an MVC controller, and route. Since we were using React-Router, we had a catch-all route so that the controller would still render the same action despite route changes.

Normally, routes are changed within the SPA using RouterLink or similar constructs. Since my redirect was happening as part of an action I was changing the window.history. That was what caused the problem.

I found later that I was causing the browser to fix a new request to the server, rather than relying on the React-Router to determine the course. Thankfully, components rendered by a Router receive a prop called history. This props.history is managed by the React-Router, and pushing to it will cause the Router to handle the redirect, thus preserving the Redux state.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1512</wp:post_id>
  <wp:post_date>2018-04-03 15:00:49</wp:post_date>
  <wp:post_date_gmt>2018-04-03 20:00:49</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-manually-redirect-within-react-router</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="history"><![CDATA[history]]></category>
  <category domain="post_tag" nicename="react"><![CDATA[react]]></category>
  <category domain="post_tag" nicename="react-router"><![CDATA[react-router]]></category>
  <category domain="post_tag" nicename="redirect"><![CDATA[redirect]]></category>
  <category domain="post_tag" nicename="redux"><![CDATA[redux]]></category>
  <category domain="post_tag" nicename="spa"><![CDATA[spa]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1513]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1522786986]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16431052590]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6387031552831877122&type=U&a=TlD4]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to add Raygun to a React App</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/10/til-how-to-add-raygun-to-a-react-app/</link>
  <pubDate>Tue, 10 Apr 2018 20:00:12 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1515</guid>
  <description/>
  <content:encoded><![CDATA[We were preparing to roll-out our brand spanking-new React App. Naturally once our app is out in the wild we wanted to have telemetry on it. The client's go-to telemetry provider was Raygun.I was blessed and impressed with how excellent Raygun's documentation was!

It was so accurate and easy to follow, I can't put it in better words myself. However I did run into one sticky issue while integrating. Specifically, integrating the React-Router pages and Raygun's page-view logging. To be sure, Raygun provides a good method for doing this, one simply adds a listener to the props.history object provided by React-Router.

Prior to using Raygun the app relied on BrowserRouter, which creates a history object under the hoop. But the Router object allows the developer to provide a history object. So the easiest way to attach the Raygun listener is to call createBrowserHistory, and then attach to the history object before giving it to the Router. Also if you are using a baseUrlName in you app, be sure to pass that to the createBrowserHistory call!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1515</wp:post_id>
  <wp:post_date>2018-04-10 15:00:12</wp:post_date>
  <wp:post_date_gmt>2018-04-10 20:00:12</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-add-raygun-to-a-react-app</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="history"><![CDATA[history]]></category>
  <category domain="post_tag" nicename="raygun"><![CDATA[raygun]]></category>
  <category domain="post_tag" nicename="react"><![CDATA[react]]></category>
  <category domain="post_tag" nicename="react-router"><![CDATA[react-router]]></category>
  <category domain="post_tag" nicename="telemetry"><![CDATA[telemetry]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1516]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1523390595]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16665173337]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6389563272080822274&type=U&a=Oc1a]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to reduce NPM package size</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/17/til-how-to-reduce-npm-package-size/</link>
  <pubDate>Tue, 17 Apr 2018 20:00:56 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1518</guid>
  <description/>
  <content:encoded><![CDATA[One of my colleagues was working on improving the load time for a heavy-lifting component in our React App. The component is packaged as an npm package so that it can be reused in other projects, but it is significant in size.

My colleague showed me a nice visual tool for identifying packages in the dependencies which could be shrunk or removed. He added a plug-in to our webpack build which provided a useful visualization of the package structure and hierarchy.

To do this you need to add the following to the webpack.config:
<blockquote>
<div><span style="font-family:Monaco;font-size:9pt;color:#333333;">const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');</span></div>
<div></div>
<div><span style="font-family:Monaco;font-size:9pt;color:#333333;">config.plugins.push(new BundleAnalyzerPlugin());</span></div></blockquote>
<div>You'll also need to install the <span style="text-decoration:underline;">webpack-bundle-analyzer</span> package.</div>
<div></div>
<div>Using this tool we were able to see that some of the large size was due to duplications of modules. That is the user project, and the project we were working on shared dependencies.</div>
<div></div>
<div>My colleague solved this in two ways, first he removed the Node Modules folder from web-pack, thus removing it from the final bundle. Second, he made sure that the project we were improving, and the user project shared the same version of as many dependencies as possible. By doing so my colleague was able to greatly improving the loading time for this npm package.</div>
<div></div>
<div></div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1518</wp:post_id>
  <wp:post_date>2018-04-17 15:00:56</wp:post_date>
  <wp:post_date_gmt>2018-04-17 20:00:56</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-reduce-npm-package-size</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="bundle"><![CDATA[bundle]]></category>
  <category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="webpack"><![CDATA[webpack]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1104]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[16906905211]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1524000370]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6392120853009702912&type=U&a=ZTZV]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to handle User input with a generic function</title>
  <link>https://danieljscheufler.wordpress.com/2018/05/01/til-how-to-handle-user-input-with-a-generic-function/</link>
  <pubDate>Tue, 01 May 2018 20:00:06 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1522</guid>
  <description/>
  <content:encoded><![CDATA[While writing a CRUD screen with validation in React, I found I was writing similar, if not the same state-altering functions for each input box. Some functions needed additional validation while others did not. After discussing some team-members, the suggestion was made to use the following:
<pre style="font-family:Monaco;font-size:9pt;"><span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">handleUserInput</span><span style="font-family:Monaco;font-size:9pt;">(</span><span style="font-family:Monaco;font-size:9pt;">e</span><span style="font-family:Monaco;font-size:9pt;">) {</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   const</span> <span style="font-family:Monaco;font-size:9pt;">name</span> <span style="font-family:Monaco;font-size:9pt;">=</span> <span style="font-family:Monaco;font-size:9pt;">e</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">target</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">name</span><span style="font-family:Monaco;font-size:9pt;">;</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   const</span> <span style="font-family:Monaco;font-size:9pt;">value</span> <span style="font-family:Monaco;font-size:9pt;">=</span> <span style="font-family:Monaco;font-size:9pt;">e</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">target</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">value</span><span style="font-family:Monaco;font-size:9pt;">;</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   this</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">setState</span><span style="font-family:Monaco;font-size:9pt;">({</span> <span style="font-family:Monaco;font-size:9pt;">[name]:</span> <span style="font-family:Monaco;font-size:9pt;">value</span> <span style="font-family:Monaco;font-size:9pt;">});</span></span>
<span style="font-family:Monaco;font-size:9pt;"><span style="color:#000000;">}</span></span></pre>
<div></div>
<div>Paired with code like this for the inputs:</div>
<div>
<pre style="font-family:Monaco;font-size:9pt;"><span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">&lt;</span><span style="font-family:Monaco;font-size:9pt;">TextInput</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   id</span><span style="font-family:Monaco;font-size:9pt;">=</span><span style="font-family:Monaco;font-size:9pt;">"saleName"</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   name</span><span style="font-family:Monaco;font-size:9pt;">=</span><span style="font-family:Monaco;font-size:9pt;">"saleName"</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   placeholder</span><span style="font-family:Monaco;font-size:9pt;">=</span><span style="font-family:Monaco;font-size:9pt;">{</span><span style="font-family:Monaco;font-size:9pt;">''</span><span style="font-family:Monaco;font-size:9pt;">}</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   value</span><span style="font-family:Monaco;font-size:9pt;">=</span><span style="font-family:Monaco;font-size:9pt;">{this</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">state</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">saleName</span><span style="font-family:Monaco;font-size:9pt;">}</span></span>
<span style="color:#000000;"><span style="font-family:Monaco;font-size:9pt;">   onChange</span><span style="font-family:Monaco;font-size:9pt;">=</span><span style="font-family:Monaco;font-size:9pt;">{this</span><span style="font-family:Monaco;font-size:9pt;">.</span><span style="font-family:Monaco;font-size:9pt;">handleUserInput</span><span style="font-family:Monaco;font-size:9pt;">}</span></span>
<span style="font-family:Monaco;font-size:9pt;"><span style="color:#000000;">/&gt;</span></span></pre>
</div>
<div>Then just set the name property on the tag to the same property name in state.</div>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1522</wp:post_id>
  <wp:post_date>2018-05-01 15:00:06</wp:post_date>
  <wp:post_date_gmt>2018-05-01 20:00:06</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-handle-user-input-with-a-generic-function</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="crud"><![CDATA[crud]]></category>
  <category domain="post_tag" nicename="generic"><![CDATA[generic]]></category>
  <category domain="post_tag" nicename="react"><![CDATA[react]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="user-interface"><![CDATA[User Interface]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1525209897]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17386435995]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6397193977115795456&type=U&a=k9gg]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... Combine Reducers also splits state...</title>
  <link>https://danieljscheufler.wordpress.com/2018/05/15/til-combine-reducers-also-splits-state/</link>
  <pubDate>Tue, 15 May 2018 20:00:18 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1524</guid>
  <description/>
  <content:encoded><![CDATA[While starting work on a greenfield project, I was of course writing new reducers. This time, we were trying to follow a better paradigm as outlined <a href="https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape" target="_blank" rel="noopener">here</a>. As it happens I was writing the byId reducer for an action when I learned a wonderful, simplifying fact.

As you know Reducers take current state and an action, returning a modified state. But what is the state handed to the function? As it turns out, CombineReducers, also splits out the relevant part of state for the given reducers.

For example, take the following Redux State:
<pre>root :
    entities:
        item:
            byId
            allIds
        thing
        box
    uiState</pre>
If you compose root from an entities and uiState reducer, then the entities reducer gets only the entities part of state. Going deeper you can similarly compose the entities reducer from item, thing and box. The item reducer will only get the item part of state, and will not see anything related to thing or box.

As a result of this behavior, you can write very simple reducers. And of course it is super easy to write tests for reducers composed in this manner.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1524</wp:post_id>
  <wp:post_date>2018-05-15 15:00:18</wp:post_date>
  <wp:post_date_gmt>2018-05-15 20:00:18</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-combine-reducers-also-splits-state</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="redux"><![CDATA[redux]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="post_tag" nicename="til"><![CDATA[til]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1526415977]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17886496674]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6402252640918528000&type=U&a=os88]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to use Map and Reduce</title>
  <link>https://danieljscheufler.wordpress.com/2018/05/22/til-how-to-use-map-and-reduce/</link>
  <pubDate>Tue, 22 May 2018 20:00:44 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1527</guid>
  <description/>
  <content:encoded><![CDATA[While working on a React app, I needed to translate a bit of Redux shape into one needed by an Api. Due to the normalization we imposed on the Redux state, I had to navigate to the desired information through s couple of lists. These entities each had a list of ids of children, and I needed the grand-children of a given entity.

Instead of manually composing this list, I found map and reduce were far better suited to the task, as you might imagine. In order to get the list of grandchildren, I first mapped the list of children ids to a list of lists of grand-child ids. These lists were accessed through the children. Then I took the list of lists and reduced it , effectively merging it into a single, long list of all grandchildren. Helpful hit, always include an initial value for the list. It helps avoid bugs when inputs are empty. Finally I mapped the list of grand-child ids to the grandchildren themselves.

As an experiment I did try to manually iterate through the lists without Map and reduce, and found that those three lines replaced something like 12-15 lines. Further, the 12-15 line code was... obtuse at best. Got to love it when succinct code is also easier to understand.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1527</wp:post_id>
  <wp:post_date>2018-05-22 15:00:44</wp:post_date>
  <wp:post_date_gmt>2018-05-22 20:00:44</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-use-map-and-reduce</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="clean-code"><![CDATA[clean-code]]></category>
  <category domain="post_tag" nicename="functional"><![CDATA[functional]]></category>
  <category domain="post_tag" nicename="map-reduce"><![CDATA[map-reduce]]></category>
  <category domain="post_tag" nicename="redux"><![CDATA[redux]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1309]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1527019429]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18141108937]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6404783705428152321&type=U&a=JSAs]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to delete a property from a javascript object</title>
  <link>https://danieljscheufler.wordpress.com/2018/04/24/til-how-to-delete-a-property-from-a-javascript-object/</link>
  <pubDate>Tue, 24 Apr 2018 20:00:47 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1529</guid>
  <description/>
  <content:encoded><![CDATA[While working in a reducer, I found I needed to close/remove an entry from a dictionary. After a brief amount of digging I found that I did not have to write this functionality myself.

The kind folk of Lodash have you covered. Simple _omit_ the property. Like so:
<pre>import omit from 'lodash/omit'

default export (object)=&gt;omit(object,removedKey);</pre>
Lodash/Omit kindly returns a new object, <em>omitting</em> the given key.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1529</wp:post_id>
  <wp:post_date>2018-04-24 15:00:47</wp:post_date>
  <wp:post_date_gmt>2018-04-24 20:00:47</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-delete-a-property-from-a-javascript-object</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
  <category domain="post_tag" nicename="lodash"><![CDATA[lodash]]></category>
  <category domain="post_tag" nicename="omit"><![CDATA[omit]]></category>
  <category domain="post_tag" nicename="react"><![CDATA[react]]></category>
  <category domain="post_tag" nicename="redux"><![CDATA[redux]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="category" nicename="work-projects"><![CDATA[Work Projects]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17150999748]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1524604499]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6394654752067645440&type=U&a=2urd]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>Spring 2018 Houston TechFest - Slides</title>
  <link>https://danieljscheufler.wordpress.com/2018/05/08/spring-2018-houston-techfest-slides/</link>
  <pubDate>Tue, 08 May 2018 20:30:07 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1531</guid>
  <description/>
  <content:encoded><![CDATA[I am pleased to say that my presentation on May 5th at the Spring 2018 Houston TechFest went very well. Being my first conference presentation I was a bit nervous but I enjoyed the experience very much.

For those who kindly attended my session <em>'Demystifying the Whiteboard Interview'</em>, I thank you. As promised, I have uploaded the slides <a href="https://drive.google.com/open?id=1LV0l4YklGICI3ZD7oJWgqx3ebyGiEcg4" target="_blank" rel="noopener">here</a>. If you would kindly leave a rating at <a href="http://spkr8.com/t/75481" target="_blank" rel="noopener">SpeakerRate</a>, I would be most appreciative.

I look forward to seeing you all at the Fall Houston TechFest!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1531</wp:post_id>
  <wp:post_date>2018-05-08 15:30:07</wp:post_date>
  <wp:post_date_gmt>2018-05-08 20:30:07</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>spring-2018-houston-techfest-slides</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="interview"><![CDATA[interview]]></category>
  <category domain="post_tag" nicename="talk"><![CDATA[talk]]></category>
  <category domain="category" nicename="talks"><![CDATA[Talks]]></category>
  <category domain="post_tag" nicename="techfest"><![CDATA[techfest]]></category>
  <category domain="post_tag" nicename="whiteboard"><![CDATA[whiteboard]]></category>
  <category domain="post_tag" nicename="whiteboarding"><![CDATA[whiteboarding]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1533]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[17637748059]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1525821332]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6399758522271219712&type=U&a=h8rp]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to use ToDictionary</title>
  <link>https://danieljscheufler.wordpress.com/2018/06/05/til-how-to-use-todictionary/</link>
  <pubDate>Tue, 05 Jun 2018 20:30:04 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1534</guid>
  <description/>
  <content:encoded><![CDATA[So I was creating a bulk action in a controller. I needed to map a list of Ids to a dictionary of said Ids and their respective results. My initial thought was to use ForEach, but there was a great deal of unnecessary boiler-plate code involved. There had to be a better way. And of course there was.

Naturally the ToDictionary function was invented by brilliant minds in anticipation of such a need. Here's a rough example:
<pre>listOfId.ToDictionary(key=&gt; key, value =&gt; MethodtoGetValue(value,otherParams));</pre>
Note that the key, and the value both come from the entry in the List, and are used to create the resulting key-value pair. Meaning that you could create a Key and a Value from functions that use the list entry as an input.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1534</wp:post_id>
  <wp:post_date>2018-06-05 15:30:04</wp:post_date>
  <wp:post_date_gmt>2018-06-05 20:30:04</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-use-todictionary</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="c"><![CDATA[c++]]></category>
  <category domain="post_tag" nicename="linq"><![CDATA[linq]]></category>
  <category domain="post_tag" nicename="list"><![CDATA[list]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="todictionary"><![CDATA[todictionary]]></category>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[404]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1528231656]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18645715230]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6409868154125770752&type=U&a=HOHe]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to Resolve false-positive ESLint Errors</title>
  <link>https://danieljscheufler.wordpress.com/2018/06/12/til-how-to-resolve-false-positive-eslint-errors/</link>
  <pubDate>Tue, 12 Jun 2018 20:30:29 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1536</guid>
  <description/>
  <content:encoded><![CDATA[So a colleague of mine was struggling with our local build process. Every time he ran the npm command, which ran a webpack build, He'd get numerous errors for <em>'import/no-unresolved'. </em>The associated message would complain that the file casing did not match the underlying file system.

As it turns out, the warning was technically correct. When we checked his command line, we found that the interface reported the folder name with a lowercase. To be clear the folder, as it existed in the file system, was capitalized. So we spun up a new CLI, and tried it with a capitalized version of the folder. Lo and behold, it worked perfectly.

Be sure to check your CLI, when a command returns with very odd errors.]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1536</wp:post_id>
  <wp:post_date>2018-06-12 15:30:29</wp:post_date>
  <wp:post_date_gmt>2018-06-12 20:30:29</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-resolve-false-positive-eslint-errors</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="cli"><![CDATA[cli]]></category>
  <category domain="post_tag" nicename="cmd"><![CDATA[cmd]]></category>
  <category domain="post_tag" nicename="cmd-line"><![CDATA[cmd-line]]></category>
  <category domain="post_tag" nicename="eslint"><![CDATA[eslint]]></category>
  <category domain="post_tag" nicename="file-casing"><![CDATA[file-casing]]></category>
  <category domain="post_tag" nicename="no-unresolved"><![CDATA[no-unresolved]]></category>
  <category domain="post_tag" nicename="npm"><![CDATA[npm]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="webpack"><![CDATA[webpack]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[162]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[18901703811]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1528843038]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6412432471975088128&type=U&a=lpn-]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to run a single suite of Tests in Jest</title>
  <link>https://danieljscheufler.wordpress.com/2018/06/19/til-how-to-run-a-single-suite-of-tests-in-jest/</link>
  <pubDate>Tue, 19 Jun 2018 20:30:24 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1538</guid>
  <description/>
  <content:encoded><![CDATA[So I was writing unit tests for my reducers, but got frustrated with the slow process of running the full test suite when I was tweaking a single test. I though, there's got to be a better way!

To the Internet! And TaDa, there was! Once you install Jest globablly, you can run a simple command to select the suite or suites you want to run:

jest --runInBand "{matchString}"

This command will run any <em>file</em> whose name matches the given string. So if you wanted to run all the tests associated with the SuchAndSuchModule. You could use:

jest --runInBand "SuchAndSuch*"

My thanks to be brilliant folks who answer stack-overflow questions! You can find the answer I did <a href="http://uch a need. Here's a rough example:" target="_blank" rel="noopener">here</a>]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1538</wp:post_id>
  <wp:post_date>2018-06-19 15:30:24</wp:post_date>
  <wp:post_date_gmt>2018-06-19 20:30:24</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-run-a-single-suite-of-tests-in-jest</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jest"><![CDATA[jest]]></category>
  <category domain="post_tag" nicename="redux"><![CDATA[redux]]></category>
  <category domain="post_tag" nicename="tdd"><![CDATA[TDD]]></category>
  <category domain="post_tag" nicename="test-suite"><![CDATA[test-suite]]></category>
  <category domain="post_tag" nicename="testing"><![CDATA[testing]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="unit-test"><![CDATA[unit-test]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[1364]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19142643457]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1529446908]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[www.linkedin.com/updates?topic=6414965287044608000]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
</item>
<item>
  <title>TIL... How to test a window-redirect using Mocks</title>
  <link>https://danieljscheufler.wordpress.com/2018/06/26/til-how-to-test-a-window-redirect-using-mocks/</link>
  <pubDate>Tue, 26 Jun 2018 20:30:59 +0000</pubDate>
  <dc:creator>tytrin</dc:creator>
  <guid isPermaLink="false">https://danieljscheufler.wordpress.com/?p=1540</guid>
  <description/>
  <content:encoded><![CDATA[I was testing an action, which upon completion needed to redirect the user to a new page. Normally, in javascript you can redirect using :
<pre>window.location = "newPath";</pre>
But that's hard to test for. Thankfully there is a better way:
<pre>window.location.assign("newPath");</pre>
You can then mock the assign function and test for that call! My thanks to the creators of jest for that <a href="https://github.com/facebook/jest/issues/890" target="_blank" rel="noopener">insight</a>!]]></content:encoded>
  <excerpt:encoded><![CDATA[]]></excerpt:encoded>
  <wp:post_id>1540</wp:post_id>
  <wp:post_date>2018-06-26 15:30:59</wp:post_date>
  <wp:post_date_gmt>2018-06-26 20:30:59</wp:post_date_gmt>
  <wp:comment_status>open</wp:comment_status>
  <wp:ping_status>open</wp:ping_status>
  <wp:post_name>til-how-to-test-a-window-redirect-using-mocks</wp:post_name>
  <wp:status>publish</wp:status>
  <wp:post_parent>0</wp:post_parent>
  <wp:menu_order>0</wp:menu_order>
  <wp:post_type>post</wp:post_type>
  <wp:post_password/>
  <wp:is_sticky>0</wp:is_sticky>
  <category domain="post_tag" nicename="jest"><![CDATA[jest]]></category>
  <category domain="post_tag" nicename="location"><![CDATA[location]]></category>
  <category domain="post_tag" nicename="mocking"><![CDATA[mocking]]></category>
  <category domain="post_tag" nicename="mocks"><![CDATA[mocks]]></category>
  <category domain="post_tag" nicename="redirect"><![CDATA[redirect]]></category>
  <category domain="category" nicename="todayilearned"><![CDATA[TodayILearned]]></category>
  <category domain="post_tag" nicename="window"><![CDATA[window]]></category>
  <wp:postmeta>
    <wp:meta_key>_rest_api_published</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_rest_api_client_id</wp:meta_key>
    <wp:meta_value><![CDATA[-1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_thumbnail_id</wp:meta_key>
    <wp:meta_value><![CDATA[524]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_job_id</wp:meta_key>
    <wp:meta_value><![CDATA[19387895088]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>publicize_linkedin_url</wp:meta_key>
    <wp:meta_value><![CDATA[https://www.linkedin.com/updates?discuss=&scope=141702516&stype=M&topic=6409112771631341568&type=U&a=ray2]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_publicize_done_15964954</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>_wpas_done_15797233</wp:meta_key>
    <wp:meta_value><![CDATA[1]]></wp:meta_value>
  </wp:postmeta>
  <wp:postmeta>
    <wp:meta_key>timeline_notification</wp:meta_key>
    <wp:meta_value><![CDATA[1530049148]]></wp:meta_value>
  </wp:postmeta>
</item>
  </channel>
</rss>
