<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>A Journeyman&#39;s Travels</title>
    <link>daniel.scheufler.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Sun, 04 Nov 2018 22:59:30 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Migrating to Hexo - First Theme</title>
      <link>daniel.scheufler.io/2018/11/04/hexo-first-theme/</link>
      <guid>daniel.scheufler.io/2018/11/04/hexo-first-theme/</guid>
      <pubDate>Sun, 04 Nov 2018 22:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Last post, I explained &lt;a href=&quot;/2018/10/21/hexo-conversion/&quot;&gt;how I converted my wordpress blog to Hexo&lt;/a&gt;. This week I&#39;ll expound on th
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Last post, I explained <a href="/2018/10/21/hexo-conversion/">how I converted my wordpress blog to Hexo</a>. This week I'll expound on the fun I had with my first theme.</p><p>Natrually, I started with the same old 'Hello World' theme that every Hexo blog comes with. But as I learned more about how Hexo uses the ExpressJS files to generate the site, I grew more adventurous.</p><p>The first theme I settled on was <a href="http://beantech.org/" target="_blank" rel="noopener">Beantech</a>. I must admit I still like the theme. The author included it in the Hexo Theme library, so it was easy to discover and begin using. All I had to do, was download it and add it to the themes folder in my Repo.</p><p>After that, I decided that I should remove some of the logos and styles from the theme, since I was running my own blog. By this time I had been working in Web UI development for some time. As a result, I easily discovered several of the tricks the BeanTech developer used to scult his theme.</p><p>Some simple fixes included modifications of the styling files, which applied globally. For example, I removed the signature image, and adjusted the default text color in some places.One feature I enjoyed from BeanTech is the return to top link. It will appear once you've scrolled through many posts on the home page. On BeanTech, you'll see a clickable flying Ironman. But the Theme author left in a default rocket ship for those who preferred. I was able to discover this as well as the necessary image size adjustments to make the rocket ship appear. In retrospect, I like this feature so much that I plan to add it to my blog in the future.</p><p>But during all this style work, I started digging into the ejs files in the layout folder. Here you can find the meat of how Hexo generates each html page for your site. Here you can learn how Hexo constructs your site through the mix of html and javascript code.</p><p>I will recommend learning ExpressJs first before looking under the covers. I found the NodeJS example project for Heroku is a good start. Hardest part was to guess the names of the various objects used by ExpressJS to contain your posts, pages and tags.With a little guess work, I was able to understand most of the functionality. I was also able to remove some unnecessary code from my Repo, since I wasn't using the full feature set of Beantech. There were several Social Media plug-ins which I did not want or need, so I removed the code which supported them.</p><p>After all this reading, I gave my new theme a try. But to my dismay my tags failed to work. I immediately thought to revert my changes, but to no avail. I suspect my tagging structure did not follow the theme resulting in the link breaks.</p><p>While I was able to understand what was going on, I was not willing to spend several hours debugging to determine what I had to change. Even less so, did I want to spend the hours re-doing my existing tags.</p><p>So I sought out another theme, one which would be simpler to manage, and would preserve my sanity. I settled on <a href="https://hinpc.github.io/Daily/" target="_blank" rel="noopener">Daily</a>. Daily is a lovely minimalist theme, with a good feature set for email and Github integration.</p><p>At the time, I found the white background to be a bit harsh. So I swapped it for an Ivory color, aiming for more of a parchment aesthetic. I accompanied this with the new Site logo, using the same Ivory for the background.</p><p>I completed the tinkering with a new LinkedIn integration icon. I even added an svg to the images folder of the theme. That way the existing generation code could handle LinkedIn without extra guidance.</p><p>With those modifications made, and with thorough  testing completed, I checked my site. Sweet Success! The tags worked. The media integration worked. And I was able to scroll through my posts, without burning the eyes out of my skull!</p><p>With that chapter completed I turned to the next challenge: Hosting! I look forward to discussing my hosting journey, short though it was next time!</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/11/04/hexo-first-theme/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Migrating to Hexo - Conversion</title>
      <link>daniel.scheufler.io/2018/10/21/hexo-conversion/</link>
      <guid>daniel.scheufler.io/2018/10/21/hexo-conversion/</guid>
      <pubDate>Sun, 21 Oct 2018 20:35:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Last week, I explained &lt;a href=&quot;/2018/10/14/hexo-discovery/&quot;&gt;how I found Hexo&lt;/a&gt;. This week I&#39;ll explain how easy it was to convert my o
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Last week, I explained <a href="/2018/10/14/hexo-discovery/">how I found Hexo</a>. This week I'll explain how easy it was to convert my original Wordpress blog over to Hexo.</p><p>Now that I had settled on a site engine, I had to get my content into it. After all, leaving any content on the original site would force me to support both going forward. Being a developer, supporting two platforms didn't sound like fun. So I opted for the 'lazier' route, so migrating all my content.</p><p>A quick search for 'Wordpress to Hexo' will yield a plug-in, <a href="https://hexo.io/docs/migration.html" target="_blank" rel="noopener">hexo-migrator-wordpress</a>. May God bless whoever wrote this wonderful little tool! Not only is it well supported with documentation. It even provides instructions for how to get your data out of Wordpress!</p><p>Now here, I do wish to thank Wordpress for continuing to provide this option. It was as easy as downloading an xml document with all my posts and most of my tags. So, thank you Wordpress Devs. Your kindness was noticed and appreciated!</p><p>Once I had my file, I ran a simple command:<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate wordpress &lt;source&gt;</span><br></pre></td></tr></table></figure></p><p>This command took a few second to run, and produced several outputs. First, it converted my posts into individual markdown files. Additionally, the pages I had created under the Wordpress site turned into folders, and supporting index.md files. While the conversion was not perfect, the process was mostly painless.</p><p>Certain things did not come over with the automatic conversion, like header images. Further all inter-post links continue to point to Wordpress. As of this posting, I still need to hunt down those links and correct them.</p><p>But the images were easy to fix. I was able to download them from Wordpress and host them within the site. After that it was a simple matter of adding a link to the image in the front-matter of the posts.</p><p>Admittedly, I have only added the header images to some of the posts. The process is somewhat tedious, even on themes which support such it. Which segues nicely into next week's topic: Themes. I plan to discuss the first theme I used, and the various 'tweaks' I made while learning the ins-and-outs of the system.</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/10/21/hexo-conversion/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Migrating to Hexo - Discovery</title>
      <link>daniel.scheufler.io/2018/10/13/hexo-discovery/</link>
      <guid>daniel.scheufler.io/2018/10/13/hexo-discovery/</guid>
      <pubDate>Sun, 14 Oct 2018 01:25:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;As promised, I have finally started my series on my Migration to Hexo. Over the next few weeks, I will expound on my journey from Wordpre
        
      
      </description>
      
      <content:encoded><![CDATA[<p>As promised, I have finally started my series on my Migration to Hexo. Over the next few weeks, I will expound on my journey from Wordpress,  through several alternative blogging platforms. And, of course, landing on Hexo. Today, Discovery: <em>'How I finally found Hexo'.</em></p><p>I started my blogging career on Wordpress. I realized some of the content I had written to share on my then-employer's internal social network would be of interest. Wordpress was free, and allowed me to set-up a basic blog with little hassle. Aside from self-censuring my own posts to avoid divulging anything I thought my then-employer would prefer remain closed, I had an easy time of it.</p><p>I began by sharing tidbits about my work, my experiences, and on occasion sharing articles I found. As time went one, I began to rely on my blog as something of a <em>living resume</em>.</p><p>With that re-interpretation I felt the need for a more professional appearance. I searched for a long while for an appropriate theme. I struggled to find something I was comfortable with. I wrote software, but I wasn't yet comfortable enough to support my own style-sheet.</p><p>I will admit I struggled here. I couldn't find the features I wanted in the themes I was able to use. Moreover, around this same time Wordpress started to change. These changes were not wholly bad. There were some notable improvements in the Web interface. But something about the company's approach changed and began to make me uneasy.</p><p>So I looked for other blogging platforms. This lasted several <em>years</em>, and would spike with activity as I discovered alternatives. First, I discovered <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a>, which is also a static-site generator. But at the time my web experience was very limited. I was unable to get even the basics working, despite their tutorials. So much for phase one.</p><p>Phase Two was a bit more productive. I discovered <a href="https://ghost.org/" target="_blank" rel="noopener">ghost</a>. I first found it as an add-in for <a href="https://oasis.sandstorm.io/" target="_blank" rel="noopener">Sandstorm</a>. At the time I was looking into self-hosting everything I could. I was  <em>a little paranoid</em>.  While I am still intrigued by the idea of self-hosting, I never tried that version of Ghost as it was out-of-date.</p><p>It wasn't until 2017 that a colleague introduced me to <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a>. Heroku is a very developer-friendly Cloud App Hosting service, with an excellent free-teir! And guess what It comes with a Ghost-button, which all but removed the cost of set-up, and it ran a current version! After playing around with some other projects, written wholly on NodeJs, I gave Ghost a try.</p><p>I have to admit their <a href="https://blog.ghost.org/desktop/" target="_blank" rel="noopener">desktop editor</a> is very slick! I was even able to hook it up to my Heroku instance. But I wasn't able to completely host on Heroku.</p><p>Heroku's free tier is excellent and offers a great deal of flexibility for a fledgling Web-App. It even supports a PostgreSQL database for persistence. Ghost did not use Postgre and needed a paid persistence layer. Without it, such things as custom themes, and many other features would  not work. Moreover, as I researched, I found it would be nigh impossible to import my Wordpress posts into Ghost. In order for Ghost to get the data, I would need to stand-up an independent instance of my Blog running in an environment that both it and Ghost shared. So much for phase 2.</p><p>A few months after Ghost fell out of the running I happened upon <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>. My current client relies on React, and I've become much more familiar with both NodeJS and web development in general. And so it was that I was searching for a static site generator that supported Markdown, and would run on NodeJs. If I was going to do my own support, I needed to be comfortable with the system enough to control it and to debug it! Hexo came up in one such search. So began Phase 3.</p><p>After trying it out at home, and seeing how easy it was to stand-up the site, and add posts I was hooked! But several hurdles remained. First I needed to pull in my old posts. And I'll explain how I executed that feat next week.</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/10/13/hexo-discovery/#disqus_thread</comments>
    </item>
    
    <item>
      <title>New Horizons</title>
      <link>daniel.scheufler.io/2018/09/05/new-horizons/</link>
      <guid>daniel.scheufler.io/2018/09/05/new-horizons/</guid>
      <pubDate>Wed, 05 Sep 2018 20:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;I am pleased to announce the completion of a recent side-project. This side-project is also the reason for my hiatus over the last few mo
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I am pleased to announce the completion of a recent side-project. This side-project is also the reason for my hiatus over the last few months. I have been looking for a new blogging platform.I sought finer control of the site, and the satisfaction that comes with doing-it-yourself.</p><p>I found this happy medium in a static site generator called <a href="hexo.io">Hexo</a>. It took some time to find a generator I was comfortable with. Then it took time to actually transition my blog. And finally it took time to sort out hosting. All in all, I spent about a week actually doing code stuff. I spent the rest either researching generators, or finding <a href="netlify.com">the right host</a>.</p><p>To my delight, I have enough material to populate a blog series. If the topic interests you, I invite you to my new blog site: <a href="daniel.scheufler.io">daniel.scheufler.io</a> for the rest of the series.</p><p>Until then, I would like to leave you with this blessing, in case we are here parting ways: 'May the road rise up to meet you.May the wind be always at your back.May the sun shine wamr upon your face;the rain fall soft upon your fieldsand until we meet again,may God hold you in the palm of His hand. '</p><ul><li>Old Irish Blessing</li></ul>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/09/05/new-horizons/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TechFest Fall 2018</title>
      <link>daniel.scheufler.io/2018/09/04/techfest-fall-2018/</link>
      <guid>daniel.scheufler.io/2018/09/04/techfest-fall-2018/</guid>
      <pubDate>Tue, 04 Sep 2018 20:30:00 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;The kind organizers of Houston TechFest recently announced the speakers. I am pleased report I am among their number! I am stoked for the
        
      
      </description>
      
      <content:encoded><![CDATA[<p>The kind organizers of Houston TechFest recently announced the speakers. I am pleased report I am among their number! I am stoked for the event, and will be presenting on the following:</p><ol><li>Designing and Running Effective Meetings</li></ol><ul><li>Do meeting at your company drag on and on and on... ? Do you wish they'd get to the point already? Have you ever had to have a meeting after the meeting to make the real decisions? What if there was a way to fix this broken process? What if we could make meetings effective again? Come learn some guiding principles to help make your meetings more effective, and not just the ones you lead! Tips include how to organize your meeting, how to help ensure decisions are made, and suggestions for follow-ups to communicate the decisions, so they don't die in the meeting!</li></ul><ol start="2"><li>Web UI Testing? Yes, You can! - Co-presenting with <a href="lassala.net">Claudio Lassala</a></li></ol><ul><li>Those back-end guys really seem bought into this TDD idea. What with their interface mocking and SOLID design principles. But is such a thing even possible in the Front-End? Besides everyone knows UI tests are painfully slow!</li></ul><p>Guess what ?! Not only can TDD be used in the Front-End, it will improve your designs, just like it does in the back-end. What's more is you can do with without having to write laboriously slow UI tests! Come learn how to improve the design of your React Components and Redux Store using TDD Best practices, and see why mocking is even easier in Javascript than it is in C#!</p><ol start="3"><li>Demystifying the Whiteboard Interview</li></ol><ul><li>Its no secret that Whiteboard interviews are widely panned by the industry. Just as well known is that you will inevitably have to face one every-time you interview. But why? There must be some pattern or principle that can be learned to make the process less unpleasant, right? Indeed there is! Come learn some simple steps and tool you can use to improve your next whiteboarding interview!</li></ul><p>Looking forward to seeing you all there! More information on the conference is available at their <a href="http://www.houstontechfest.com/" target="_blank" rel="noopener">website</a>. And don't forget to <a href="https://www.eventbrite.com/e/houston-techfest-2018-tickets-47835956634" target="_blank" rel="noopener">pre-register</a>!</p><p>P.S. If you haven't seen Claudio speak, I highly recommend attending one of his User Group presentations! Plus his <a href="lassala.net">blog</a> has some great stuff too!</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/09/04/techfest-fall-2018/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TIL... How to test a window-redirect using Mocks</title>
      <link>daniel.scheufler.io/2018/06/26/til-how-to-test-a-window-redirect-using-mocks/</link>
      <guid>daniel.scheufler.io/2018/06/26/til-how-to-test-a-window-redirect-using-mocks/</guid>
      <pubDate>Tue, 26 Jun 2018 20:30:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;I was testing an action, which upon completion needed to redirect the user to a new page. Normally, in javascript you can redirect using 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>I was testing an action, which upon completion needed to redirect the user to a new page. Normally, in javascript you can redirect using :</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location = <span class="string">"newPath"</span>;</span><br></pre></td></tr></table></figure></p><p>But that's hard to test for. Thankfully there is a better way:</p><p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.assign(<span class="string">"newPath"</span>);</span><br></pre></td></tr></table></figure></p><p>You can then mock the assign function and test for that call! My thanks to the creators of jest for that <a href="https://github.com/facebook/jest/issues/890" target="_blank" rel="noopener">insight</a>!</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/06/26/til-how-to-test-a-window-redirect-using-mocks/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TIL... How to run a single suite of Tests in Jest</title>
      <link>daniel.scheufler.io/2018/06/19/til-how-to-run-a-single-suite-of-tests-in-jest/</link>
      <guid>daniel.scheufler.io/2018/06/19/til-how-to-run-a-single-suite-of-tests-in-jest/</guid>
      <pubDate>Tue, 19 Jun 2018 20:30:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;So I was writing unit tests for my reducers, but got frustrated with the slow process of running the full test suite when I was tweaking 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>So I was writing unit tests for my reducers, but got frustrated with the slow process of running the full test suite when I was tweaking a single test. I though, there's got to be a better way! To the Internet! And TaDa, there was! Once you install Jest globablly, you can run a simple command to select the suite or suites you want to run:<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest --runInBand <span class="string">"&#123;matchString&#125;"</span></span><br></pre></td></tr></table></figure></p><p>This command will run any <em>file</em> whose name matches the given string. So if you wanted to run all the tests associated with the SuchAndSuchModule. You could use:</p><p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jest --runInBand <span class="string">"SuchAndSuch*"</span></span><br></pre></td></tr></table></figure></p><p>My thanks to be brilliant folks who answer stack-overflow questions! You can find the answer I did [here](http://uch a need. Here's a rough example:)</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/06/19/til-how-to-run-a-single-suite-of-tests-in-jest/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TIL... How to Resolve false-positive ESLint Errors</title>
      <link>daniel.scheufler.io/2018/06/12/til-how-to-resolve-false-positive-eslint-errors/</link>
      <guid>daniel.scheufler.io/2018/06/12/til-how-to-resolve-false-positive-eslint-errors/</guid>
      <pubDate>Tue, 12 Jun 2018 20:30:29 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;So a colleague of mine was struggling with our local build process. Every time he ran the npm command, which ran a webpack build, He&#39;d ge
        
      
      </description>
      
      <content:encoded><![CDATA[<p>So a colleague of mine was struggling with our local build process. Every time he ran the npm command, which ran a webpack build, He'd get numerous errors for <em>'import/no-unresolved'.</em> The associated message would complain that the file casing did not match the underlying file system. As it turns out, the warning was technically correct. When we checked his command line, we found that the interface reported the folder name with a lowercase. To be clear the folder, as it existed in the file system, was capitalized. So we spun up a new CLI, and tried it with a capitalized version of the folder. Lo and behold, it worked perfectly. Be sure to check your CLI, when a command returns with very odd errors.</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/06/12/til-how-to-resolve-false-positive-eslint-errors/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TIL... How to use ToDictionary</title>
      <link>daniel.scheufler.io/2018/06/05/til-how-to-use-todictionary/</link>
      <guid>daniel.scheufler.io/2018/06/05/til-how-to-use-todictionary/</guid>
      <pubDate>Tue, 05 Jun 2018 20:30:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;So I was creating a bulk action in a controller. I needed to map a list of Ids to a dictionary of said Ids and their respective results. 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>So I was creating a bulk action in a controller. I needed to map a list of Ids to a dictionary of said Ids and their respective results. My initial thought was to use ForEach, but there was a great deal of unnecessary boiler-plate code involved. There had to be a better way. And of course there was. Naturally the ToDictionary function was invented by brilliant minds in anticipation of such a need. Here's a rough example:</p><p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listOfId.ToDictionary(key=&gt; key, <span class="keyword">value</span> =&gt; MethodtoGetValue(<span class="keyword">value</span>,otherParams));</span><br></pre></td></tr></table></figure></p><p>Note that the key, and the value both come from the entry in the List, and are used to create the resulting key-value pair. Meaning that you could create a Key and a Value from functions that use the list entry as an input.</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/06/05/til-how-to-use-todictionary/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TIL... How to use Map and Reduce</title>
      <link>daniel.scheufler.io/2018/05/22/til-how-to-use-map-and-reduce/</link>
      <guid>daniel.scheufler.io/2018/05/22/til-how-to-use-map-and-reduce/</guid>
      <pubDate>Tue, 22 May 2018 20:00:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;While working on a React app, I needed to translate a bit of Redux shape into one needed by an Api. Due to the normalization we imposed o
        
      
      </description>
      
      <content:encoded><![CDATA[<p>While working on a React app, I needed to translate a bit of Redux shape into one needed by an Api. Due to the normalization we imposed on the Redux state, I had to navigate to the desired information through a couple of lists. These entities each had a list of ids of children, and I needed the grand-children of a given entity.</p><p>Instead of manually composing this list, I found map and reduce were far better suited to the task, as you might imagine. In order to get the list of grandchildren, I first mapped the list of children ids to a list of lists of grand-child ids. These lists were accessed through the children.</p><p>Then I took the list of lists and reduced it , effectively merging it into a single, long list of all grandchildren. Helpful hint, always include an initial value for the list. It helps avoid bugs when inputs are empty.</p><p>Finally I mapped the list of grand-child ids to the grandchildren themselves. As an experiment I did try to manually iterate through the lists without Map and reduce, and found that those three lines replaced something like 12-15 lines. Further, the 12-15 line code was... obtuse at best. Got to love it when succinct code is also easier to understand.</p>]]></content:encoded>
      
      <comments>daniel.scheufler.io/2018/05/22/til-how-to-use-map-and-reduce/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
